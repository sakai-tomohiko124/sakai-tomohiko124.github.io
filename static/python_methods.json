[
      {
        "page": "p32",
        "term": "コマンド終了 (Command Exit)",
        "category": "コマンド (Command)",
        "usage_example": "quit()",
        "explanation": "Pythonインタプリタを終了します。"
      },
      {
        "page": "p51",
        "term": "画面への出力 (Screen Output)",
        "category": "関数 (Function)",
        "usage_example": "print(\"Hello\")",
        "explanation": "文字列 (string) や変数 (variable) の内容を画面に表示します。自動で改行されます。"
      },
      {
        "page": "p52",
        "term": "画面への出力 (Screen Output)",
        "category": "関数 (Function)",
        "usage_example": "print(a, b, c)",
        "explanation": "複数の値をスペース区切りで表示します。"
      },
      {
        "page": "p52",
        "term": "スクリプト実行 (Script Execution)",
        "category": "コマンド (Command)",
        "usage_example": "python my_script.py",
        "explanation": "Pythonプログラムのファイルを実行します。"
      },
      {
        "page": "p52",
        "term": "ディレクトリ変更 (Change Directory)",
        "category": "コマンド (Command)",
        "usage_example": "cd my_project",
        "explanation": "カレントディレクトリを変更します。"
      },
      {
        "page": "p53",
        "term": "画面への出力 (endオプション)",
        "category": "関数 (Function)",
        "usage_example": "print(\"Hello\", end=\"\")",
        "explanation": "end=\"\"を指定すると、末尾の改行を行いません。"
      },
      {
        "page": "p56",
        "term": "関数の定義 (Function Definition)",
        "category": "書式 (Syntax)",
        "usage_example": "def my_function():",
        "explanation": "defを使って新しい関数 (function) を定義します。"
      },
      {
        "page": "p56",
        "term": "関数の呼び出し (引数なし)",
        "category": "書式 (Syntax)",
        "usage_example": "my_function()",
        "explanation": "引数 (argument) なしで関数 (function) を呼び出します。"
      },
      {
        "page": "p56",
        "term": "関数の呼び出し (位置引数)",
        "category": "書式 (Syntax)",
        "usage_example": "my_function(10)",
        "explanation": "引数 (argument) (位置引数 / positional argument) を1つ渡して関数 (function) を呼び出します。"
      },
      {
        "page": "p58",
        "term": "関数の呼び出し (キーワード引数)",
        "category": "書式 (Syntax)",
        "usage_example": "my_function(name=\"A\")",
        "explanation": "引数 (argument) (キーワード引数 / keyword argument) を渡して関数 (function) を呼び出します。"
      },
      {
        "page": "p66",
        "term": "1行コメント (Single-line Comment)",
        "category": "書式 (Syntax)",
        "usage_example": "#これはコメントです",
        "explanation": "#からその行の終わりまでがコメント (comment) になります。"
      },
      {
        "page": "p67",
        "term": "インラインコメント (Inline Comment)",
        "category": "書式 (Syntax)",
        "usage_example": "x = 10 #変数に値を代入",
        "explanation": "コードと同じ行に記述するコメント (comment) です。"
      },
      {
        "page": "p68",
        "term": "複数行コメント (Multi-line Comment)",
        "category": "書式 (Syntax)",
        "usage_example": "\"\"\"\\n複数行の\\nコメントです\\n\"\"\"",
        "explanation": "複数行にわたるコメント (comment) です。"
      },
      {
        "page": "p70",
        "term": "パッケージ導入 (Package Installation)",
        "category": "コマンド (Command)",
        "usage_example": "pip install requests",
        "explanation": "pipを使い、外部ライブラリをインストールします。"
      },
      {
        "page": "p70",
        "term": "コードスタイルチェック (Code Style Check)",
        "category": "コマンド (Command)",
        "usage_example": "pycodestyle my_script.py",
        "explanation": "コーディング規約 (PEP8) に準拠しているかチェックします。"
      },
      {
        "page": "p71",
        "term": "コード自動整形 (Code Auto-formatting)",
        "category": "コマンド (Command)",
        "usage_example": "autopep8 -i my_script.py",
        "explanation": "PEP8に準拠するよう、ファイルを直接書き換えて整形します。"
      },
      {
        "page": "p80",
        "term": "文字列の作成 (シングル/ダブルクォート)",
        "category": "書式 (Syntax)",
        "usage_example": "'abc', \"abc\"",
        "explanation": "シングルまたはダブルクォートで文字列 (string) を作成します。"
      },
      {
        "page": "p85",
        "term": "文字列の作成 (三重クォート)",
        "category": "書式 (Syntax)",
        "usage_example": "\"\"\"line1\\nline2\"\"\"",
        "explanation": "三重クォートで複数行の文字列 (string) を作成します。"
      },
      {
        "page": "p85",
        "term": "文字列の作成 (raw文字列)",
        "category": "書式 (Syntax)",
        "usage_example": "r\"C:\\Users\\name\"",
        "explanation": "raw文字列を作成します。※バックスラッシュを特殊文字として扱いません。"
      },
      {
        "page": "p86",
        "term": "比較演算 (等しい)",
        "category": "演算子 (Operator)",
        "usage_example": "a == b",
        "explanation": "等しい (Equal)"
      },
      {
        "page": "p86",
        "term": "比較演算 (等しくない)",
        "category": "演算子 (Operator)",
        "usage_example": "a != b",
        "explanation": "等しくない (Not Equal)"
      },
      {
        "page": "p86",
        "term": "比較演算 (より大きい/以上)",
        "category": "演算子 (Operator)",
        "usage_example": "a > b, a >= b",
        "explanation": "より大きい (Greater than), 以上 (Greater than or equal to)"
      },
      {
        "page": "p87",
        "term": "論理演算 (and)",
        "category": "演算子 (Operator)",
        "usage_example": "A and B",
        "explanation": "AとBの両方がTrueならTrue"
      },
      {
        "page": "p87",
        "term": "論理演算 (or)",
        "category": "演算子 (Operator)",
        "usage_example": "A or B",
        "explanation": "AまたはBのどちらかがTrueならTrue"
      },
      {
        "page": "p87",
        "term": "論理演算 (not)",
        "category": "演算子 (Operator)",
        "usage_example": "not A",
        "explanation": "AがFalseならTrue (真偽を反転)"
      },
      {
        "page": "p90",
        "term": "型変換 (int)",
        "category": "関数 (Function)",
        "usage_example": "int(\"10\")",
        "explanation": "文字列 (string) などを整数 (integer, int) 型に変換します。"
      },
      {
        "page": "p91",
        "term": "モジュール (import)",
        "category": "書式 (Syntax)",
        "usage_example": "import math",
        "explanation": "mathモジュール (module) をインポートします。"
      },
      {
        "page": "p91",
        "term": "モジュール (math.floor)",
        "category": "書式 (Syntax)",
        "usage_example": "math.floor(3.9)",
        "explanation": "mathモジュールのfloor関数 (切り捨て) を使用します。"
      },
      {
        "page": "p91",
        "term": "モジュール (math.ceil)",
        "category": "書式 (Syntax)",
        "usage_example": "math.ceil(3.1)",
        "explanation": "mathモジュールのceil関数 (切り上げ) を使用します。"
      },
      {
        "page": "p92",
        "term": "型変換 (float)",
        "category": "関数 (Function)",
        "usage_example": "float(\"3.14\")",
        "explanation": "文字列 (string) などを浮動小数点数 (float) 型に変換します。"
      },
      {
        "page": "p93",
        "term": "型変換 (str)",
        "category": "関数 (Function)",
        "usage_example": "str(123)",
        "explanation": "数値などを文字列 (string, str) 型に変換します。"
      },
      {
        "page": "p93",
        "term": "型変換 (bool)",
        "category": "関数 (Function)",
        "usage_example": "bool(0),bool(\"a\")",
        "explanation": "様々な値を真偽値 (boolean, bool) 型に変換します。※0, 空文字, NoneなどはFalseになります。"
      },
      {
        "page": "p95",
        "term": "変数への代入 (単一代入)",
        "category": "書式 (Syntax)",
        "usage_example": "x = 10",
        "explanation": "変数 (variable) xに値10を代入します。"
      },
      {
        "page": "p96",
        "term": "変数への代入 (同時代入)",
        "category": "書式 (Syntax)",
        "usage_example": "a = b = 10",
        "explanation": "複数の変数 (variable) に同じ値を一度に代入します。"
      },
      {
        "page": "p96",
        "term": "変数への代入 (多重代入)",
        "category": "書式 (Syntax)",
        "usage_example": "x, y = 10, 20",
        "explanation": "複数の変数 (variable) に異なる値を一度に代入します (多重代入)。"
      },
      {
        "page": "p99",
        "term": "オブジェクト比較 (id)",
        "category": "関数 (Function)",
        "usage_example": "id(x)",
        "explanation": "オブジェクト (object) のユニークなIDを返します。"
      },
      {
        "page": "p100",
        "term": "オブジェクト比較 (is)",
        "category": "演算子 (Operator)",
        "usage_example": "A is B",
        "explanation": "AとBが全く同じオブジェクト (object) を参照しているか確認します。"
      },
      {
        "page": "p100",
        "term": "オブジェクト比較 (is not)",
        "category": "演算子 (Operator)",
        "usage_example": "A is not B",
        "explanation": "AとBが異なるオブジェクト (object) を参照しているか確認します。"
      },
      {
        "page": "p104",
        "term": "変数の削除 (Variable Deletion)",
        "category": "書式 (Syntax)",
        "usage_example": "del x",
        "explanation": "変数 (variable) xを削除します。"
      },
      {
        "page": "p105",
        "term": "算術演算 (加算/減算)",
        "category": "演算子 (Operator)",
        "usage_example": "a + b, a - b",
        "explanation": "加算 (Addition), 減算 (Subtraction)"
      },
      {
        "page": "p105",
        "term": "算術演算 (乗算)",
        "category": "演算子 (Operator)",
        "usage_example": "a*b",
        "explanation": "乗算 (Multiplication)"
      },
      {
        "page": "p105",
        "term": "算術演算 (除算)",
        "category": "演算子 (Operator)",
        "usage_example": "a/b",
        "explanation": "除算 (Division) (結果は常にfloat)"
      },
      {
        "page": "p105",
        "term": "算術演算 (切り捨て除算)",
        "category": "演算子 (Operator)",
        "usage_example": "a//b",
        "explanation": "切り捨て除算 (Floor Division) (小数点以下を切り捨て)"
      },
      {
        "page": "p105",
        "term": "算術演算 (剰余)",
        "category": "演算子 (Operator)",
        "usage_example": "a % b",
        "explanation": "剰余 (Modulo) (割り算の余り)"
      },
      {
        "page": "p105",
        "term": "算術演算 (べき乗)",
        "category": "演算子 (Operator)",
        "usage_example": "a ** b",
        "explanation": "べき乗 (Exponentiation) (AのB乗)"
      },
      {
        "page": "p112",
        "term": "代入演算子 (加算)",
        "category": "演算子 (Operator)",
        "usage_example": "x += 1",
        "explanation": "x = x+1と同じ。加算して代入します。"
      },
      {
        "page": "p113",
        "term": "文字列の連結 (String Concatenation)",
        "category": "演算子 (Operator)",
        "usage_example": "\"a\" + \"b\"",
        "explanation": "+で2つの文字列 (string) を連結します。"
      },
      {
        "page": "p114",
        "term": "文字列の繰り返し (String Repetition)",
        "category": "演算子 (Operator)",
        "usage_example": "\"a\"*3",
        "explanation": "*で文字列 (string) を繰り返します。"
      },
      {
        "page": "p118",
        "term": "文字列の取得 (インデックス)",
        "category": "書式 (Syntax)",
        "usage_example": "s[0],s[-1]",
        "explanation": "インデックス (index) で1文字を取得します。"
      },
      {
        "page": "p120",
        "term": "文字列のスライス (String Slicing)",
        "category": "書式 (Syntax)",
        "usage_example": "s[1:4]",
        "explanation": "スライス (slice) で部分文字列を取得します。"
      },
      {
        "page": "p125",
        "term": "文字列の検索 (startswith)",
        "category": "メソッド (Method)",
        "usage_example": "s.startswith(\"He\")",
        "explanation": "文字列が指定の接頭辞で始まるか判定します。"
      },
      {
        "page": "p125",
        "term": "文字列の検索 (endswith)",
        "category": "メソッド (Method)",
        "usage_example": "s.endswith(\"lo\")",
        "explanation": "文字列が指定の接尾辞で終わるか判定します。"
      },
      {
        "page": "p125",
        "term": "文字列の変換 (upper)",
        "category": "メソッド (Method)",
        "usage_example": "s.upper()",
        "explanation": "全ての文字を大文字に変換します。"
      },
      {
        "page": "p125",
        "term": "文字列の変換 (lower)",
        "category": "メソッド (Method)",
        "usage_example": "s.lower()",
        "explanation": "全ての文字を小文字に変換します。"
      },
      {
        "page": "p126",
        "term": "文字列の置換 (replace)",
        "category": "メソッド (Method)",
        "usage_example": "s.replace(\"a\",\"b\")",
        "explanation": "部分文字列を別の文字列に置換します。"
      },
      {
        "page": "p127",
        "term": "文字列の検索 (find)",
        "category": "メソッド (Method)",
        "usage_example": "s.find(\"b\")",
        "explanation": "部分文字列を検索し、最初のインデックス (index) を返します。見つからない場合は-1を返します。"
      },
      {
        "page": "p127",
        "term": "文字列の検索 (index)",
        "category": "メソッド (Method)",
        "usage_example": "s.index(\"b\")",
        "explanation": "機能はfindと同様ですが、見つからない場合はエラーになります。"
      },
      {
        "page": "p128",
        "term": "文字列の検索 (count)",
        "category": "メソッド (Method)",
        "usage_example": "s.count(\"a\")",
        "explanation": "部分文字列の出現回数を数えます。"
      },
      {
        "page": "p130",
        "term": "リストの作成 (List Creation)",
        "category": "書式 (Syntax)",
        "usage_example": "[1, 2, 3]または[]",
        "explanation": "リスト (list) を作成します。"
      },
      {
        "page": "p131",
        "term": "リストの作成 (list関数)",
        "category": "関数 (Function)",
        "usage_example": "list(\"abc\")",
        "explanation": "文字列 (string) などからリスト (list) を作成します。"
      },
      {
        "page": "p132",
        "term": "リストの取得 (インデックス)",
        "category": "書式 (Syntax)",
        "usage_example": "a[0],a[-1]",
        "explanation": "インデックス (index) で要素を取得します。"
      },
      {
        "page": "p132",
        "term": "リストのスライス (List Slicing)",
        "category": "書式 (Syntax)",
        "usage_example": "a[1:3]",
        "explanation": "スライス (slice) で部分リストを取得します。"
      },
      {
        "page": "p133",
        "term": "リストの変更 (インデックス代入)",
        "category": "書式 (Syntax)",
        "usage_example": "a[0] = 99",
        "explanation": "指定したインデックス (index) の値を上書きします。"
      },
      {
        "page": "p134",
        "term": "リストの変更 (スライス代入)",
        "category": "書式 (Syntax)",
        "usage_example": "a[1:3] = [8, 7]",
        "explanation": "スライス (slice) で範囲を指定して要素を置き換えます。"
      },
      {
        "page": "p136",
        "term": "リストのコピー (List Copy)",
        "category": "メソッド (Method)",
        "usage_example": "a.copy()",
        "explanation": "リスト (list) のコピーを作成します。"
      },
      {
        "page": "p138",
        "term": "リストの追加 (append)",
        "category": "メソッド (Method)",
        "usage_example": "a.append(4)",
        "explanation": "末尾に要素を1つ追加します。"
      },
      {
        "page": "p138",
        "term": "リストの追加 (extend)",
        "category": "メソッド (Method)",
        "usage_example": "a.extend([4, 5])",
        "explanation": "末尾に別のリストの全要素を追加します。"
      },
      {
        "page": "p139",
        "term": "リストの削除 (del)",
        "category": "書式 (Syntax)",
        "usage_example": "del a[0]",
        "explanation": "指定したインデックス (index) の要素を削除します。"
      },
      {
        "page": "p139",
        "term": "リストの削除 (pop)",
        "category": "メソッド (Method)",
        "usage_example": "a.pop(1)",
        "explanation": "指定したインデックス (index) の要素を削除し、その値を返します。"
      },
      {
        "page": "p140",
        "term": "リストの削除 (remove)",
        "category": "メソッド (Method)",
        "usage_example": "a.remove(3)",
        "explanation": "指定した値を持つ最初の要素を削除します。"
      },
      {
        "page": "p141",
        "term": "リストの追加 (insert)",
        "category": "メソッド (Method)",
        "usage_example": "a.insert(1,\"x\")",
        "explanation": "指定した位置に要素を挿入します。"
      },
      {
        "page": "p142",
        "term": "リストの削除 (clear)",
        "category": "メソッド (Method)",
        "usage_example": "a.clear()",
        "explanation": "全ての要素を削除し、空にします。"
      },
      {
        "page": "p144",
        "term": "リストの要素数 (len)",
        "category": "関数 (Function)",
        "usage_example": "len(a)",
        "explanation": "要素数を取得します。"
      },
      {
        "page": "p146",
        "term": "リストの検索 (count)",
        "category": "メソッド (Method)",
        "usage_example": "a.count(2)",
        "explanation": "指定した要素の個数を数えます。"
      },
      {
        "page": "p146",
        "term": "リストの検索 (index)",
        "category": "メソッド (Method)",
        "usage_example": "a.index(3)",
        "explanation": "指定した要素の最初のインデックス (index) を取得します。"
      },
      {
        "page": "p147",
        "term": "リストの並べ替え (sort)",
        "category": "メソッド (Method)",
        "usage_example": "a.sort()",
        "explanation": "元のリストを昇順に並べ替えます。"
      },
      {
        "page": "p147",
        "term": "リストの順序を逆にする (reverse)",
        "category": "メソッド (Method)",
        "usage_example": "a.reverse()",
        "explanation": "元のリストの順序を逆さにします。"
      },
      {
        "page": "p148",
        "term": "リストの並べ替え (sorted)",
        "category": "関数 (Function)",
        "usage_example": "sorted(a)",
        "explanation": "ソートされた新しいリストを返します。"
      },
      {
        "page": "p150",
        "term": "タプルの作成 (Tuple Creation)",
        "category": "書式 (Syntax)",
        "usage_example": "(1, 2, 3)または()",
        "explanation": "タプル (tuple) を作成します。"
      },
      {
        "page": "p150",
        "term": "要素が1つのタプルの作成",
        "category": "書式 (Syntax)",
        "usage_example": "(1,)",
        "explanation": "要素が1つのタプルを作成する場合は、末尾にカンマ(,)が必要です。"
      },
      {
        "page": "p152",
        "term": "タプルの作成 (tuple関数)",
        "category": "関数 (Function)",
        "usage_example": "tuple(\"abc\")",
        "explanation": "文字列 (string) などからタプル (tuple) を作成します。"
      },
      {
        "page": "p153",
        "term": "タプルの取得 (インデックス)",
        "category": "書式 (Syntax)",
        "usage_example": "t[0]",
        "explanation": "インデックス (index) で要素を取得します。"
      },
      {
        "page": "p153",
        "term": "タプルのスライス (Tuple Slicing)",
        "category": "書式 (Syntax)",
        "usage_example": "t[1:3]",
        "explanation": "スライス (slice) で部分タプルを取得します。"
      },
      {
        "page": "p155",
        "term": "タプルのアンパッキング (Tuple Unpacking)",
        "category": "書式 (Syntax)",
        "usage_example": "x, y = t",
        "explanation": "アンパッキング (Unpacking) を行い、タプルの要素を複数の変数 (variable) に代入します。"
      },
      {
        "page": "p157",
        "term": "タプルの要素数 (len)",
        "category": "関数 (Function)",
        "usage_example": "len(t)",
        "explanation": "要素数を取得します。"
      },
      {
        "page": "p157",
        "term": "タプルの検索 (count)",
        "category": "メソッド (Method)",
        "usage_example": "t.count(2)",
        "explanation": "指定した要素の個数を数えます。"
      },
      {
        "page": "p157",
        "term": "タプルの検索 (index)",
        "category": "メソッド (Method)",
        "usage_example": "t.index(3)",
        "explanation": "指定した要素の最初のインデックス (index) を取得します。"
      },
      {
        "page": "p162",
        "term": "集合の作成 (Set Creation)",
        "category": "書式 (Syntax)",
        "usage_example": "{1, 2, 3}",
        "explanation": "集合 (set) を作成します。"
      },
      {
        "page": "p162",
        "term": "空の集合の作成",
        "category": "関数 (Function)",
        "usage_example": "set()",
        "explanation": "空の集合 (set) を作成します。"
      },
      {
        "page": "p165",
        "term": "集合の要素確認 (in)",
        "category": "演算子 (Operator)",
        "usage_example": "2 in s",
        "explanation": "要素が含まれるか確認します。"
      },
      {
        "page": "p169",
        "term": "集合への要素追加 (add)",
        "category": "メソッド (Method)",
        "usage_example": "s.add(4)",
        "explanation": "要素を1つ追加します。"
      },
      {
        "page": "p170",
        "term": "集合からの要素削除 (remove)",
        "category": "メソッド (Method)",
        "usage_example": "s.remove(3)",
        "explanation": "要素を削除します。要素がない場合はエラーになります。"
      },
      {
        "page": "p170",
        "term": "集合からの要素削除 (discard)",
        "category": "メソッド (Method)",
        "usage_example": "s.discard(4)",
        "explanation": "要素を削除します。要素がなくても正常に終了します。"
      },
      {
        "page": "p172",
        "term": "集合からの要素削除 (pop)",
        "category": "メソッド (Method)",
        "usage_example": "s.pop()",
        "explanation": "任意の要素を削除し、その値を返します。"
      },
      {
        "page": "p172",
        "term": "集合の全要素削除 (clear)",
        "category": "メソッド (Method)",
        "usage_example": "s.clear()",
        "explanation": "全ての要素を削除します。"
      },
      {
        "page": "p173",
        "term": "集合演算 (和集合)",
        "category": "演算子 (Operator)",
        "usage_example": "s1 | s2",
        "explanation": "和集合 (Union): 2つの集合の全ての要素を持つ新しい集合を返します。"
      },
      {
        "page": "p173",
        "term": "集合演算 (積集合)",
        "category": "演算子 (Operator)",
        "usage_example": "s1 & s2",
        "explanation": "積集合 (Intersection): 2つの集合に共通する要素を持つ新しい集合を返します。"
      },
      {
        "page": "p173",
        "term": "集合演算 (差集合)",
        "category": "演算子 (Operator)",
        "usage_example": "s1 - s2",
        "explanation": "差集合 (Difference): s1にのみ含まれる要素を持つ新しい集合を返します。"
      },
      {
        "page": "p173",
        "term": "集合演算 (対称差)",
        "category": "演算子 (Operator)",
        "usage_example": "s1 ^ s2",
        "explanation": "対称差 (Symmetric Difference): どちらか一方にのみ含まれる要素を持つ新しい集合を返します。"
      },
      {
        "page": "p174",
        "term": "集合の要素数 (len)",
        "category": "関数 (Function)",
        "usage_example": "len(s)",
        "explanation": "要素数を取得します。"
      },
      {
        "page": "p183",
        "term": "辞書の作成 (Dictionary Creation)",
        "category": "書式 (Syntax)",
        "usage_example": "{'a': 1, 'b': 2}",
        "explanation": "辞書 (dictionary, dict) を作成します。"
      },
      {
        "page": "p183",
        "term": "空の辞書の作成",
        "category": "書式 (Syntax)",
        "usage_example": "{}",
        "explanation": "空の辞書 (dictionary, dict) を作成します。"
      },
      {
        "page": "p184",
        "term": "辞書の作成 (dict関数)",
        "category": "関数 (Function)",
        "usage_example": "dict(a=1, b=2)",
        "explanation": "キーワード引数 (keyword argument) で辞書 (dictionary, dict) を作成します。"
      },
      {
        "page": "p185",
        "term": "辞書の値の取得 (キー指定)",
        "category": "書式 (Syntax)",
        "usage_example": "d['a']",
        "explanation": "キー (key) を指定して値 (value) を取得します (キーがないとエラー)。"
      },
      {
        "page": "p186",
        "term": "辞書の値の取得 (get)",
        "category": "メソッド (Method)",
        "usage_example": "d.get('c', 0)",
        "explanation": "キー (key) を指定して値 (value) を取得します。キーがなければデフォルト値を返します。"
      },
      {
        "page": "p187",
        "term": "辞書の追加/更新",
        "category": "書式 (Syntax)",
        "usage_example": "d['c'] = 3",
        "explanation": "キー (key) と値 (value) のペアを追加または更新します。"
      },
      {
        "page": "p188",
        "term": "辞書の要素削除 (del)",
        "category": "書式 (Syntax)",
        "usage_example": "del d['a']",
        "explanation": "指定したキー (key) の要素を削除します。"
      },
      {
        "page": "p188",
        "term": "辞書の要素削除 (pop)",
        "category": "メソッド (Method)",
        "usage_example": "d.pop('b')",
        "explanation": "キー (key) を指定して要素を削除し、その値 (value) を返します。"
      },
      {
        "page": "p189",
        "term": "辞書の全要素削除 (clear)",
        "category": "メソッド (Method)",
        "usage_example": "d.clear()",
        "explanation": "全ての要素を削除します。"
      },
      {
        "page": "p190",
        "term": "辞書にキーが存在するか (in)",
        "category": "演算子 (Operator)",
        "usage_example": "'a' in d",
        "explanation": "キー (key) が存在するか確認します。"
      },
      {
        "page": "p190",
        "term": "辞書のキーと値のペア数 (len)",
        "category": "関数 (Function)",
        "usage_example": "len(d)",
        "explanation": "キー (key) と値 (value) のペアの数を取得します。"
      },
      {
        "page": "p191",
        "term": "辞書のキー一覧 (keys)",
        "category": "メソッド (Method)",
        "usage_example": "d.keys()",
        "explanation": "全てのキー (key) を一覧で取得します。"
      },
      {
        "page": "p191",
        "term": "辞書の値一覧 (values)",
        "category": "メソッド (Method)",
        "usage_example": "d.values()",
        "explanation": "全ての値 (value) を一覧で取得します。"
      },
      {
        "page": "p191",
        "term": "辞書の(キー,値)ペア一覧 (items)",
        "category": "メソッド (Method)",
        "usage_example": "d.items()",
        "explanation": "全ての(キー, 値)ペアを一覧で取得します。"
      },
      {
        "page": "p194",
        "term": "基本的なif文 (Basic if-statement)",
        "category": "書式 (Syntax)",
        "usage_example": "if x > 10:\\n    print(\"大きい\")",
        "explanation": "条件式 (conditional expression) が True の場合に、続くブロックを実行します。"
      },
      {
        "page": "p198",
        "term": "if-else文 (if-else statement)",
        "category": "書式 (Syntax)",
        "usage_example": "if x > 10:\\n    print(\"大きい\")\\nelse:\\n    print(\"大きくない\")",
        "explanation": "ifの条件がFalseの場合に、elseブロックを実行します。"
      },
      {
        "page": "p201",
        "term": "if-elif-else文 (if-elif-else statement)",
        "category": "書式 (Syntax)",
        "usage_example": "if score >= 80:\\n    print(\"A\")\\nelif score >= 60:\\n    print(\"B\")\\nelse:\\n    print(\"C\")",
        "explanation": "複数の条件を順に判定します。※elifはいくつでも追加できます。"
      },
      {
        "page": "p203",
        "term": "条件式 (三項演算子)",
        "category": "書式 (Syntax)",
        "usage_example": "result = \"OK\" if x > 10 else \"NG\"",
        "explanation": "if-elseを1行で記述する書き方で、単純な値の代入などによく使われます。"
      },
      {
        "page": "p207",
        "term": "基本的なfor文 (Basic for-loop)",
        "category": "書式 (Syntax)",
        "usage_example": "for item in [\"a\", \"b\", \"c\"]:\\n    print(item)",
        "explanation": "リスト (list) などの各要素を順番に取り出して、ブロック内の処理を繰り返します。"
      },
      {
        "page": "p209",
        "term": "数値でのループ (range)",
        "category": "関数 (Function)",
        "usage_example": "for i in range(5):\\n    print(i)",
        "explanation": "range()を使い、0から4まで(5回) の数値でループします。"
      },
      {
        "page": "p216",
        "term": "インデックス付きループ (enumerate)",
        "category": "関数 (Function)",
        "usage_example": "for i, item in enumerate(my_list):\\n    print(i, item)",
        "explanation": "enumerate()を使い、インデックス番号と要素を同時に取得してループします。"
      },
      {
        "page": "p219",
        "term": "ネスト(入れ子)ループ (Nested Loop)",
        "category": "書式 (Syntax)",
        "usage_example": "for x in list_a:\\n    for y in list_b:\\n        print(x, y)",
        "explanation": "ループの中にさらにループを記述することで、多次元的な処理ができます。"
      },
      {
        "page": "p224",
        "term": "逆順ループ (reversed)",
        "category": "関数 (Function)",
        "usage_example": "for item in reversed(my_list):\\n    print(item)",
        "explanation": "reversed()を使い、リストの要素を逆順でループします。"
      },
      {
        "page": "p226",
        "term": "基本的なwhile文 (Basic while-loop)",
        "category": "書式 (Syntax)",
        "usage_example": "count=0\\nwhile count < 5:\\n    print(count)\\n    count += 1",
        "explanation": "条件式 (conditional expression) が Trueの間、ブロック内の処理を繰り返します。※無限ループに注意してください。"
      },
      {
        "page": "p228",
        "term": "次の繰り返しへ (continue)",
        "category": "書式 (Syntax)",
        "usage_example": "continue",
        "explanation": "現在の回の処理を中断し、次の繰り返しに移ります。"
      },
      {
        "page": "p230",
        "term": "ループの脱出 (break)",
        "category": "書式 (Syntax)",
        "usage_example": "break",
        "explanation": "現在実行中のループを即座に中断し、ループの外に出ます。"
      },
      {
        "page": "p233",
        "term": "for-else文 (for-else statement)",
        "category": "書式 (Syntax)",
        "usage_example": "for item in my_list:\\nelse:\\n    print(\"ループ完了\")",
        "explanation": "ループがbreakされずに最後まで完了した場合に、elseブロックが実行されます。"
      },
      {
        "page": "p236",
        "term": "無限ループとbreak (Infinite Loop and break)",
        "category": "書式 (Syntax)",
        "usage_example": "while True:\\n    s = input()\\n    if s == \"exit\":\\n        break",
        "explanation": "while Trueで無限ループを作り、特定の条件でbreakしてループを脱出します。"
      },
      {
        "page": "p238",
        "term": "何もしない (pass)",
        "category": "書式 (Syntax)",
        "usage_example": "pass",
        "explanation": "構文上は何か記述が必要だが、実際には何もしない場合にプレースホルダーとして使います。"
      },
      {
        "page": "p240",
        "term": "戻り値なし関数 (Function with no return value)",
        "category": "構文 (Syntax)",
        "usage_example": "def say_hello():\\n    print(\"Hello\")",
        "explanation": "returnがない関数 (function) は、内部の処理を実行するだけで、戻り値 (return value) としてNoneを返します。"
      },
      {
        "page": "p243",
        "term": "基本的な関数定義 (Basic Function Definition)",
        "category": "構文 (Syntax)",
        "usage_example": "def add(a, b):\\n    return a + b",
        "explanation": "defを使って関数 (function) を定義し、仮引数 (parameter) を受け取り、returnで戻り値 (return value) を返します。"
      },
      {
        "page": "p246",
        "term": "位置引数 (Positional Argument)",
        "category": "構文 (Syntax)",
        "usage_example": "def func(name, age):\\nfunc(\"Taro\", 20)",
        "explanation": "呼び出す際に渡された値が、定義された順番通りに仮引数 (parameter) にセットされます。"
      },
      {
        "page": "p248",
        "term": "キーワード引数 (Keyword Argument)",
        "category": "構文 (Syntax)",
        "usage_example": "func(name=\"Taro\", age=20)",
        "explanation": "「引数名=値」の形で指定します。※順番を気にする必要はありません。"
      },
      {
        "page": "p252",
        "term": "デフォルト引数 (Default Argument)",
        "category": "構文 (Syntax)",
        "usage_example": "def func(name, age=20):",
        "explanation": "引数が渡されなかった場合に、自動で使われる値を設定できます。"
      },
      {
        "page": "p254",
        "term": "可変長位置引数 (Arbitrary Positional Arguments)",
        "category": "構文 (Syntax)",
        "usage_example": "def func(*args): ...",
        "explanation": "*を付けると、複数の位置引数 (positional argument) をタプル (tuple) としてまとめて受け取れます。"
      },
      {
        "page": "p258",
        "term": "位置専用引数 (Positional-Only Arguments)",
        "category": "構文 (Syntax)",
        "usage_example": "def func(a, b, /): ...",
        "explanation": "/より前にある引数は、位置引数としてのみ渡せます。※キーワード引数不可"
      },
      {
        "page": "p259",
        "term": "キーワード専用引数 (Keyword-Only Arguments)",
        "category": "構文 (Syntax)",
        "usage_example": "def func(*, a, b): ...",
        "explanation": "*より後にある引数は、キーワード引数としてのみ渡せます。※位置引数不可"
      },
      {
        "page": "p268",
        "term": "グローバル変数の変更 (global)",
        "category": "スコープ (Scope)",
        "usage_example": "x = 100\\ndef func():\\n    global x\\n    x = 99",
        "explanation": "関数内でグローバル変数 (global variable) に代入したい場合は、global宣言が必要です。"
      },
      {
        "page": "p271",
        "term": "ローカル変数の変更 (nonlocal)",
        "category": "スコープ (Scope)",
        "usage_example": "def outer():\\n    x = \"outer\"\\n    def inner():\\n        nonlocal x\\n        x = \"inner\"",
        "explanation": "ネストした関数で、外側の関数のローカル変数 (local variable) に代入したい場合は、nonlocal宣言が必要です。"
      },
      {
        "page": "p276",
        "term": "インスタンスの作成 (Instance Creation)",
        "category": "構文 (Syntax)",
        "usage_example": "my_instance = MyClass()",
        "explanation": "クラス名を関数のように呼び出すことで、インスタンス (instance) を作成します。"
      },
      {
        "page": "p280",
        "term": "クラスの定義 (Class Definition)",
        "category": "構文 (Syntax)",
        "usage_example": "class MyClass:\\n    pass",
        "explanation": "classキーワードでクラス (class) を定義します。passで空のクラスも作れます。"
      },
      {
        "page": "p284",
        "term": "初期化メソッド (__init__)",
        "category": "メソッド (Method)",
        "usage_example": "def __init__(self, name):\\n    self.name = name",
        "explanation": "__init__は特殊なメソッドで、インスタンス作成時に自動で呼ばれます。属性 (attribute) の初期化などに使います。selfはインスタンス自身を指します。"
      },
      {
        "page": "p285",
        "term": "インスタンス属性 (Instance Attribute)",
        "category": "属性 (Attribute)",
        "usage_example": "my_instance.name",
        "explanation": "インスタンス (instance) ごとに固有のデータです。self.属性名で定義し、インスタンス.属性名でアクセスします。"
      },
      {
        "page": "p287",
        "term": "インスタンスメソッド (Instance Method)",
        "category": "メソッド (Method)",
        "usage_example": "def greet(self):\\n    print(f\"Hello, {self.name}\")",
        "explanation": "インスタンスが持つ処理で、第一引数には必ずselfを取ります。"
      },
      {
        "page": "p287",
        "term": "メソッドの呼び出し (Method Call)",
        "category": "構文 (Syntax)",
        "usage_example": "my_instance.greet()",
        "explanation": "インスタンス.メソッド名()で呼び出します。selfは自動的に渡されます。"
      },
      {
        "page": "p293",
        "term": "クラス属性 (Class Attribute)",
        "category": "属性 (Attribute)",
        "usage_example": "class MyClass:\\n    count = 0",
        "explanation": "クラス自身が持つ属性で、そのクラスの全てのインスタンスで共有されます。"
      },
      {
        "page": "p298",
        "term": "継承の定義 (Inheritance Definition)",
        "category": "構文 (Syntax)",
        "usage_example": "class ChildClass(ParentClass):\\n    pass",
        "explanation": "クラス名(親クラス名)と記述することで、親クラスの属性やメソッドを引き継いだ子クラスを定義できます。"
      },
      {
        "page": "p299",
        "term": "メソッドのオーバーライド (Method Overriding)",
        "category": "構文 (Syntax)",
        "usage_example": "def greet(self):\\n    print(\"Hi!\")",
        "explanation": "親クラスと同じ名前のメソッドを子クラスで再定義することです。子クラスのメソッドが優先して呼ばれます。"
      },
      {
        "page": "p302",
        "term": "親クラスメソッドの呼び出し (super)",
        "category": "関数 (Function)",
        "usage_example": "super().greet()",
        "explanation": "super()を使うと、子クラスの中から親クラスのメソッドを呼び出すことができます。"
      },
      {
        "page": "p308",
        "term": "MRO (メソッド解決順序)",
        "category": "属性 (Attribute)",
        "usage_example": "ChildClass.mro()",
        "explanation": "メソッド解決順序 (Method Resolution Order) の略。あるクラスがどのクラスからメソッドを探しに行くかの順序リストを確認できます。多重継承などで役立ちます。"
      },
      {
        "page": "p319",
        "term": "例外の捕捉 (try-except)",
        "category": "構文 (Syntax)",
        "usage_example": "try:\\n    #エラーが起きる可能性のある処理\\nexcept ValueError:\\n    #ValueErrorが発生した場合の処理",
        "explanation": "tryブロック内の処理でエラーが発生すると、対応するexceptブロックに処理が移ります。"
      },
      {
        "page": "p320",
        "term": "複数の例外を捕捉 (except tuple)",
        "category": "構文 (Syntax)",
        "usage_example": "except(ValueError, TypeError):\\n    #ValueErrorまたはTypeErrorの場合の処理",
        "explanation": "複数の例外 (exception) をタプルで指定し、まとめて捕捉できます。"
      },
      {
        "page": "p326",
        "term": "例外オブジェクトの取得 (as)",
        "category": "構文 (Syntax)",
        "usage_example": "except ValueError as e:\\n    print(f\"エラー情報:{e}\")",
        "explanation": "asを使うと、発生した例外オブジェクト (exception object) 自身を変数に格納して利用できます。"
      },
      {
        "page": "p328",
        "term": "後片付け処理 (finally)",
        "category": "構文 (Syntax)",
        "usage_example": "finally:\\n    #例外の有無に関わらず必ず実行する処理",
        "explanation": "finallyブロックは、例外が発生してもしなくても、必ず最後に実行されます。ファイルのクローズ処理などによく使われます。"
      },
      {
        "page": "p331",
        "term": "正常終了時の処理 (elseブロック)",
        "category": "構文 (Syntax)",
        "usage_example": "else:\\n    #例外が発生しなかった場合の処理",
        "explanation": "tryブロックで例外が発生しなかった場合にのみ、elseブロックが実行されます。"
      },
      {
        "page": "p333",
        "term": "例外の発生 (raise)",
        "category": "構文 (Syntax)",
        "usage_example": "raise ValueError(\"値が不正です\")",
        "explanation": "raiseを使うと、意図的に例外 (exception) を発生させることができます。"
      },
      {
        "page": "p338",
        "term": "リスト内包表記 (List Comprehension)",
        "category": "構文 (Syntax)",
        "usage_example": "[i* 2 for i in range(5)]",
        "explanation": "ループ処理を使って新しいリストを1行で作成します。結果は [0, 2, 4, 6, 8] です。"
      },
      {
        "page": "p339",
        "term": "集合内包表記 (Set Comprehension)",
        "category": "構文 (Syntax)",
        "usage_example": "{i % 3 for i in range(10)}",
        "explanation": "ループ処理で新しい集合を作成します。重複は自動的に除去されます。結果は {0, 1, 2} です。"
      },
      {
        "page": "p340",
        "term": "辞書内包表記 (Dictionary Comprehension)",
        "category": "構文 (Syntax)",
        "usage_example": "{x:x**2 for x in (2, 4, 6)}",
        "explanation": "ループ処理で新しい辞書を作成します。結果は {2: 4, 4: 16, 6: 36} です。"
      },
      {
        "page": "p342",
        "term": "条件付き内包表記 (Conditional Comprehension)",
        "category": "構文 (Syntax)",
        "usage_example": "[i for i in range(10) if i % 2 == 0]",
        "explanation": "if条件を追加し、条件を満たす要素だけで内包表記を実行できます。"
      },
      {
        "page": "p347",
        "term": "ジェネレータ式 (Generator Expression)",
        "category": "構文 (Syntax)",
        "usage_example": "(i* 2 for i in range(5))",
        "explanation": "内包表記と似ていますが、()で囲みます。一度に全要素をメモリに確保せず、必要になるたびに値を一つずつ生成するジェネレータを作成します。メモリ効率が非常に良いです。"
      },
      {
        "page": "p350",
        "term": "ジェネレータ関数 (Generator Function)",
        "category": "構文 (Syntax)",
        "usage_example": "def count_up(n):\\n    for i in range(n):\\n        yield i",
        "explanation": "関数内でreturnの代わりにyieldを使うと、その関数はジェネレータ関数になります。呼び出すたびにyieldの位置で処理が一時停止し、値を返します。"
      },
      {
        "page": "p354",
        "term": "ラムダ式(無名関数)",
        "category": "構文 (Syntax)",
        "usage_example": "lambda x,y: x + y",
        "explanation": "lambdaを使うと、名前のない簡単な関数を1行で定義できます。関数を引数として渡す場面で便利です。"
      },
      {
        "page": "p357",
        "term": "高度なソート (key引数)",
        "category": "メソッド (Method)",
        "usage_example": "sorted(data, key=lambda x: x[1])",
        "explanation": "key引数に関数を指定することで、ソートの基準を自由にカスタマイズできます。この例では、各要素のインデックス1の値でソートしています。"
      },
      {
        "page": "p361",
        "term": "代入式 (セイウチ演算子)",
        "category": "演算子 (Operator)",
        "usage_example": "if (n := len(my_list)) > 10:\\n    print (f\"長すぎます: {n}\")",
        "explanation": ":=を使うと、if文などの式の中で値を変数に代入でき、コードが少し短くなります。"
      },
      {
        "page": "p365",
        "term": "アサーション (assert)",
        "category": "構文 (Syntax)",
        "usage_example": "assert x > 0, \"xは正の数であるべき\"",
        "explanation": "assertは「この条件は必ずTrueでなければならない」という宣言です。条件がFalseの場合、AssertionErrorを発生させます。主にデバッグ目的で使用します。"
      },
      {
        "page": "p370",
        "term": "print関数 (sep/end)",
        "category": "関数 (Function)",
        "usage_example": "print(\"Hello\", \"World\", sep=\", \")",
        "explanation": "オブジェクトを画面に出力します。sepで区切り文字、endで終端文字を指定できます。"
      },
      {
        "page": "p370",
        "term": "input関数 (input function)",
        "category": "関数 (Function)",
        "usage_example": "name = input(\"名前を入力:\")",
        "explanation": "ユーザーからのキーボード入力を文字列として受け取ります。"
      },
      {
        "page": "p371",
        "term": "format関数 (format function)",
        "category": "関数 (Function)",
        "usage_example": "format(0.5, \".0%\")",
        "explanation": "値を指定した書式設定の文字列に変換します (例:\"50%\")。"
      },
      {
        "page": "p378",
        "term": "int関数 (int function)",
        "category": "関数 (Function)",
        "usage_example": "int(\"123\")",
        "explanation": "文字列や浮動小数点数を整数に変換します。"
      },
      {
        "page": "p378",
        "term": "float関数 (float function)",
        "category": "関数 (Function)",
        "usage_example": "float(\"3.14\")",
        "explanation": "文字列や整数を浮動小数点数に変換します。"
      },
      {
        "page": "p378",
        "term": "str関数 (str function)",
        "category": "関数 (Function)",
        "usage_example": "str(123)",
        "explanation": "様々なオブジェクトを読みやすい文字列に変換します。"
      },
      {
        "page": "p378",
        "term": "bool関数 (bool function)",
        "category": "関数 (Function)",
        "usage_example": "bool(0), bool(\"abc\")",
        "explanation": "様々なオブジェクトを真偽値 (True/False) に変換します。"
      },
      {
        "page": "p378",
        "term": "list関数 (list function)",
        "category": "関数 (Function)",
        "usage_example": "list(\"abc\")",
        "explanation": "タプルや文字列などをリストに変換します。"
      },
      {
        "page": "p378",
        "term": "tuple関数 (tuple function)",
        "category": "関数 (Function)",
        "usage_example": "tuple([1, 2])",
        "explanation": "リストや文字列などをタプルに変換します。"
      },
      {
        "page": "p378",
        "term": "set関数 (set function)",
        "category": "関数 (Function)",
        "usage_example": "set([1, 2, 1])",
        "explanation": "リストなどを集合に変換します (重複は除去されます)。"
      },
      {
        "page": "p378",
        "term": "dict関数 (dict function)",
        "category": "関数 (Function)",
        "usage_example": "dict(a=1, b=2)",
        "explanation": "キーワード引数などから辞書を作成します。"
      },
      {
        "page": "p385",
        "term": "abs関数 (abs function)",
        "category": "関数 (Function)",
        "usage_example": "abs(-10)",
        "explanation": "数値の絶対値を返します。"
      },
      {
        "page": "p385",
        "term": "divmod関数 (divmod function)",
        "category": "関数 (Function)",
        "usage_example": "divmod(10, 3)",
        "explanation": "割り算の商と余りをタプル(3, 1)で返します。"
      },
      {
        "page": "p386",
        "term": "pow関数 (pow function)",
        "category": "関数 (Function)",
        "usage_example": "pow(2, 3)",
        "explanation": "べき乗(2の3乗)を計算します。2**3と同じです。"
      },
      {
        "page": "p387",
        "term": "round関数 (round function)",
        "category": "関数 (Function)",
        "usage_example": "round(3.1415, 2)",
        "explanation": "数値を指定した桁数に丸めます。"
      },
      {
        "page": "p388",
        "term": "min関数 (min function)",
        "category": "関数 (Function)",
        "usage_example": "min(1, 5, -2)",
        "explanation": "複数の引数、またはリストなどの要素の最小値を返します。"
      },
      {
        "page": "p388",
        "term": "max関数 (max function)",
        "category": "関数 (Function)",
        "usage_example": "max(1, 5, -2)",
        "explanation": "複数の引数、またはリストなどの要素の最大値を返します。"
      },
      {
        "page": "p389",
        "term": "sum関数 (sum function)",
        "category": "関数 (Function)",
        "usage_example": "sum([1, 2, 3])",
        "explanation": "リストなどの要素の合計値を計算します。"
      },
      {
        "page": "p390",
        "term": "len関数 (len function)",
        "category": "関数 (Function)",
        "usage_example": "len(\"hello\")",
        "explanation": "オブジェクトの要素数や長さを返します。"
      },
      {
        "page": "p391",
        "term": "reversed関数 (reversed function)",
        "category": "関数 (Function)",
        "usage_example": "reversed([1, 2, 3])",
        "explanation": "イテラブルの要素を逆順にしたイテレータを返します。"
      },
      {
        "page": "p391",
        "term": "enumerate関数 (enumerate function)",
        "category": "関数 (Function)",
        "usage_example": "enumerate(['a', 'b'])",
        "explanation": "インデックスと要素のペアを返すイテレータを生成します。"
      },
      {
        "page": "p391",
        "term": "zip関数 (zip function)",
        "category": "関数 (Function)",
        "usage_example": "zip(list1, list2)",
        "explanation": "複数のイテラブルから要素を同時に一つずつ取り出し、タプルにまとめます。"
      },
      {
        "page": "p392",
        "term": "map関数 (map function)",
        "category": "関数 (Function)",
        "usage_example": "map(int, [\"1\", \"2\"])",
        "explanation": "イテラブルの各要素に指定した関数を適用した結果を返します。"
      },
      {
        "page": "p393",
        "term": "filter関数 (filter function)",
        "category": "関数 (Function)",
        "usage_example": "filter(lambda x: x > 0, [-1, 2, -3])",
        "explanation": "イテラブルの各要素のうち、関数がTrueを返すものだけを抽出します。"
      },
      {
        "page": "p394",
        "term": "all関数 (all function)",
        "category": "関数 (Function)",
        "usage_example": "all([True, True, False])",
        "explanation": "イテラブルの全ての要素がTrueならTrueを返します。"
      },
      {
        "page": "p394",
        "term": "any関数 (any function)",
        "category": "関数 (Function)",
        "usage_example": "any([False, False, True])",
        "explanation": "イテラブルに一つでもTrueの要素があればTrueを返します。"
      },
      {
        "page": "p400",
        "term": "repr関数 (repr function)",
        "category": "関数 (Function)",
        "usage_example": "repr(my_object)",
        "explanation": "オブジェクトをプログラムが解釈できる形式の文字列で表現します (デバッグ用)。"
      },
      {
        "page": "p402",
        "term": "id関数 (id function)",
        "category": "関数 (Function)",
        "usage_example": "id(my_object)",
        "explanation": "オブジェクトのユニークな識別IDを返します。"
      },
      {
        "page": "p403",
        "term": "type関数 (type function)",
        "category": "関数 (Function)",
        "usage_example": "type(123)",
        "explanation": "オブジェクトの型 (type) を返します (例: <class 'int'>)。"
      },
      {
        "page": "p403",
        "term": "isinstance関数 (isinstance function)",
        "category": "関数 (Function)",
        "usage_example": "isinstance(\"a\", str)",
        "explanation": "オブジェクトが指定したクラスのインスタンスであるか判定します。"
      },
      {
        "page": "p405",
        "term": "issubclass関数 (issubclass function)",
        "category": "関数 (Function)",
        "usage_example": "issubclass(Dog, Animal)",
        "explanation": "あるクラスが、別のクラスのサブクラスであるか判定します。"
      },
      {
        "page": "p411",
        "term": "callable関数 (callable function)",
        "category": "関数 (Function)",
        "usage_example": "callable(my_function)",
        "explanation": "オブジェクトが関数のように呼び出し可能であるか判定します。"
      },
      {
        "page": "p417",
        "term": "基本的なモジュールインポート (Basic Module Import)",
        "category": "構文 (Syntax)",
        "usage_example": "import math",
        "explanation": "mathモジュールをインポートします。"
      },
      {
        "page": "p417",
        "term": "モジュールの機能利用 (Using Module Functions)",
        "category": "構文 (Syntax)",
        "usage_example": "math.sqrt(4)",
        "explanation": "モジュール名.機能名の形で、インポートしたモジュールの機能を使います。"
      },
      {
        "page": "p418",
        "term": "モジュールに別名を付ける (as)",
        "category": "構文 (Syntax)",
        "usage_example": "import numpy as np",
        "explanation": "asを使うと、インポートしたモジュールに別名を付けることができます。"
      },
      {
        "page": "p418",
        "term": "機能の直接利用 (from)",
        "category": "構文 (Syntax)",
        "usage_example": "randint(1, 6)",
        "explanation": "fromでインポートした場合、モジュール名を付けずに直接利用できます。"
      },
      {
        "page": "p419",
        "term": "特定の機能のみインポート (from)",
        "category": "構文 (Syntax)",
        "usage_example": "from random import randint, choice",
        "explanation": "モジュールから特定の関数やクラスだけを直接インポートできます。"
      },
      {
        "page": "p419",
        "term": "全てをインポート (from *)",
        "category": "構文 (Syntax)",
        "usage_example": "from math import *",
        "explanation": "*を使うと、モジュールの全ての機能を直接インポートできますが、名前の衝突の心配があります。"
      },
      {
        "page": "p420",
        "term": "パッケージからのインポート (Importing from Package)",
        "category": "構文 (Syntax)",
        "usage_example": "from urllib import request",
        "explanation": "パッケージ内の特定のモジュールをインポートします。"
      },
      {
        "page": "p421",
        "term": "ランダムな整数生成 (randint)",
        "category": "random",
        "usage_example": "random.randint(1, 6)",
        "explanation": "指定した範囲のランダムな整数を生成します。"
      },
      {
        "page": "p421",
        "term": "ランダムな浮動小数点数生成 (random)",
        "category": "random",
        "usage_example": "random.random()",
        "explanation": "0.0以上1.0未満のランダムな浮動小数点数を生成します。"
      },
      {
        "page": "p421",
        "term": "リスト要素のランダム選択 (choice)",
        "category": "random",
        "usage_example": "random.choice(['a', 'b', 'c'])",
        "explanation": "リストなどのシーケンスから要素を1つランダムに選びます。"
      },
      {
        "page": "p422",
        "term": "シーケンスのシャッフル (shuffle)",
        "category": "random",
        "usage_example": "random.shuffle(my_list)",
        "explanation": "リストの要素の順序をランダムに並べ替えます。"
      },
      {
        "page": "p423",
        "term": "現在時刻の取得 (time.time)",
        "category": "time",
        "usage_example": "time.time()",
        "explanation": "1970年1月1日からの経過秒数を浮動小数点数で取得します。"
      },
      {
        "page": "p424",
        "term": "プログラムの停止 (time.sleep)",
        "category": "time",
        "usage_example": "time.sleep(3)",
        "explanation": "指定した秒数だけ、プログラムの実行を一時停止します。"
      },
      {
        "page": "p425",
        "term": "パッケージのインストール (pip install)",
        "category": "コマンド (Command)",
        "usage_example": "pip install requests",
        "explanation": "requests という名前のパッケージをインターネットからダウンロードしてインストールします。"
      },
      {
        "page": "p426",
        "term": "パッケージのアンインストール (pip uninstall)",
        "category": "コマンド (Command)",
        "usage_example": "pip uninstall requests",
        "explanation": "インストール済みのパッケージを削除します。"
      },
      {
        "page": "p426",
        "term": "インストール済みパッケージ一覧 (pip list)",
        "category": "コマンド (Command)",
        "usage_example": "pip list",
        "explanation": "現在の環境にインストールされている全てのパッケージを一覧表示します。"
      },
      {
        "page": "p426",
        "term": "パッケージ情報の確認 (pip show)",
        "category": "コマンド (Command)",
        "usage_example": "pip show requests",
        "explanation": "指定したパッケージのバージョンや依存関係などの詳細情報を表示します。"
      },
      {
        "page": "p426",
        "term": "パッケージの更新 (pip install --upgrade)",
        "category": "コマンド (Command)",
        "usage_example": "pip install --upgrade requests",
        "explanation": "インストール済みのパッケージを最新バージョンに更新します。"
      },
      {
        "page": "p426",
        "term": "pip自体の更新 (python -m pip install --upgrade pip)",
        "category": "コマンド (Command)",
        "usage_example": "python -m pip install --upgrade pip",
        "explanation": "pipコマンド自身を最新バージョンに更新します。"
      },
      {
        "page": "p431",
        "term": "ファイルの書き込み (open, write)",
        "category": "構文 (Syntax)",
        "usage_example": "with open(\"a.txt\", \"w\", encoding=\"utf-8\") as f:\\n    f.write(\"Hello\")",
        "explanation": "ファイルの書き込みを行います。※ファイルがなければ新規作成、あれば上書きされます。"
      },
      {
        "page": "p431",
        "term": "文字コード指定 (encoding)",
        "category": "引数 (Argument)",
        "usage_example": "encoding=\"shift_jis\"",
        "explanation": "encoding引数で、ファイルの文字コードを指定します。"
      },
      {
        "page": "p432",
        "term": "ファイルの読み込み (read)",
        "category": "構文 (Syntax)",
        "usage_example": "with open(\"a.txt\", \"r\", encoding=\"utf-8\") as f:\\n    content = f.read()",
        "explanation": "ファイルの読み込みを行います。read() でファイルの内容全てを読み込みます。"
      },
      {
        "page": "p433",
        "term": "ファイルの読み込み (1行ずつ)",
        "category": "構文 (Syntax)",
        "usage_example": "with open(\"a.txt\", \"r\", encoding=\"utf-8\") as f:\\n    for line in f:\\n        print(line, end=\"\")",
        "explanation": "ファイルオブジェクトを直接forループで回すと、1行ずつ文字列として読み込めます。メモリ効率が良いです。"
      },
      {
        "page": "p435",
        "term": "ファイルの追記 (append mode)",
        "category": "構文 (Syntax)",
        "usage_example": "with open(\"a.txt\", \"a\", encoding=\"utf-8\") as f:\\n    f.write(\"\\nNew line\")",
        "explanation": "ファイルへの追記を行います。ファイルがある場合は、末尾に内容を追記します。"
      },
      {
        "page": "p435",
        "term": "CSVファイルの書き込み",
        "category": "ライブラリ (Library)",
        "usage_example": "import csv\\nwith open(\"data.csv\", \"w\", newline=\"\") as f:\\n    writer = csv.writer(f)\\n    writer.writerow([\"a\", \"b\", \"c\"])",
        "explanation": "csv.writerオブジェクトを作成し、writerow()で1行書き込みます。"
      },
      {
        "page": "p436",
        "term": "CSVファイルの読み込み",
        "category": "ライブラリ (Library)",
        "usage_example": "import csv\\nwith open(\"data.csv\", \"r\") as f:\\n    reader = csv.reader(f)\\n    for row in reader:\\n        print(row)",
        "explanation": "csv.readerオブジェクトを作成し、forループで回すと1行ずつを要素とするリストとして読み込めます。"
      },
      {
        "page": "p438",
        "term": "JSONファイルの書き込み",
        "category": "ライブラリ (Library)",
        "usage_example": "import json\\ndata = {\"key\": \"value\"}\\nwith open(\"data.json\", \"w\") as f:\\n    json.dump(data, f, indent=4)",
        "explanation": "json.dump()でJSON形式のファイルに書き込みます。indentの設定をすると見やすく整形されます。"
      },
      {
        "page": "p439",
        "term": "JSONファイルの読み込み",
        "category": "ライブラリ (Library)",
        "usage_example": "import json\\nwith open(\"data.json\", \"r\") as f:\\n    data = json.load(f)",
        "explanation": "json.load() でJSONファイルを読み込み、データ構造に変換します。"
      },
      {
        "page": "p441",
        "term": "画像操作 (Pillow/PIL)",
        "category": "Pillow(PIL)",
        "usage_example": "from PIL import Image\\nimg = Image.open(\"a.png\")",
        "explanation": "Pillowライブラリは画像ファイルを開いたり、サイズを取得、保存が可能です。"
      },
      {
        "page": "p446",
        "term": "ファイル・ディレクトリ一覧 (glob)",
        "category": "glob",
        "usage_example": "glob.glob(\"*.txt\")",
        "explanation": "ワイルドカードを使い、条件に一致するファイル一覧をリストで取得します。"
      },
      {
        "page": "p448",
        "term": "ファイルのコピー (shutil.copy)",
        "category": "shutil, os",
        "usage_example": "shutil.copy(\"a.txt\", \"b.txt\")",
        "explanation": "ファイルをコピーします。"
      },
      {
        "page": "p448",
        "term": "ファイル・フォルダの移動 (shutil.move)",
        "category": "OS",
        "usage_example": "shutil.move(\"a.txt\", \"dir/a.txt\")",
        "explanation": "ファイルやフォルダを移動します。"
      },
      {
        "page": "p449",
        "term": "ファイル・フォルダの名前変更 (os.rename)",
        "category": "OS",
        "usage_example": "os.rename(\"a.txt\", \"new.txt\")",
        "explanation": "ファイルやフォルダの名前を変更します。"
      },
      {
        "page": "p449",
        "term": "フォルダ作成 (os.mkdir)",
        "category": "OS",
        "usage_example": "os.mkdir(\"new_dir\")",
        "explanation": "フォルダを1つ作成します。"
      },
      {
        "page": "p449",
        "term": "複数階層フォルダ作成 (os.makedirs)",
        "category": "OS",
        "usage_example": "os.makedirs(\"a/b/c\")",
        "explanation": "複数の階層のフォルダを再帰的に作成します。"
      },
      {
        "page": "p449",
        "term": "ファイルの削除 (os.remove)",
        "category": "OS",
        "usage_example": "os.remove(\"old.txt\")",
        "explanation": "ファイルを削除します。"
      },
      {
        "page": "p449",
        "term": "空フォルダの削除 (os.rmdir)",
        "category": "OS",
        "usage_example": "os.rmdir(\"empty_dir\")",
        "explanation": "空のフォルダを削除します。"
      },
      {
        "page": "p451",
        "term": "コマンドライン引数の取得 (sys.argv)",
        "category": "ライブラリ (Library)",
        "usage_example": "args = sys.argv",
        "explanation": "コマンドラインで渡された引数がリストとしてsys.argvに格納されます。"
      },
      {
        "page": "p454",
        "term": "openpyxlのインストール",
        "category": "コマンド (Command)",
        "usage_example": "pip install openpyxl",
        "explanation": "openpyxlライブラリをインストールします。"
      },
      {
        "page": "p455",
        "term": "新規Excelブック作成 (openpyxl.Workbook)",
        "category": "ライブラリ (Library)",
        "usage_example": "wb = openpyxl.Workbook()",
        "explanation": "新しいExcel ワークブックを作成します。"
      },
      {
        "page": "p455",
        "term": "Excelファイルの保存 (wb.save)",
        "category": "ライブラリ (Library)",
        "usage_example": "wb.save(\"sample.xlsx\")",
        "explanation": "作成・編集したブックをファイルとして保存します。"
      },
      {
        "page": "p456",
        "term": "アクティブシートの選択 (wb.active)",
        "category": "ライブラリ (Library)",
        "usage_example": "ws = wb.active",
        "explanation": "現在アクティブなワークシートを選択します。"
      },
      {
        "page": "p456",
        "term": "セルへの書き込み (ws[\"A1\"] = ...)",
        "category": "ライブラリ (Library)",
        "usage_example": "ws[\"A1\"] = \"Hello\"",
        "explanation": "セル番地を指定して、値を書き込みます。"
      },
      {
        "page": "p457",
        "term": "既存Excelブックを開く (openpyxl.load_workbook)",
        "category": "ライブラリ (Library)",
        "usage_example": "wb = openpyxl.load_workbook(\"sample.xlsx\")",
        "explanation": "既存のExcelファイルを読み込みます。"
      },
      {
        "page": "p459",
        "term": "セルの値の取得 (ws[\"A1\"].value)",
        "category": "ライブラリ (Library)",
        "usage_example": "value = ws[\"A1\"].value",
        "explanation": "セル番地を指定し、.valueでセルの値を取得します。"
      },
      {
        "page": "p464",
        "term": "psutilのインストール",
        "category": "コマンド (Command)",
        "usage_example": "pip install psutil",
        "explanation": "psutilライブラリをインストールします。"
      },
      {
        "page": "p464",
        "term": "CPU使用率の取得 (psutil.cpu_percent)",
        "category": "ライブラリ (Library)",
        "usage_example": "psutil.cpu_percent(interval=1)",
        "explanation": "CPUの使用率 (%) を取得します。"
      },
      {
        "page": "p465",
        "term": "メモリ使用率の取得 (psutil.virtual_memory().percent)",
        "category": "ライブラリ (Library)",
        "usage_example": "psutil.virtual_memory().percent",
        "explanation": "メモリ (RAM) の使用率 (%) を取得します。"
      },
      {
        "page": "p465",
        "term": "メモリの総容量の取得 (psutil.virtual_memory().total)",
        "category": "ライブラリ (Library)",
        "usage_example": "psutil.virtual_memory().total",
        "explanation": "メモリの総容量をバイト単位で取得します。"
      },
      {
        "page": "p465",
        "term": "ディスク使用率の取得 (psutil.disk_usage)",
        "category": "ライブラリ (Library)",
        "usage_example": "psutil.disk_usage(\"/\").percent",
        "explanation": "指定したパスのディスク使用率 (%) を取得します。"
      },
      {
        "page": "p467",
        "term": "メール本文の作成 (MIMEText)",
        "category": "ライブラリ (Library)",
        "usage_example": "from email.mime.text import MIMEText\\nmsg = MIMEText(\"メールの本文です\")",
        "explanation": "メール本文を作成するためのクラスをインポートし、メール本文内容を持つオブジェクトを作成します。"
      },
      {
        "page": "p467",
        "term": "メールヘッダーの設定 (msg[\"Subject\"] = ...)",
        "category": "ライブラリ (Library)",
        "usage_example": "msg[\"Subject\"] = \"件名\"\\nmsg[\"From\"] = \"from@example.com\"\\nmsg[\"To\"] = \"to@example.com\"",
        "explanation": "作成したオブジェクトに、辞書のようにキーを指定して件名や送信元・送信先を設定します。"
      },
      {
        "page": "p467",
        "term": "メール送信実行 (server.send_message)",
        "category": "ライブラリ (Library)",
        "usage_example": "server.send_message(msg)",
        "explanation": "作成したメールオブジェクトを送信します。(sendmailより推奨される方法)"
      },
      {
        "page": "p468",
        "term": "SMTPサーバー接続 (smtplib.SMTP)",
        "category": "ライブラリ (Library)",
        "usage_example": "import smtplib\\nwith smtplib.SMTP(\"smtp.gmail.com\", 587) as server:",
        "explanation": "smtplib.SMTPでメール送信サーバーに接続します。サーバーアドレスとポート番号を指定します。"
      },
      {
        "page": "p468",
        "term": "暗号化通信開始 (server.starttls)",
        "category": "ライブラリ (Library)",
        "usage_example": "server.starttls()",
        "explanation": "接続を暗号化 (TLS) します。現代のメールサーバーでは必須です。"
      },
      {
        "page": "p468",
        "term": "サーバーへのログイン (server.login)",
        "category": "ライブラリ (Library)",
        "usage_example": "server.login(\"user\", \"password\")",
        "explanation": "メールサーバーのユーザー名とパスワードでログインします。"
      },
      {
        "page": "p474",
        "term": "Numpyのインストール (pip install numpy)",
        "category": "コマンド (Command)",
        "usage_example": "pip install numpy",
        "explanation": "Numpyをインストールします。"
      },
      {
        "page": "p474",
        "term": "Numpyのインポート (import numpy as np)",
        "category": "構文 (Syntax)",
        "usage_example": "import numpy as np",
        "explanation": "別名(np)でインポートします。"
      },
      {
        "page": "p474",
        "term": "Numpy (多次元配列/ndarray)",
        "category": "数値計算・配列操作",
        "usage_example": "多次元配列(ndarray)",
        "explanation": "高性能な数値計算、多次元配列を扱うためのライブラリです。"
      },
      {
        "page": "p476",
        "term": "Numpyでファイルの読み込み (np.loadtxt)",
        "category": "ライブラリ (Library)",
        "usage_example": "arr = np.loadtxt(\"data.csv\", delimiter=\",\")",
        "explanation": "CSVなどのテキストファイルから数値を読み込み、配列を作成します。"
      },
      {
        "page": "p477",
        "term": "Numpy配列の形状確認 (arr.shape)",
        "category": "属性 (Attribute)",
        "usage_example": "arr.shape",
        "explanation": "配列の形状((行数,列数)など)をタプルで取得します。"
      },
      {
        "page": "p478",
        "term": "Numpy要素へのアクセス",
        "category": "構文 (Syntax)",
        "usage_example": "arr[0, 1] または arr[0][1]",
        "explanation": "[行,列]のインデックスで要素にアクセスします。"
      },
      {
        "page": "p479",
        "term": "Numpyスライス (Numpy Slicing)",
        "category": "構文 (Syntax)",
        "usage_example": "arr[0:2, 1:]",
        "explanation": "スライスを使って、配列の一部を切り出します。"
      },
      {
        "page": "p480",
        "term": "Numpyの条件による抽出",
        "category": "構文 (Syntax)",
        "usage_example": "arr[arr > 5]",
        "explanation": "条件式を満たす要素だけを抽出した新しい配列を作成します。"
      },
      {
        "page": "p482",
        "term": "Numpyの条件判定 (all/any)",
        "category": "ライブラリ (Library)",
        "usage_example": "np.all(arr > 0), np.any(arr > 0)",
        "explanation": "all: 全ての要素が条件を満たすか / any: いずれかの要素が条件を満たすか"
      },
      {
        "page": "p483",
        "term": "Numpy総計量の計算 (mean/max/min)",
        "category": "ライブラリ (Library)",
        "usage_example": "np.mean(arr), np.max(arr), np.min(arr)",
        "explanation": "配列全体の平均値、最大値、最小値を計算します。"
      },
      {
        "page": "p484",
        "term": "Numpyの軸ごとの計算 (axis)",
        "category": "ライブラリ (Library)",
        "usage_example": "np.mean(arr, axis=0)",
        "explanation": "axis=0で列ごと、axis=1で行ごとに統計量を計算します。"
      },
      {
        "page": "p485",
        "term": "pandasのインストール (pip install pandas)",
        "category": "コマンド (Command)",
        "usage_example": "pip install pandas",
        "explanation": "pandasをインストールします。"
      },
      {
        "page": "p485",
        "term": "pandas (データフレーム/DataFrame)",
        "category": "データ整形・分析",
        "usage_example": "データフレーム(DataFrame)",
        "explanation": "データ分析や操作を効率的に行うためのライブラリです。高機能な表計算ソフトのようにデータを扱えます。"
      },
      {
        "page": "p486",
        "term": "pandasのインポート (import pandas as pd)",
        "category": "構文 (Syntax)",
        "usage_example": "import pandas as pd",
        "explanation": "別名(pd)で、インポートします。"
      },
      {
        "page": "p487",
        "term": "pandasでCSVデータ読み込み (read_csv)",
        "category": "ライブラリ (Library)",
        "usage_example": "df = pd.read_csv(\"data.csv\")",
        "explanation": "CSVファイルを読み込み、データフレームを作成します。"
      },
      {
        "page": "p488",
        "term": "pandasデータ確認 (head/tail)",
        "category": "メソッド (Method)",
        "usage_example": "df.head(), df.tail()",
        "explanation": "データの先頭5行、末尾5行を表示して概要を確認します。"
      },
      {
        "page": "p490",
        "term": "pandasの列選択",
        "category": "構文 (Syntax)",
        "usage_example": "df[\"列名\"], df[[\"列名1\",\"列名2\"]]",
        "explanation": "1つまたは複数の列を選択します。"
      },
      {
        "page": "p490",
        "term": "pandasの行選択 (スライス)",
        "category": "構文 (Syntax)",
        "usage_example": "df[0:5]",
        "explanation": "スライスで行を選択します。"
      },
      {
        "page": "p491",
        "term": "pandasの条件による行抽出",
        "category": "構文 (Syntax)",
        "usage_example": "df[df[\"列名\"] > 10]",
        "explanation": "条件式を満たす行だけを抽出します。"
      },
      {
        "page": "p492",
        "term": "pandasの条件による行抽出 (query)",
        "category": "メソッド (Method)",
        "usage_example": "df.query(\"列名 > 10 and 列名<20\")",
        "explanation": "queryメソッドで、文字列として条件を記述して抽出します。"
      },
      {
        "page": "p495",
        "term": "pandasの列の追加/削除",
        "category": "構文 (Syntax)",
        "usage_example": "df[\"新しい列\"] = ..., del df[\"列名\"]",
        "explanation": "新しい列を追加したり、delで列を削除したりします。"
      },
      {
        "page": "p496",
        "term": "pandasの統計量計算 (sum/mean)",
        "category": "メソッド (Method)",
        "usage_example": "df.sum(), df.mean()",
        "explanation": "各列の合計値や平均値を計算します。"
      },
      {
        "page": "p497",
        "term": "pandasのデータ書き出し (to_csv)",
        "category": "メソッド (Method)",
        "usage_example": "df.to_csv(\"output.csv\", index=False)",
        "explanation": "データフレームをCSVファイルとして保存します。index=Falseで行番号を保存しません。"
      },
      {
        "page": "p498",
        "term": "Matplotlibのインストール (pip install matplotlib)",
        "category": "コマンド (Command)",
        "usage_example": "pip install matplotlib",
        "explanation": "Matplotlibをインストールします。"
      },
      {
        "page": "p498",
        "term": "Matplotlibのインポート (from matplotlib import pyplot as plt)",
        "category": "構文 (Syntax)",
        "usage_example": "from matplotlib import pyplot as plt",
        "explanation": "別名(plt)で、インポートします。"
      },
      {
        "page": "p498",
        "term": "Matplotlib (グラフ作成ソフト)",
        "category": "データの可視化",
        "usage_example": "(Numpy/pandasのデータを元に)グラフ",
        "explanation": "データをグラフとして可視化するためのライブラリです。"
      },
      {
        "page": "p499",
        "term": "グラフ描画領域の作成 (plt.figure)",
        "category": "ライブラリ (Library)",
        "usage_example": "plt.figure(figsize=(8, 6))",
        "explanation": "グラフを描画する領域 (キャンバス) を作成します。figsizeでサイズを指定できます。"
      },
      {
        "page": "p499",
        "term": "ヒストグラムの描画 (plt.hist)",
        "category": "ライブラリ (Library)",
        "usage_example": "plt.hist(df[\"列名\"])",
        "explanation": "データの分布をヒストグラムで描画します。"
      },
      {
        "page": "p499",
        "term": "グラフのラベル設定 (xlabel/ylabel)",
        "category": "ライブラリ (Library)",
        "usage_example": "plt.xlabel(\"X軸ラベル\"), plt.ylabel(\"Y軸ラベル\")",
        "explanation": "グラフのX軸、Y軸のラベルを設定します。"
      },
      {
        "page": "p499",
        "term": "グラフの表示/保存 (plt.show/savefig)",
        "category": "ライブラリ (Library)",
        "usage_example": "plt.show(), plt.savefig(\"graph.png\")",
        "explanation": "show()でグラフを画面に表示、savefig()でファイルに保存します。"
      },
      {
        "page": "p502",
        "term": "散布図の描画 (plt.scatter)",
        "category": "ライブラリ (Library)",
        "usage_example": "plt.scatter(df[\"X軸\"], df[\"Y軸\"])",
        "explanation": "2つの量の関係を散布図で描画します。pandasからもdf.plot.scatter()で描画可能です。"
      },
      {
        "page": "p504",
        "term": "scikit-learnのインストール (pip install scikit-learn)",
        "category": "コマンド (Command)",
        "usage_example": "pip install scikit-learn",
        "explanation": "scikit-learnをインストールします。"
      },
      {
        "page": "p504",
        "term": "KMeansクラスのインポート (from sklearn.cluster import KMeans)",
        "category": "構文 (Syntax)",
        "usage_example": "from sklearn.cluster import KMeans",
        "explanation": "KMeansなど、利用したいアルゴリズムのクラスをインポートします。"
      },
      {
        "page": "p504",
        "term": "scikit-learn (機械学習/AIツールキット)",
        "category": "機械学習",
        "usage_example": "(Numpy/pandasのデータを元に)モデル",
        "explanation": "機械学習のためのアルゴリズムが豊富に揃ったライブラリです。"
      },
      {
        "page": "p505",
        "term": "モデルの作成と学習 (KMeans.fit)",
        "category": "ライブラリ (Library)",
        "usage_example": "model = KMeans(n_clusters=3).fit(df)",
        "explanation": "モデルのインスタンスを作成し、.fit()メソッドにデータを渡して学習させます。"
      },
      {
        "page": "p505",
        "term": "学習結果の取得 (model.labels_)",
        "category": "属性 (Attribute)",
        "usage_example": "model.labels_",
        "explanation": "学習後のモデルが持つ属性（ここでは各データがどのクラスタに分類されたか）を取得します。"
      },
      {
        "page": "p510",
        "term": "requestsライブラリのインストール (pip install requests)",
        "category": "コマンド (Command)",
        "usage_example": "pip install requests",
        "explanation": "requests ライブラリをインストールします。"
      },
      {
        "page": "p514",
        "term": "Webページの取得 (requests.get)",
        "category": "ライブラリ (Library)",
        "usage_example": "response = requests.get(\"https://example.com\")",
        "explanation": "指定したURLにGETリクエストを送り、サーバーからのレスポンスを取得します。"
      },
      {
        "page": "p514",
        "term": "HTML内容の取得 (response.text)",
        "category": "ライブラリ (Library)",
        "usage_example": "html_text = response.text",
        "explanation": "レスポンスから、HTMLのソースコードを文字列として取得します。"
      },
      {
        "page": "p520",
        "term": "正規表現での検索 (re.search)",
        "category": "re",
        "usage_example": "re.search(r\"価格: (\\d+)円\", text)",
        "explanation": "re.searchを使い、文字列の中から正規表現パターンに一致する部分を探します。"
      },
      {
        "page": "p522",
        "term": "BeautifulSoup4のインストール (pip install beautifulsoup4)",
        "category": "コマンド (Command)",
        "usage_example": "pip install beautifulsoup4",
        "explanation": "BeautifulSoup4ライブラリをインストールします。"
      },
      {
        "page": "p523",
        "term": "BeautifulSoupオブジェクト作成",
        "category": "BeautifulSoup",
        "usage_example": "soup = BeautifulSoup(html_text, \"html.parser\")",
        "explanation": "取得したHTML文字列を解析可能なオブジェクトに変換します。"
      },
      {
        "page": "p523",
        "term": "指定タグを1つ検索 (soup.find)",
        "category": "BeautifulSoup",
        "usage_example": "tag = soup.find(\"h1\")",
        "explanation": "指定したタグ(例: <h1>) を最初に見つかったもの1つだけ取得します。"
      },
      {
        "page": "p523",
        "term": "条件付きでタグを1つ検索 (soup.find)",
        "category": "BeautifulSoup",
        "usage_example": "tag = soup.find(\"a\", class_=\"link\")",
        "explanation": "タグ名と属性(例:class=\"link\"を持つ<a>タグ) を指定して検索します。"
      },
      {
        "page": "p523",
        "term": "指定タグを全て検索 (soup.find_all)",
        "category": "BeautifulSoup",
        "usage_example": "tags = soup.find_all(\"p\")",
        "explanation": "指定したタグ(例: <p>) を全てリストとして取得します。"
      },
      {
        "page": "p525",
        "term": "scheduleライブラリのインストール (pip install schedule)",
        "category": "コマンド (Command)",
        "usage_example": "pip install schedule",
        "explanation": "scheduleライブラリをインストールします。"
      },
      {
        "page": "p526",
        "term": "ジョブの登録 (every().minutes.do())",
        "category": "ライブラリ (Library)",
        "usage_example": "schedule.every(10).minutes.do(my_job)",
        "explanation": "「10分ごとに」関数を実行するようスケジュールを登録します。"
      },
      {
        "page": "p526",
        "term": "ジョブの登録 (every().day.at())",
        "category": "ライブラリ (Library)",
        "usage_example": "schedule.every().day.at(\"10:30\").do(my_job)",
        "explanation": "「毎日10時30分」に実行するようスケジュールを登録します。"
      },
      {
        "page": "p526",
        "term": "ジョブの登録 (every().monday.do())",
        "category": "ライブラリ (Library)",
        "usage_example": "schedule.every().monday.do(my_job)",
        "explanation": "「毎週月曜日」に実行するようスケジュールを登録します。"
      },
      {
        "page": "p527",
        "term": "定期実行する処理の定義 (my_job関数)",
        "category": "ライブラリ (Library)",
        "usage_example": "def my_job(): print(\"Job running...\")",
        "explanation": "定期実行したい処理を関数として定義します。"
      },
      {
        "page": "p527",
        "term": "スケジュールの実行 (schedule.run_pending)",
        "category": "ライブラリ (Library)",
        "usage_example": "while True:\\n    schedule.run_pending()\\n    time.sleep(1)",
        "explanation": "無限ループの中でrun_pending()を呼び出し続け、登録されたスケジュールを実行時間になったら実行します。"
      },
      {
        "page": "p533",
        "term": "sqlite3モジュールのインポート (import sqlite3)",
        "category": "ライブラリ (Library)",
        "usage_example": "import sqlite3",
        "explanation": "sqlite3モジュールをインポートします。"
      },
      {
        "page": "p533",
        "term": "DB接続/新規作成 (sqlite3.connect)",
        "category": "ライブラリ (Library)",
        "usage_example": "conn = sqlite3.connect(\"example.db\")",
        "explanation": "DBファイルに接続します。ファイルがなければ新規作成されます。"
      },
      {
        "page": "p534",
        "term": "カーソルオブジェクトの取得 (conn.cursor)",
        "category": "ライブラリ (Library)",
        "usage_example": "cur = conn.cursor()",
        "explanation": "SQLを実行するためのカーソルオブジェクトを取得します。"
      },
      {
        "page": "p534",
        "term": "SQL実行 (execute)",
        "category": "メソッド (Method)",
        "usage_example": "cur.execute(\"CREATE TABLE ...\")",
        "explanation": "execute()メソッドで、テーブル作成などのSQL文を1つ実行します。"
      },
      {
        "page": "p534",
        "term": "SQL実行 (プレースホルダ)",
        "category": "メソッド (Method)",
        "usage_example": "cur.execute(\"INSERT INTO ... VALUES (?, ?)\", (val1, val2))",
        "explanation": "?をプレースホルダとして使い、安全に値をSQLに埋め込みます。"
      },
      {
        "page": "p534",
        "term": "SQL実行 (executemany)",
        "category": "メソッド (Method)",
        "usage_example": "cur.executemany(\"INSERT ...\", data_list)",
        "explanation": "複数のデータ (リストのリストなど) をまとめて繰り返し実行します。"
      },
      {
        "page": "p534",
        "term": "DB変更の確定 (conn.commit)",
        "category": "メソッド (Method)",
        "usage_example": "conn.commit()",
        "explanation": "INSERT, UPDATEなど、データベースへの変更を確定(保存)します。"
      },
      {
        "page": "p534",
        "term": "DB接続の切断 (conn.close)",
        "category": "メソッド (Method)",
        "usage_example": "conn.close()",
        "explanation": "データベースとの接続を閉じます。"
      },
      {
        "page": "p537",
        "term": "DBデータの取得 (forループ)",
        "category": "構文 (Syntax)",
        "usage_example": "for row in cur:\\n    print(row)",
        "explanation": "SELECT文実行後のカーソルをforループで回すと、結果を1行ずつタプルとして取得できます。"
      },
      {
        "page": "p541",
        "term": "Webサーバー起動 (python -m http.server --cgi)",
        "category": "コマンド (Command)",
        "usage_example": "python -m http.server --cgi",
        "explanation": "Pythonに内蔵されている簡易WebサーバーをCGIモードで起動します。"
      },
      {
        "page": "p548",
        "term": "Bottleフレームワークのインストール (pip install bottle)",
        "category": "コマンド (Command)",
        "usage_example": "pip install bottle",
        "explanation": "Bottleフレームワークをインストールします。"
      },
      {
        "page": "p564",
        "term": "文字列変換特殊メソッド (__str__)",
        "category": "特殊メソッド (Special Method)",
        "usage_example": "def __str__(self):\\n    return f\"名前:{self.name}\"",
        "explanation": "print(インスタンス)やstr(インスタンス)が呼ばれた際の、分かりやすい文字列表現を定義します。"
      },
      {
        "page": "p565",
        "term": "演算子オーバーロード特殊メソッド (__add__)",
        "category": "特殊メソッド (Special Method)",
        "usage_example": "def __add__(self, other):\\n    return self.value + other.value",
        "explanation": " `+` 演算子をそのクラスのインスタンスに対して使えるように定義します。"
      },
      {
        "page": "p569",
        "term": "プロパティ (propertyデコレータ)",
        "category": "デコレータ (Decorator)",
        "usage_example": "@property\\ndef total_price(self):\\n    return self.price * self.quantity",
        "explanation": "メソッドを、属性のように呼び出せるようにします。"
      },
      {
        "page": "p571",
        "term": "セッター (propertyデコレータ)",
        "category": "デコレータ (Decorator)",
        "usage_example": "@total_price.setter\\ndef total_price(self, value):\\n    #値を設定する際の処理",
        "explanation": "@propertyで作成した属性に、値を設定(代入) する際の処理を定義します。"
      },
      {
        "page": "p573",
        "term": "静的メソッド (@staticmethod)",
        "category": "デコレータ (Decorator)",
        "usage_example": "@staticmethod\\ndef helper_func(x):\\n    return x > 0",
        "explanation": "インスタンスやクラスの状態に依存しない、単なる独立した関数をクラス内に定義します。"
      },
      {
        "page": "p574",
        "term": "クラスメソッド (@classmethod)",
        "category": "デコレータ (Decorator)",
        "usage_example": "@classmethod\\ndef from_string(cls, text):\\n    #クラス自身(cls)を使った処理",
        "explanation": "インスタンスではなく、クラス自身を第一引数(cls)として受け取るメソッドを定義します。"
      },
      {
        "page": "p579",
        "term": "属性値の設定 (setattr)",
        "category": "組み込み関数 (Built-in Function)",
        "usage_example": "setattr(obj, \"name\", \"Taro\")",
        "explanation": "文字列で指定した名前の属性に値を設定します。"
      },
      {
        "page": "p580",
        "term": "属性の存在確認 (hasattr)",
        "category": "組み込み関数 (Built-in Function)",
        "usage_example": "hasattr(obj, \"name\")",
        "explanation": "オブジェクトが指定した名前の属性を持っているか True/False で確認します。"
      },
      {
        "page": "p580",
        "term": "属性値の取得 (getattr)",
        "category": "組み込み関数 (Built-in Function)",
        "usage_example": "getattr(obj, \"name\", \"default\")",
        "explanation": "文字列で指定した名前の属性の値を取得します。"
      },
      {
        "page": "p580",
        "term": "属性の削除 (delattr)",
        "category": "組み込み関数 (Built-in Function)",
        "usage_example": "delattr(obj, \"name\")",
        "explanation": "文字列で指定した名前の属性を削除します。"
      },
      {
        "page": "p581",
        "term": "属性名一覧の取得 (dir)",
        "category": "組み込み関数 (Built-in Function)",
        "usage_example": "dir(obj)",
        "explanation": "オブジェクトが持つ全ての属性やメソッドの名前をリストとして返します。"
      },
      {
        "page": "p581",
        "term": "属性辞書の取得 (vars)",
        "category": "組み込み関数 (Built-in Function)",
        "usage_example": "vars(obj)",
        "explanation": "オブジェクトの__dict__ 属性 (インスタンス属性が格納されている辞書) を返します。"
      },
      {
        "page": "p583",
        "term": "属性の制限 (__slots__)",
        "category": "特殊メソッド (Special Method)",
        "usage_example": "slots = [\"name\", \"age\"]",
        "explanation": "クラスが持つことができるインスタンス属性を__slots__で指定したものに限定します。"
      },
      {
        "page": "p583",
        "term": "キーボード入力 (input)",
        "category": "関数 (Function)",
        "usage_example": "name = input(\"名前:\")",
        "explanation": "ユーザーからキーボード入力を文字列として受け取ります。"
      },
      {
        "page": "p584",
        "term": "文字列の分割 (split)",
        "category": "メソッド (Method)",
        "usage_example": "\"a,b,c\".split(\",\")",
        "explanation": "指定した区切り文字で文字列を分割し、リストを返します。"
      },
      {
        "page": "p584",
        "term": "リストの要素連結 (join)",
        "category": "メソッド (Method)",
        "usage_example": "\",\".join([\"a\",\"b\"])",
        "explanation": "リストの要素を、指定した文字列で連結します。"
      },
      {
        "page": "p585",
        "term": "リスト要素の存在確認 (in)",
        "category": "演算子 (Operator)",
        "usage_example": "2 in a",
        "explanation": "要素が含まれるか確認します。"
      },
      {
        "page": "p585",
        "term": "リストの連結 (+)",
        "category": "演算子 (Operator)",
        "usage_example": "a + [4, 5]",
        "explanation": "2つのリストを連結した新しいリストを作成します。"
      },
      {
        "page": "p586",
        "term": "リストの繰り返し (*)",
        "category": "演算子 (Operator)",
        "usage_example": "a * 3",
        "explanation": "リストの要素を繰り返した新しいリストを作成します。"
      },
      {
        "page": "p586",
        "term": "タプル要素の存在確認 (in)",
        "category": "演算子 (Operator)",
        "usage_example": "2 in t",
        "explanation": "要素が含まれるか確認します。"
      },
      {
        "page": "p586",
        "term": "タプルの連結 (+)",
        "category": "演算子 (Operator)",
        "usage_example": "t + (4, 5)",
        "explanation": "2つのタプルを連結した新しいタプルを作成します。"
      },
      {
        "page": "p587",
        "term": "タプルの繰り返し (*)",
        "category": "演算子 (Operator)",
        "usage_example": "t * 3",
        "explanation": "タプルの要素を繰り返した新しいタプルを作成します。"
      },
      {
        "page": "p587",
        "term": "集合の要素追加 (update)",
        "category": "メソッド (Method)",
        "usage_example": "s.update({4, 5})",
        "explanation": "他の集合の要素を全て追加します。"
      },
      {
        "page": "p588",
        "term": "辞書の内容更新 (update)",
        "category": "メソッド (Method)",
        "usage_example": "d.update({'c': 3})",
        "explanation": "他の辞書の内容で更新・追加します。"
      },
      {
        "page": "p588",
        "term": "辞書の要素削除 (popitem)",
        "category": "メソッド (Method)",
        "usage_example": "d.popitem()",
        "explanation": "最後に挿入された要素を削除し、(キー, 値)を返します。"
      },
      {
        "page": "p588",
        "term": "ドキュメンテーション文字列 (Docstring)",
        "category": "構文 (Syntax)",
        "usage_example": "def add(a, b):\\n    \"\"\"二つの数を足して返す関数\"\"\"\\n    return a + b",
        "explanation": "関数定義の直下に\"\"\"で囲んだ文字列を置くと、関数の説明書になります。"
      },
      {
        "page": "p549",
        "term": "ソート (sorted)",
        "category": "関数 (Function)",
        "usage_example": "sorted([3, 1, 2])",
        "explanation": "イテラブルをソートした新しいリストを返します。元のオブジェクトは変更しません。"
      },
      {
        "page": "p550",
        "term": "Excel行ごとのループ (iter_rows)",
        "category": "ライブラリ (Library)",
        "usage_example": "for row in ws.iter_rows(min_row=2):\\n    for cell in row:\\n        print(cell.value)",
        "explanation": "iter_rows()を使うと、指定した範囲のセルを1行ずつループ処理できます。"
      },
      {
        "page": "p551",
        "term": "Numpy配列の作成 (np.array)",
        "category": "ライブラリ (Library)",
        "usage_example": "arr = np.array([[1, 2], [3, 4]])",
        "explanation": "PythonのリストなどからNumpy配列を作成します。"
      },
      {
        "page": "p552",
        "term": "DataFrameの行と列の選択 (iloc)",
        "category": "構文 (Syntax)",
        "usage_example": "df.iloc[0:5, 1:3]",
        "explanation": "ilocを使って、行・列の番号でデータを選択します。"
      },
      {
        "page": "p553",
        "term": "DataFrameの行と列の選択 (loc)",
        "category": "構文 (Syntax)",
        "usage_example": "df.loc[df[\"列名\"] > 10, [\"列名A\",\"列名B\"]]",
        "explanation": "locを使って、行の条件・列の名前でデータを選択します。"
      },
      {
        "page": "p554",
        "term": "requests (Webページダウンロード)",
        "category": "Webページのダウンロード役",
        "usage_example": "Webサイトにアクセスし、HTMLやJSONなどのデータを取得",
        "explanation": "Webページのダウンロードや、JavaScriptで動的に生成される内容の取得に使います。"
      },
      {
        "page": "p555",
        "term": "BeautifulSoup4 (HTML解析・抽出)",
        "category": "HTMLの解析・抽出役",
        "usage_example": "requestsが取得したHTMLの中から、必要な情報だけを簡単に見つけて取り出す",
        "explanation": "HTMLの階層構造を理解し、特定の情報だけを取り出すのに役立ちます。"
      },
      {
        "page": "p556",
        "term": "re (正規表現)",
        "category": "高度な文字列の検索役",
        "usage_example": "非常に複雑なルールやパターンに一致する文字列をHTMLの中から見つけ出す",
        "explanation": "複雑なパターンの文字列を検索・抽出するのに使います。"
      },
      {
        "page": "p557",
        "term": "schedule (定期実行)",
        "category": "定期実行の司令塔",
        "usage_example": "スクレイピング処理を決まった時間に自動で実行させる",
        "explanation": "処理を決まった時間に自動実行させるために使います。"
      },
      {
        "page": "p558",
        "term": "バイナリ内容の取得 (response.content)",
        "category": "ライブラリ (Library)",
        "usage_example": "image_data = response.content",
        "explanation": "レスポンスから、画像などのバイナリデータをバイト列として取得します。"
      },
      {
        "page": "p559",
        "term": "テキストの取得 (tag.get_text)",
        "category": "BeautifulSoup",
        "usage_example": "text = tag.get_text()",
        "explanation": "検索したタグの中から、テキスト部分だけを抽出します。"
      },
      {
        "page": "p560",
        "term": "属性値の取得 (tag.get)",
        "category": "BeautifulSoup",
        "usage_example": "url = tag.get(\"href\")",
        "explanation": "タグの属性値(例: <a>タグのhref属性)を取得します。"
      },
      {
        "page": "p561",
        "term": "DBデータの取得 (execute)",
        "category": "メソッド (Method)",
        "usage_example": "cur.execute(\"SELECT * FROM ...\")",
        "explanation": "SELECT文を実行します。この時点ではまだデータは取得されません。"
      },
      {
        "page": "p562",
        "term": "DBデータの取得 (fetchone)",
        "category": "メソッド (Method)",
        "usage_example": "result = cur.fetchone()",
        "explanation": "SELECT文の結果を1行だけ取得します。"
      },
      {
        "page": "p563",
        "term": "DBデータの取得 (fetchall)",
        "category": "メソッド (Method)",
        "usage_example": "results = cur.fetchall()",
        "explanation": "SELECT文の結果を全てリストとして取得します。"
      },
      {
        "page": "p564",
        "term": "レスポンスヘッダ (Content-Type)",
        "category": "構文 (Syntax)",
        "usage_example": "print(\"Content-Type: text/html\")\\nprint()",
        "explanation": "HTTPレスポンスの種類を宣言します。ヘッダと本文の間には空行が必要です。"
      },
      {
        "page": "p565",
        "term": "HTMLの出力 (print)",
        "category": "構文 (Syntax)",
        "usage_example": "print(\"<html><body>Hello</body></html>\")",
        "explanation": "ヘッダの後にprint()で出力した内容が、ブラウザに表示されるHTML本体になります。"
      },
      {
        "page": "p566",
        "term": "フォームデータの取得 (cgi)",
        "category": "ライブラリ (Library)",
        "usage_example": "import cgi\\nform = cgi.FieldStorage()\\nvalue = form.getvalue(\"name\", \"\")",
        "explanation": "cgiモジュールを使い、ブラウザから送信されたフォームデータを簡単に扱えます。"
      },
      {
        "page": "p567",
        "term": "基本的なアプリ (bottle)",
        "category": "ライブラリ (Library)",
        "usage_example": "from bottle import route, run\\n@route('/')\\ndef index():\\n    return \"Hello World\"\\nrun(host='localhost', port=8080)",
        "explanation": "@routeでURLと関数を結びつけ、runでWebサーバーを起動します。"
      },
      {
        "page": "p568",
        "term": "フォームデータの取得 (request.forms.get)",
        "category": "ライブラリ (Library)",
        "usage_example": "from bottle import request\\nname = request.forms.get(\"name\")",
        "explanation": "requestオブジェクトから、POSTで送信されたフォームの値を取得します。"
      },
      {
        "page": "p569",
        "term": "ファイルアップロード (request.files.get)",
        "category": "ライブラリ (Library)",
        "usage_example": "upload = request.files.get(\"upload_file\")\\nupload.save(\"/path/to/save\")",
        "explanation": "request.filesからアップロードされたファイルオブジェクトを取得し、save()メソッドでサーバー上に保存します。"
      },
      {
        "page": "p570",
        "term": "抽象メソッド (abstractmethod)",
        "category": "デコレータ (Decorator)",
        "usage_example": "from abc import ABC, abstractmethod\\nclass Base(ABC):\\n    @abstractmethod\\n    def run(self): pass",
        "explanation": "継承先の子クラスで必ずオーバーライド (再定義) させたいメソッドを定義します。"
      },
      {
        "term": "CPython",
        "explanation": "CPythonは、Pythonの最も標準的で広く使われている実装です。C言語で書かれており、私たちが通常「Python」と呼んで使っているのは、ほとんどの場合このCPythonを指します。高速で多くのライブラリと互換性があります。",
        "category": "実行環境 (Execution Environment)"
      },
      {
        "term": "コンパイル (Compile)",
        "explanation": "人間が書いたプログラミング言語（ソースコード）を、コンピューターが直接理解できる形式（機械語やバイトコード）に変換する作業のことです。Pythonは通常、コンパイルと実行が同時に行われるインタプリタ言語ですが、内部的には実行時にバイトコードに「コンパイル」されます。",
        "category": "実行環境 (Execution Environment)"
      },
      {
        "term": "cmd（ターミナル / Terminal）",
        "explanation": "コマンドプロンプトやターミナルは、文字を入力してコンピューターに直接指示を出すための画面です。GUI（グラフィカルユーザーインターフェース）のようにマウスで操作するのではなく、特定のコマンドを入力してファイル操作やプログラムの実行などを行います。Windowsでは「コマンドプロンプト」や「PowerShell」、macOSやLinuxでは「ターミナル」と呼ばれます。",
        "category": "開発環境 (Development Environment)"
      },
      {
        "term": "PyCharm",
        "explanation": "PyCharmは、Pythonの開発に特化した統合開発環境（IDE）です。コードの入力補助、エラーチェック、デバッグ、テストなど、プログラミングを効率的に行うための様々な機能が一つにまとまっています。初心者からプロまで幅広く利用されています。",
        "category": "開発環境 (Development Environment)"
      },
      {
        "term": "プロンプト (Prompt)",
        "explanation": "対話モードやコマンドラインで、ユーザーが入力待ちであることを示す記号や文字列のことです。Pythonの対話モードでは `>>>` が、コマンドラインでは `>` や `$` などが表示されます。これを見て、コードやコマンドを入力します。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "組み込み関数 (Built-in Function)",
        "explanation": "Python言語に最初から用意されており、importすることなくすぐに使える便利な関数のことです。`print()`、`len()`、`int()`、`str()` など、Pythonプログラミングで頻繁に利用される基本的な機能を提供します。",
        "category": "関数 (Function)"
      },
      {
        "term": "print",
        "explanation": "`print()` はPythonの組み込み関数 (Built-in Function) の一つで、指定した値や変数 (variable) の内容を画面（標準出力）に表示するために使われます。デバッグ目的で変数の値を確認したり、ユーザーに情報を伝えたりする際によく利用されます。",
        "category": "関数 (Function)"
      },
      {
        "term": "quit()",
        "explanation": "`quit()` はPythonの対話モードを終了するための関数です。対話モードで `quit()` または `exit()` と入力してEnterキーを押すと、Pythonインタプリタが終了し、通常のコマンドラインに戻ります。",
        "category": "実行環境 (Execution Environment)"
      },
      {
        "term": "コマンドライン (Command Line)",
        "explanation": "コンピューターのOS（オペレーティングシステム）に直接命令をテキストで入力して実行するインターフェースのことです。ファイルやディレクトリの操作、プログラムの実行、設定変更など、様々なタスクをコマンドを使って実行できます。ターミナルやコマンドプロンプトの画面がこれに当たります。",
        "category": "開発環境 (Development Environment)"
      },
      {
        "term": "KeyboardInterrupt",
        "explanation": "KeyboardInterruptは、プログラムの実行中にユーザーがキーボードから強制終了の信号（通常は `Ctrl + C`）を送ったときに発生するエラー（例外）です。これにより、無限ループに陥ったプログラムなどを途中で停止させることができます。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "range",
        "explanation": "`range()` はPythonの組み込み関数 (Built-in Function) で、連続した数値のシーケンス（数列）を生成するために使われます。主に `for` ループと組み合わせて、指定した回数だけ処理を繰り返す場合に便利です。例えば `range(5)` は0から4までの数を生成します。",
        "category": "関数 (Function)"
      },
      {
        "term": "IndentationError",
        "explanation": "IndentationErrorは、Pythonコードのインデント（字下げ）が正しくない場合に発生するエラーです。Pythonはインデントによってコードのブロック（まとまり）を識別するため、インデントが間違っているとプログラムは動作しません。特にスペースとタブの混在は避けましょう。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "インデント (Indent)",
        "explanation": "インデントとは、コードの行頭に空白（スペースやタブ）を入れて字下げすることです。Pythonでは、このインデントがコードの構造（どの処理がどのブロックに属するか）を示す非常に重要な役割を果たします。例えば、`if` 文や `for` 文の内部の処理は、本体よりも一段階インデントされます。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "テキストエディタ (Text Editor)",
        "explanation": "テキストエディタは、プログラムのソースコードや単なるテキストファイルを作成、編集するためのソフトウェアです。シンプルなメモ帳から、コードの強調表示や入力補完などの機能を持つ高機能なものまで様々です。VS CodeやSublime Text、Atomなどが有名です。",
        "category": "開発環境 (Development Environment)"
      },
      {
        "term": "UTF-8",
        "explanation": "UTF-8は、Unicodeの文字をコンピューター上で表現するための文字エンコーディング方式の一つです。世界中のほとんどの文字（日本語、英語、中国語など）を扱えるため、現在最も広く使われています。Webページやプログラムのソースコードでよく利用されます。",
        "category": "文字コード (Character Code)"
      },
      {
        "term": "チェンジディレクトリ (Change Directory)",
        "explanation": "コマンドラインで、現在の作業ディレクトリ（フォルダ）を変更する操作のことです。Windowsでは `cd` コマンド、macOS/Linuxでも `cd` コマンドを使用します。例えば `cd Documents` と入力すると、現在のディレクトリから `Documents` ディレクトリに移動します。",
        "category": "開発環境 (Development Environment)"
      },
      {
        "term": "ディレクトリ (Directory)",
        "explanation": "ディレクトリは、コンピューターのファイルシステムにおいて、ファイルや他のディレクトリを整理・分類するための場所です。Windowsでは「フォルダ」とも呼ばれます。木構造のように階層的にファイルを管理することができます。",
        "category": "開発環境 (Development Environment)"
      },
      {
        "term": "UTF-8(BOM付き)",
        "explanation": "UTF-8(BOM付き)は、UTF-8エンコーディングの一種で、ファイルの先頭にBOM（Byte Order Mark）と呼ばれる特殊なバイト列が付加されたものです。BOMはファイルの文字エンコーディングを明示するためのものですが、PythonのスクリプトではBOM付きUTF-8を使うと、SyntaxErrorなどの問題を引き起こすことがあるため、通常はBOMなしのUTF-8が推奨されます。",
        "category": "文字コード (Character Code)"
      },
      {
        "term": "Unicode",
        "explanation": "Unicodeは、世界中のあらゆる文字（漢字、ひらがな、アルファベット、記号など）を一つの体系で表現するために作られた文字コードの国際標準規格です。各文字に固有の番号（コードポイント）を割り当てることで、異なる言語の文字が混在するテキストでも正しく表示できるようになります。",
        "category": "文字コード (Character Code)"
      },
      {
        "term": "ASCII",
        "explanation": "ASCII（American Standard Code for Information Interchange）は、最も古くから使われている文字コードの一つです。主に英数字、記号、制御文字など、128種類の文字を表現できます。日本語などの多バイト文字は扱えません。他の文字コードの基盤となることが多いです。",
        "category": "文字コード (Character Code)"
      },
      {
        "term": "文字コード (Character Code)",
        "explanation": "文字コードとは、コンピューターが文字を認識し、保存、表示するために、それぞれの文字に割り当てられた固有の数値（コード）の集合体のことです。例えば、「A」という文字には特定の数値が対応付けられています。同じ文字でも、使われている文字コードによって数値が異なることがあります。",
        "category": "文字コード (Character Code)"
      },
      {
        "term": "文字エンコーディング (Character Encoding)",
        "explanation": "文字エンコーディングとは、文字コードで定義された数値（コードポイント）を、実際にコンピューターが保存・転送できるようなバイト列に変換する具体的な方式のことです。UTF-8やShift_JISなどがこれにあたります。文字コードとエンコーディングは密接に関連しており、セットで考えることが多いです。",
        "category": "文字コード (Character Code)"
      },
      {
        "term": "カレントディレクトリ (Current Directory)",
        "explanation": "カレントディレクトリ（Current Directory）は、現在作業しているディレクトリ（フォルダ）のことです。ファイル名やディレクトリ名を指定する際に、パスを省略した場合、このカレントディレクトリを基準にファイルが検索されたり、作成されたりします。コマンドラインで `pwd` (macOS/Linux) や `cd` (Windows) と入力すると確認できます。",
        "category": "開発環境 (Development Environment)"
      },
      {
        "term": "エラーメッセージ (Error Message)",
        "explanation": "プログラムの実行中に問題が発生した際に、その原因や種類、発生箇所などを開発者に伝えるために表示される情報のことです。エラーメッセージを読み解くことは、プログラムのバグを修正する上で非常に重要です。初めは難しく感じるかもしれませんが、慣れると強力な味方になります。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "cd /? 機能説明",
        "explanation": "`cd /?` は、Windowsのコマンドプロンプトで `cd` コマンドのヘルプ情報を表示するためのコマンドです。`cd` コマンドの正しい使い方、オプション、機能などを確認したいときに便利です。他の多くのコマンドも `/?` や `--help` でヘルプが表示されます。",
        "category": "開発環境 (Development Environment)"
      },
      {
        "term": "トレースバック (Traceback)",
        "explanation": "トレースバックは、Pythonプログラムでエラー（例外）が発生したときに表示される、エラー発生時の関数の呼び出し履歴のことです。どのファイルで、どの行で、どの関数が呼び出されている途中でエラーが起きたのかが順番に示されており、エラーの原因を特定する上で非常に重要な情報源となります。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "モジュール (Module)",
        "explanation": "モジュールは、Pythonのコードを機能ごとにまとめたファイル（`.py` 拡張子）のことです。関数やクラス、変数などが含まれています。他のPythonファイルから `import` することで、そのモジュール内の機能を利用できるようになり、コードの再利用性や管理がしやすくなります。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "WinMerge",
        "explanation": "WinMergeは、Windows向けのオープンソースのファイル比較・マージツールです。二つのファイルやフォルダの中身を比較し、違いを視覚的に表示してくれます。プログラムのコード変更履歴の確認や、複数のバージョン間の差分を統合する際に役立ちます。",
        "category": "ツール (Tool)"
      },
      {
        "term": "diffコマンド (diff command)",
        "explanation": "`diff` コマンドは、主にUnix/Linux系のOSで使われる、二つのファイルの内容を比較し、その差分（違い）を表示するためのコマンドです。プログラムのバージョン管理や、テキストファイルの変更点を確認する際に非常に重宝されます。WinMergeのようなGUIツールは、この `diff` の結果を視覚的に分かりやすくしたものです。",
        "category": "ツール (Tool)"
      },
      {
        "term": "総合開発環境(VScode)",
        "explanation": "総合開発環境（IDE: Integrated Development Environment）は、プログラミングに必要な様々なツール（コードエディタ、コンパイラ/インタプリタ、デバッガなど）を一つにまとめたソフトウェアです。VS Code（Visual Studio Code）は、Microsoftが開発した非常に人気のある軽量かつ高機能なIDE（正確には高機能なテキストエディタとIDEの中間的な存在）で、多くの言語に対応し、拡張機能が豊富です。",
        "category": "開発環境 (Development Environment)"
      },
      {
        "term": "randint",
        "explanation": "`randint()` は、Pythonの `random` モジュールに含まれる関数で、指定した範囲内のランダムな整数（乱数）を生成するために使われます。例えば `random.randint(1, 10)` は1から10までの整数をランダムに返します。",
        "category": "関数 (Function)"
      },
      {
        "term": "引数 (Argument / Parameter)",
        "explanation": "引数（ひきすう）とは、関数を呼び出す際に、その関数に渡す値のことです。関数はこれらの引数を受け取って、その値に基づいて処理を実行します。例えば `print('Hello')` の `'Hello'` が引数です。※関数を呼び出す際に渡す具体的な値を「実引数 (argument)」、関数を定義する際に受け取るための変数を「仮引数 (parameter)」と呼び分けますが、総称して「引数」と言うことも多いです。",
        "category": "関数 (Function)"
      },
      {
        "term": "デバッガ (Debugger)",
        "explanation": "デバッガは、プログラムのバグ（不具合）を見つけ、修正する作業（デバッグ）を助けるためのツールです。プログラムの実行を一時停止させたり、変数の値を監視したり、コードを一行ずつ実行したりすることで、プログラムの動作を詳細に調べることができます。IDEに内蔵されていることが多いです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "パス (Path)",
        "explanation": "パスとは、コンピューターのファイルシステム上で、ファイルやディレクトリの場所を示す文字列のことです。ルートディレクトリからの完全な位置を示す「絶対パス」と、現在のディレクトリからの相対的な位置を示す「相対パス」があります。例: `/Users/username/Documents/file.txt`",
        "category": "開発環境 (Development Environment)"
      },
      {
        "term": "文字列 (String)",
        "explanation": "文字列は、プログラミングにおいて、文字の並び（テキストデータ）を表現するためのデータ型です。Pythonでは、シングルクォーテーション (`'`) またはダブルクォーテーション (`\"`) で囲むことで文字列として扱われます。例: `'Hello, world!'`",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "end='〇'",
        "explanation": "`print()` 関数のキーワード引数の一つである `end` は、`print()` が出力する文字列の最後に何を付けるかを指定します。デフォルトでは改行文字 (`\\n`) が入りますが、`end='〇'` のように指定すると、出力の最後に `〇` が付き、改行されなくなります。",
        "category": "関数 (Function)"
      },
      {
        "term": "空白（スペース）",
        "explanation": "空白（スペース）は、文字と文字の間に挿入される空の領域です。プログラミングにおいては、可読性を高めるためにコード中に適切に配置されたり、文字列の一部として扱われたりします。Pythonのインデントには通常スペースが使われます。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "関数 (Function)",
        "explanation": "関数は、特定の処理のまとまりに名前を付けたものです。一度定義すれば、何度でも呼び出して再利用できます。これにより、コードの重複を減らし、プログラムを見やすく、管理しやすくすることができます。引数を受け取り、結果を返すことができます。",
        "category": "関数 (Function)"
      },
      {
        "term": "関数を呼び出す (Call a function)",
        "explanation": "関数を呼び出すとは、定義された関数に処理を実行させることです。関数名の後に `()` を付け、必要であればその中に引数 (argument) を渡して実行します。例えば、`print()` 関数を呼び出す場合は `print('Hello')` のように記述します。",
        "category": "関数 (Function)"
      },
      {
        "term": "戻り値 (Return Value)",
        "explanation": "戻り値（返り値、返却値とも）とは、関数がその処理を終えた後に、呼び出し元に返す結果の値のことです。`return` 文を使って指定します。関数が計算結果を返す場合や、処理の成否を示す場合などに利用されます。戻り値がない関数は `None` を返します。",
        "category": "関数 (Function)"
      },
      {
        "term": "None",
        "explanation": "`None` はPythonにおける特別な値で、「何もない」「値が存在しない」ことを表します。JavaScriptの `null` に似ています。関数の戻り値がない場合や、変数がまだ何も指していない状態を示す際などに使われます。`None` は `True` でも `False` でもない単一のオブジェクトです。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "キーワード引数 (Keyword Argument)",
        "explanation": "関数に引数を渡す際に、引数名と値を `引数名=値` の形式で指定する方法です。引数の順番を気にせず渡すことができ、どの引数に何の値を渡しているのかが分かりやすくなる利点があります。例: `print('Hello', end='!')` の `end='!'` の部分です。",
        "category": "関数 (Function)"
      },
      {
        "term": "位置引数 (Positional Argument)",
        "explanation": "関数に引数を渡す際に、定義された引数の順番通りに値を指定する方法です。引数名を使わず、値だけをカンマで区切って並べます。関数の定義を知っている場合や、引数の数が少ない場合に簡潔に書けます。例: `print('Hello', 'World')` の `'Hello'` と `'World'` は位置引数です。",
        "category": "関数 (Function)"
      },
      {
        "term": "文（ステートメント / Statement）",
        "explanation": "文（ステートメント）とは、プログラミング言語における、コンピューターに特定の動作を指示する最小単位のことです。変数の代入、関数の呼び出し、条件分岐、繰り返し処理など、プログラムが行う一連の操作を表します。Pythonでは通常、1行が1つの文になります。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "式文 (Expression Statement)",
        "explanation": "式文は、値を計算する「式」が単独で文として使われているものです。例えば `1 + 2` は式であり、その結果をどこにも代入せず、ただ計算するだけの `1 + 2` という記述は式文となりえます。Pythonのインタプリタでは、式文の結果が表示されます。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "代入文 (Assignment Statement)",
        "explanation": "代入文は、変数 (variable) に値を割り当てる（代入する）ための文です。`変数名 = 値` の形式で記述します。これにより、右辺の式の計算結果が左辺の変数に格納され、後からその変数を参照することで値を利用できるようになります。例: `message = 'Hello'`",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "if文 (if-statement)",
        "explanation": "`if` 文は、特定の条件が「真」（True）の場合にのみ、指定したコードブロックを実行するための条件分岐の文です。`if 条件:` の後にインデントされたブロックで実行する処理を記述します。`elif` や `else` と組み合わせて、複数の条件に対応することもできます。",
        "category": "制御構文 (Control Flow)"
      },
      {
        "term": "for文 (for-statement / for-loop)",
        "explanation": "`for` 文は、繰り返し処理を行うための構文（ループ）の一つです。リストやタプルなどのコレクションの各要素に対して、順番に同じ処理を適用したい場合や、指定した回数だけ処理を繰り返したい場合に使います。Pythonでは `for 変数 in シーケンス:` の形式で記述します。",
        "category": "制御構文 (Control Flow)"
      },
      {
        "term": "単純文 (Simple Statement)",
        "explanation": "単純文は、一行で完結し、他の文を内包しない文のことです。例えば、代入文 (`x = 10`) や `print()` 文、`pass` 文などがこれにあたります。これらは通常、セミコロンで区切ることもできますが、Pythonでは推奨されません。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "複合文 (Compound Statement)",
        "explanation": "複合文は、ヘッダー（`if` や `for` など）と、それに続くインデントされた一つ以上の「スイート」（コードブロック）から構成される文です。例えば `if` 文や `for` 文、`while` 文、関数の定義 (`def`) などがこれにあたります。複数の単純文をまとめて一つのロジックを形成します。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "オフサイドルール (Off-side Rule)",
        "explanation": "オフサイドルールは、プログラミング言語において、コードのブロックの範囲をインデント（字下げ）によって識別する規則のことです。Pythonはこのルールを採用しており、中括弧 `{}` などを使わずにインデントの深さでコードの構造を示します。これにより、コードが自動的に読みやすくなる利点があります。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "教育言語のABC",
        "explanation": "ABCは、Pythonに影響を与えたとされる教育用プログラミング言語です。オランダで開発され、そのシンプルで読みやすい構文、特にインデントを構文要素として使う「オフサイドルール」は、Pythonの設計思想に大きな影響を与えました。Pythonの作者であるGuido van RossumもABCの開発に関わっていました。",
        "category": "歴史/概念 (History/Concept)"
      },
      {
        "term": "関数型言語のHaskell",
        "explanation": "Haskell（ハスケル）は、純粋関数型プログラミング言語の一つです。副作用のない純粋な関数を重視し、参照透過性や遅延評価といった特徴を持ちます。数学的な記述に近く、厳密な型システムを持つため、堅牢なプログラムを作成するのに適していますが、学習曲線は急な傾向があります。Pythonとはパラダイムが異なります。",
        "category": "歴史/概念 (History/Concept)"
      },
      {
        "term": "PEP8",
        "explanation": "PEP8（Python Enhancement Proposal 8）は、Pythonコードの書き方に関するスタイルガイドです。コードの可読性を高めるために、変数名、関数名、インデント、空白の入れ方など、様々なコーディング規約が定められています。Pythonコミュニティで広く受け入れられており、このガイドに従うことで、他の開発者にも理解しやすいコードを書くことができます。",
        "category": "コーディング規約 (Coding Style)"
      },
      {
        "term": "FORTRAN",
        "explanation": "FORTRAN（フォートラン）は、科学技術計算や数値解析の分野で非常に長く使われているプログラミング言語です。特に高速な計算処理に強みがあり、スーパーコンピュータの分野などで今でも現役で利用されています。Pythonとは異なり、コンパイル型の言語です。",
        "category": "歴史/概念 (History/Concept)"
      },
      {
        "term": "COBOL",
        "explanation": "COBOL（コボル）は、主に事務処理やビジネスアプリケーション向けに開発されたプログラミング言語です。銀行の基幹システムなどで使われることが多く、大量のデータを正確に処理することに長けています。英語に近い構文を持つのが特徴です。Pythonとは利用目的や歴史が大きく異なります。",
        "category": "歴史/概念 (History/Concept)"
      },
      {
        "term": "コメント (Comment)",
        "explanation": "コメントは、プログラムのコード中に書かれる、コンピューターが実行しない「説明文」のことです。コードが何をしているのか、なぜそのように書かれているのかなどを、後からコードを読む人（自分自身を含む）が理解しやすくするために使われます。Pythonでは `#` で始まります。",
        "category": "コーディング規約 (Coding Style)"
      },
      {
        "term": "コメントアウト (Comment Out)",
        "explanation": "コメントアウトとは、一時的にコードの一部をコメントとして扱い、プログラムの実行対象から外すことです。これにより、特定のコードが原因でエラーが出ないかを確認したり、機能を一時的に無効にしたりすることができます。デバッグ作業でよく利用されます。",
        "category": "コーディング規約 (Coding Style)"
      },
      {
        "term": "ブロックコメント (Block Comment)",
        "explanation": "ブロックコメントは、複数の行にわたる長い説明や、一時的に多くのコード行を無効化（コメントアウト）したい場合に使われるコメントの形式です。Pythonでは、正式なブロックコメントの構文はありませんが、三重クォーテーション文字列 `'''コメント'''` または `\"\"\"コメント\"\"\"` を使って、複数行にわたるコメントを表現することが一般的です。",
        "category": "コーディング規約 (Coding Style)"
      },
      {
        "term": "インラインコメント (Inline Comment)",
        "explanation": "インラインコメントは、コードの行の途中に書かれるコメントです。行のコードが何をしているのかを、その行のすぐ隣で簡潔に説明するために使われます。Pythonでは、コードの後に `#` を付けて記述します。例: `x = 10  # 変数xに10を代入`",
        "category": "コーディング規約 (Coding Style)"
      },
      {
        "term": "三重クォート文字列 (Triple-quoted String)",
        "explanation": "三重クォート文字列（Triple-quoted string）は、シングルクォーテーションを3つ (`'''` または `\"\"\"`) で囲まれた文字列です。複数行にわたる文字列を記述できるだけでなく、PythonのDocstring（ドキュメンテーション文字列）として関数の説明を書いたり、ブロックコメントのように使ったりするのに便利です。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "コーディングスタイル (Coding Style)",
        "explanation": "コーディングスタイルとは、プログラミング言語でコードを書く際の見た目や記述方法に関する一連の規則や推奨事項のことです。インデントの幅、変数名の付け方、空白の入れ方などを含みます。一貫したコーディングスタイルは、コードの可読性を高め、チーム開発での協力作業をスムーズにします。PythonではPEP8が有名です。",
        "category": "コーディング規約 (Coding Style)"
      },
      {
        "term": "pycodestyle",
        "explanation": "`pycodestyle` は、PythonコードがPEP8のコーディング規約に準拠しているかをチェックするためのツールです。コードを分析し、PEP8のルールから逸脱している箇所を警告として表示してくれます。これにより、自動的にコーディングスタイルを統一し、コード品質を向上させることができます。",
        "category": "ツール (Tool)"
      },
      {
        "term": "pip install",
        "explanation": "`pip install` は、Pythonのパッケージ管理システムである `pip` を使って、Pythonの外部ライブラリやツールをインストールするためのコマンドです。Pythonの標準ライブラリには含まれていない機能（例: `numpy`, `pandas`, `requests` など）を使いたい場合に利用します。",
        "category": "ツール (Tool)"
      },
      {
        "term": "autopep8",
        "explanation": "`autopep8` は、PythonコードをPEP8のスタイルガイドに自動的に整形（フォーマット）してくれるツールです。`pycodestyle` が警告を表示するのに対し、`autopep8` は実際にコードを修正してくれます。これにより、手作業でPEP8に準拠させる手間を省き、効率的に整形されたコードを作成できます。",
        "category": "ツール (Tool)"
      },
      {
        "term": "型 (Type)",
        "explanation": "プログラミングにおいて、データがどのような種類のものかを示す分類です。Pythonでは、整数、浮動小数点数、文字列、真偽値など、様々な組み込み型があります。データの型によって、そのデータに対して行える操作や、メモリ上での表現方法が異なります。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "数値 (Number)",
        "explanation": "算術演算が可能な、数値を表すデータ型の総称です。Pythonには、整数型 (`int`)、浮動小数点数型 (`float`)、複素数型 (`complex`) などがあります。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "真偽値 (Boolean)",
        "explanation": "真 (`True`) または偽 (`False`) のどちらか一方の値のみを持つデータ型です。条件分岐や論理演算で、条件の真偽を判定するために使用されます。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "整数(int)",
        "explanation": "小数点以下の部分を持たない数値を表すデータ型です。Pythonの `int` 型は、メモリが許す限りいくらでも大きな整数を扱うことができる「多倍長整数」です。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "浮動小数点数(float)",
        "explanation": "小数点以下の部分を持つ数値を表すデータ型です。Pythonの `float` 型は、通常、IEEE 754規格の倍精度浮動小数点数として実装されており、近似値を表現します。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "多倍長整数 (Arbitrary-precision integer)",
        "explanation": "扱える整数の大きさに制限がなく、コンピュータのメモリが許す限り、いくらでも大きな整数を表現できる仕組みです。Pythonの `int` 型は、この多倍長整数として実装されています。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "演算子 (Operator)",
        "explanation": "プログラム中で変数や値に対して何らかの操作（計算、比較、論理判断など）を行うための記号です。算術演算子、比較演算子、論理演算子など様々な種類があります。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "リテラル (Literal)",
        "explanation": "ソースコード中に直接記述された、固定された値のことです。例えば、`123` は整数リテラル、`\"Hello\"` は文字列リテラル、`True` は真偽値リテラルです。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "整数リテラル (Integer Literal)",
        "explanation": "ソースコード中に直接記述された整数の値です。10進数だけでなく、2進数 (`0b...`)、8進数 (`0o...`)、16進数 (`0x...`) 形式でも記述できます。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "10進数 (Decimal)",
        "explanation": "私たちが日常的に使用する基数10の数値表現方法です。0から9の数字を使って数を表します。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "2進数 (Binary)",
        "explanation": "基数2の数値表現方法で、0と1の数字のみを使って数を表します。コンピュータの内部ではこの形式でデータが扱われます。Pythonでは `0b` をプレフィックスとして表現します (例: `0b101`)。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "8進数 (Octal)",
        "explanation": "基数8の数値表現方法で、0から7の数字を使って数を表します。Pythonでは `0o` をプレフィックスとして表現します (例: `0o755`)。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "16進数 (Hexadecimal)",
        "explanation": "基数16の数値表現方法で、0から9の数字とAからFのアルファベットを使って数を表します。Pythonでは `0x` をプレフィックスとして表現します (例: `0xFF`)。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "単精度 (Single-precision)",
        "explanation": "浮動小数点数を表現する際の精度の一つで、通常32ビット（4バイト）を使用して数値を格納します。表現できる数値の範囲や有効桁数が倍精度より小さいです。Pythonの `float` は通常倍精度です。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "倍精度 (Double-precision)",
        "explanation": "浮動小数点数を表現する際の精度の一つで、通常64ビット（8バイト）を使用して数値を格納します。単精度よりも表現できる数値の範囲が広く、有効桁数も多いです。Pythonの `float` はこの倍精度浮動小数点数です。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "IEEE754",
        "explanation": "浮動小数点数の表現と算術を標準化した国際規格です。ほとんどのプログラミング言語（Pythonの `float` も含む）がこの規格に基づいて浮動小数点数を扱っています。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "32ビット (32-bit)",
        "explanation": "コンピュータのデータ処理における単位の一つで、32個の2進数（ビット）で情報を表現することです。単精度浮動小数点数は通常32ビットで表現されます。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "64ビット (64-bit)",
        "explanation": "コンピュータのデータ処理における単位の一つで、64個の2進数（ビット）で情報を表現することです。倍精度浮動小数点数は通常64ビットで表現されます。Pythonの `float` は64ビットです。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "有効桁数 (Significant digits)",
        "explanation": "数値の精度を示す桁数のことです。浮動小数点数においては、表現できる桁数に限りがあり、特に大きな数値や小さな数値を扱う際に丸め誤差が生じることがあります。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "decimal",
        "explanation": "Pythonの `decimal` モジュールで提供される、固定小数点数および浮動小数点数の両方を正確に表現するためのデータ型です。金融計算など、高い精度が求められる場面で浮動小数点数の誤差を回避するために使用されます。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "浮動小数点数リテラル (Floating-point Literal)",
        "explanation": "ソースコード中に直接記述された浮動小数点数の値です。小数点を含む数値 (例: `3.14`) や、指数表記 (例: `1.2e-5`) で表現されます。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "虚数リテラル (Imaginary Literal)",
        "explanation": "Pythonで複素数を構成する虚数部を直接記述する際に使用されるリテラルです。数値の後に `j` または `J` を付けて表現します (例: `3j`, `1.5j`)。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "複素数 (Complex Number)",
        "explanation": "実数部と虚数部からなる数値です。Pythonでは `complex` 型として扱われ、`実数部 + 虚数部j` の形式で表現されます (例: `1 + 2j`)。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "str",
        "explanation": "Pythonの文字列型を指します。テキストデータを扱うための組み込み型であり、様々な文字列操作メソッドを提供します。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "文字列型 (String Type)",
        "explanation": "文字の並び（シーケンス）を表現するためのデータ型です。Pythonでは `str` 型として実装されており、変更不能（イミュータブル）なシーケンスです。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "文字列リテラル (String Literal)",
        "explanation": "ソースコード中に直接記述された文字列の値です。シングルクォーテーション (`'...'`)、ダブルクォーテーション (`\"...\"`)、または三重クォーテーション (`'''...'''` もしくは `\"\"\"...\"\"\"`) で囲みます。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "空文字列 (Empty String)",
        "explanation": "文字を一つも含まない文字列のことです。長さが0の文字列であり、`''` または `\"\"` と記述されます。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "\\'",
        "explanation": "エスケープシーケンスの一つで、文字列中にシングルクォーテーションそのものを文字として含めたい場合に使用します。",
        "category": "文字列 (String)"
      },
      {
        "term": "\\\"",
        "explanation": "エスケープシーケンスの一つで、文字列中にダブルクォーテーションそのものを文字として含めたい場合に使用します。",
        "category": "文字列 (String)"
      },
      {
        "term": "\\",
        "explanation": "バックスラッシュ（円記号）は、エスケープシーケンスを開始する特殊文字です。この後に続く文字によって特別な意味を持ちます。",
        "category": "文字列 (String)"
      },
      {
        "term": "エスケープシーケンス (Escape Sequence)",
        "explanation": "文字列中で特殊な意味を持つ文字（改行、タブ、クォーテーションなど）を表現したり、通常の文字としては入力できない文字を表現したりするために、バックスラッシュ (`\\`) と特定の文字を組み合わせて記述する表記方法です。",
        "category": "文字列 (String)"
      },
      {
        "term": "\\n",
        "explanation": "エスケープシーケンスの一つで、改行（New Line）を表します。文字列中に挿入すると、その位置で出力が次の行に移ります。",
        "category": "文字列 (String)"
      },
      {
        "term": "\\t",
        "explanation": "エスケープシーケンスの一つで、水平タブ（Tab）を表します。文字列中に挿入すると、タブ文字のスペースが挿入されます。",
        "category": "文字列 (String)"
      },
      {
        "term": "\\\\",
        "explanation": "エスケープシーケンスの一つで、バックスラッシュそのものを文字として表現したい場合に使用します。",
        "category": "文字列 (String)"
      },
      {
        "term": "シングルクォート (Single Quote)",
        "explanation": "文字列リテラルを定義するために使用される記号 (`'`) です。Pythonではダブルクォートと同じように使えます。",
        "category": "文字列 (String)"
      },
      {
        "term": "ダブルクォート (Double Quote)",
        "explanation": "文字列リテラルを定義するために使用される記号 (`\"`) です。Pythonではシングルクォートと同じように使えます。",
        "category": "文字列 (String)"
      },
      {
        "term": "文字列リテラルの連結 (String Literal Concatenation)",
        "explanation": "複数の文字列リテラルを結合して一つの文字列にする操作です。Pythonでは、隣接する文字列リテラルは自動的に連結されます。",
        "category": "文字列 (String)"
      },
      {
        "term": "文字列同士は+",
        "explanation": "2つの文字列オブジェクトを `+` 演算子を使って結合し、新しい一つの文字列オブジェクトを生成する操作です。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "パスの文字列リテラル (Path String Literal)",
        "explanation": "ファイルパスやディレクトリパスを表現する文字列リテラルです。特にWindowsパスではバックスラッシュが多用されるため、エスケープシーケンスの問題を避けるためにraw文字列がよく使われます。",
        "category": "文字列 (String)"
      },
      {
        "term": "raw",
        "explanation": "raw文字列を指します。文字列リテラルの前に `r` または `R` を付けることで、エスケープシーケンスを通常の文字として解釈させることができます。ファイルパスなどを扱う際に便利です。",
        "category": "文字列 (String)"
      },
      {
        "term": "rまたはR",
        "explanation": "文字列リテラルの先頭に付けることで、その文字列をraw文字列（生の文字列）として扱わせるプレフィックスです。これにより、文字列中のバックスラッシュ (`\\`) がエスケープシーケンスとして解釈されなくなります。",
        "category": "文字列 (String)"
      },
      {
        "term": "真偽値の真 (Boolean True)",
        "explanation": "論理的な「真」を表す値です。Pythonではキーワード `True` で表現されます。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "真偽値の偽 (Boolean False)",
        "explanation": "論理的な「偽」を表す値です。Pythonではキーワード `False` で表現されます。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "bool",
        "explanation": "Pythonの真偽値型を指します。`True` と `False` の二つの値のみを持ちます。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "True",
        "explanation": "Pythonにおける真偽値の「真」を表すキーワードです。条件式が成立した場合などにこの値となります。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "False",
        "explanation": "Pythonにおける真偽値の「偽」を表すキーワードです。条件式が成立しなかった場合などにこの値となります。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "比較演算子 (Comparison Operator)",
        "explanation": "2つの値を比較し、その結果が真 (`True`) か偽 (`False`) かを返す演算子です。等しいか、大きいか、小さいかなどを判定します。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "A==B",
        "explanation": "比較演算子の一つで、`A` と `B` の値が「等しい」場合に `True` を、そうでない場合に `False` を返します。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "A!=B",
        "explanation": "比較演算子の一つで、`A` と `B` の値が「等しくない」場合に `True` を、そうでない場合に `False` を返します。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "A<B",
        "explanation": "比較演算子の一つで、`A` が `B` より「小さい」場合に `True` を、そうでない場合に `False` を返します。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "A>B",
        "explanation": "比較演算子の一つで、`A` が `B` より「大きい」場合に `True` を、そうでない場合に `False` を返します。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "A<=B",
        "explanation": "比較演算子の一つで、`A` が `B` 以下（小さいか等しい）の場合に `True` を、そうでない場合に `False` を返します。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "A>=B",
        "explanation": "比較演算子の一つで、`A` が `B` 以上（大きいか等しい）の場合に `True` を、そうでない場合に `False` を返します。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "ブール演算子(論理演算子) / Boolean Operator (Logical Operator)",
        "explanation": "真偽値（`True` または `False`）に対して論理的な操作を行う演算子です。`and`、`or`、`not` があります。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "and",
        "explanation": "論理演算子の一つで、両方のオペランドが `True` の場合に `True` を返します。どちらか一方でも `False` であれば `False` を返します。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "or",
        "explanation": "論理演算子の一つで、どちらか一方または両方のオペランドが `True` の場合に `True` を返します。両方が `False` の場合にのみ `False` を返します。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "not",
        "explanation": "論理演算子の一つで、オペランドの真偽を反転させます。`True` であれば `False` を、`False` であれば `True` を返します。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "A and B",
        "explanation": "論理演算子 `and` を使用した式です。`A` と `B` の両方が真であれば真、そうでなければ偽となります。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "A or B",
        "explanation": "論理演算子 `or` を使用した式です。`A` と `B` のどちらか一方、または両方が真であれば真、両方が偽であれば偽となります。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "not A",
        "explanation": "論理演算子 `not` を使用した式です。`A` の真偽値を反転させます。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "int関数 (int function)",
        "explanation": "Pythonの組み込み関数の一つで、数値や文字列を整数型 (`int`) に変換します。浮動小数点数を整数に変換すると小数点以下は切り捨てられます。",
        "category": "関数 (Function)"
      },
      {
        "term": "math",
        "explanation": "Pythonの標準ライブラリに含まれるモジュールの一つで、数学的な関数（三角関数、対数関数、平方根など）を提供します。利用するには `import math` が必要です。",
        "category": "ライブラリ (Library)"
      },
      {
        "term": "floor",
        "explanation": "`math` モジュールに含まれる関数 `math.floor()` を指し、与えられた数値以下の最大の整数（小数点以下を切り捨てた値）を返します。",
        "category": "関数 (Function)"
      },
      {
        "term": "ceil",
        "explanation": "`math` モジュールに含まれる関数 `math.ceil()` を指し、与えられた数値以上の最小の整数（小数点以下を切り上げた値）を返します。",
        "category": "関数 (Function)"
      },
      {
        "term": "mathライブラリ (math library)",
        "explanation": "Pythonの標準ライブラリの一つで、数学的な計算を行うための関数や定数を提供します。例えば、`math.sqrt()` (平方根)、`math.pi` (円周率) などがあります。",
        "category": "ライブラリ (Library)"
      },
      {
        "term": "import文 (import statement)",
        "explanation": "他のモジュールやパッケージが提供する機能（関数、クラス、変数など）を現在のプログラムで利用できるようにするための文です。例: `import math`",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "float関数 (float function)",
        "explanation": "Pythonの組み込み関数の一つで、数値や文字列を浮動小数点数型 (`float`) に変換します。",
        "category": "関数 (Function)"
      },
      {
        "term": "str関数 (str function)",
        "explanation": "Pythonの組み込み関数の一つで、任意のオブジェクトを文字列型 (`str`) に変換します。",
        "category": "関数 (Function)"
      },
      {
        "term": "bool関数 (bool function)",
        "explanation": "Pythonの組み込み関数の一つで、任意のオブジェクトを真偽値型 (`bool`) に変換します。数値の0、空のコレクション、`None` などは `False` に、それ以外は `True` に評価されます。",
        "category": "関数 (Function)"
      },
      {
        "term": "変数 (Variable)",
        "explanation": "プログラム中でデータを一時的に格納するための名前付きの記憶領域です。変数は、代入演算子 (`=`) を使って値が割り当てられ、後からその値を参照したり変更したりすることができます。※英語では variable と言います。関数に渡される変数は parameter と呼ばれることもあります。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "代入　＝（イコール / Assignment)",
        "explanation": "変数に値を割り当てるために使用される代入演算子です。右辺の式の評価結果が左辺の変数に格納されます。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "デリミタ (Delimiter)",
        "explanation": "プログラミング言語において、コードの要素（例えば、引数の区切りや文の区切り）を区別するために使用される特殊な記号や文字のことです。Pythonではカンマ (`,`) やコロン (`:`) などがデリミタとして機能します。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "オブジェクト (Object)",
        "explanation": "Pythonにおけるすべてのデータはオブジェクトとして扱われます。オブジェクトは、値と型、そしてそれに対して行える操作（メソッド）を持ちます。変数はオブジェクトそのものではなく、オブジェクトへの参照を保持します。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "ガベージコレクション (Garbage Collection)",
        "explanation": "プログラムによって動的に確保されたメモリ領域のうち、不要になったものを自動的に解放する機能です。Pythonでは主に参照カウント方式と世代別ガベージコレクタを組み合わせてメモリ管理を行います。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "リファレンスカウント (Reference Count)",
        "explanation": "オブジェクトへの参照（変数など）がいくつあるかを数える仕組みです。参照カウントが0になったオブジェクトは、もうどこからも参照されていないと判断され、メモリから解放されます（ガベージコレクションの主要な方式の一つ）。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "is演算子 (is operator)",
        "explanation": "Pythonの `is` 演算子は、2つの変数が「同じオブジェクト」を参照しているか（つまり、メモリ上の同じ場所を指しているか）を比較します。値が等しいかどうかを比較する `==` とは異なります。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "is not演算子 (is not operator)",
        "explanation": "Pythonの `is not` 演算子は、2つの変数が「異なるオブジェクト」を参照しているか（メモリ上の異なる場所を指しているか）を比較します。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "識別子 (Identifier)",
        "explanation": "変数、関数、クラス、モジュールなどのプログラム要素に付ける名前のことです。アルファベット、数字、アンダースコア (`_`) で構成され、数字で始まることはできません。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "定数 (Constant)",
        "explanation": "プログラムの実行中に値が変更されないことを意図した変数です。Pythonには厳密な定数の概念はありませんが、慣習としてすべて大文字で名前を付けることで定数であることを示します。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "del文 (del statement)",
        "explanation": "変数、リストの要素、辞書のキーと値のペアなどを削除するために使用する文です。`del` を使うと、指定された名前がバインドされていたオブジェクトへの参照が削除されます。参照カウントが0になるとオブジェクトはガベージコレクションされます。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "算術演算子 (Arithmetic Operator)",
        "explanation": "数値に対して数学的な計算（足し算、引き算、掛け算、割り算など）を行うための演算子です。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "A+B",
        "explanation": "算術演算子 `+` を使用した加算（足し算）の式です。数値の加算、または文字列の結合を行います。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "A-B",
        "explanation": "算術演算子 `-` を使用した減算（引き算）の式です。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "A*B",
        "explanation": "算術演算子 `*` を使用した乗算（掛け算）の式です。数値の乗算、または文字列の繰り返しを行います。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "A@B",
        "explanation": "Python 3.5で導入された `@` 演算子を指し、主に行列の乗算を行うために使用されます。`Numpy` などのライブラリで定義されています。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "A/B",
        "explanation": "算術演算子 `/` を使用した除算（割り算）の式です。結果は常に浮動小数点数（`float`）になります。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "A//B",
        "explanation": "算術演算子 `//` を使用した整数除算（切り捨て除算）の式です。結果は小数点以下を切り捨てた整数（または浮動小数点数）になります。負の数の場合は、結果が小さい方向（負の無限大方向）に丸められます。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "A%B",
        "explanation": "算術演算子 `%` を使用した剰余（余り）の式です。`A` を `B` で割った余りを返します。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "A**B",
        "explanation": "算術演算子 `**` を使用したべき乗（累乗）の式です。`A` の `B` 乗を計算します。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "項数 (Arity)",
        "explanation": "演算子や関数が取る引数（オペランド）の数のことです。例えば、`+` は2項演算子（2つのオペランドを取る）であり、`not` は1項演算子です。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "二項演算子 (Binary Operator)",
        "explanation": "2つのオペランド（項）を取って操作を行う演算子です。算術演算子 (`+`, `-`, `*`, `/` など) や比較演算子 (`==`, `<` など) の多くが二項演算子です。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "二項算術演算子 (Binary Arithmetic Operator)",
        "explanation": "2つの数値オペランドに対して算術計算を行う演算子です。`+`, `-`, `*`, `/`, `//`, `%`, `**`, `@` などがあります。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "単項演算子 (Unary Operator)",
        "explanation": "1つのオペランド（項）を取って操作を行う演算子です。例えば、単項の `-` (負の符号) や論理演算子 `not` などがあります。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "単項算術演算子 (Unary Arithmetic Operator)",
        "explanation": "1つの数値オペランドに対して算術的な操作を行う演算子です。正の符号 (`+`) と負の符号 (`-`) があります。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "Numpy",
        "explanation": "Pythonで数値計算を効率的に行うためのライブラリです。特に多次元配列（`ndarray`）オブジェクトと、それらを操作するための高速な関数を提供し、科学技術計算の基盤となっています。`@` 演算子が行列の乗算として利用されるのもこのライブラリで定義されています。",
        "category": "ライブラリ (Library)"
      },
      {
        "term": "整数と浮動小数点数の//",
        "explanation": "整数除算演算子 `//` は、オペランドが両方とも整数であれば整数を、片方または両方が浮動小数点数であれば浮動小数点数を返します。常に結果は小数部を切り捨てて整数に丸められます。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "負の数の//",
        "explanation": "負の数に対する整数除算 `//` の挙動は、結果が常に小さい方向（負の無限大方向）に丸められるという特徴があります。例えば、`-7 // 3` は `-3` となります。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "式を評価する (Evaluate an expression)",
        "explanation": "プログラム中の「式」（値を持つ部分）を計算し、その結果の値を決定することです。例えば `1 + 2` という式を評価すると `3` という値になります。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "演算子の優先順位 (Operator Precedence)",
        "explanation": "複数の演算子が含まれる式において、どの演算子が先に実行されるかを決定する規則です。例えば、`*` や `/` は `+` や `-` より優先順位が高いです。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "結合性 (Associativity)",
        "explanation": "同じ優先順位を持つ複数の演算子が連続して現れた場合に、どちらの方向から評価されるか（左から右か、右から左か）を決定する規則です。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "左結合 (Left-associative)",
        "explanation": "演算子が左結合である場合、同じ優先順位の演算子が連続する場合、式は左から右へ評価されます。ほとんどの算術演算子や比較演算子は左結合です。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "右結合 (Right-associative)",
        "explanation": "演算子が右結合である場合、同じ優先順位の演算子が連続する場合、式は右から左へ評価されます。Pythonでは、べき乗演算子 `**` が右結合です (例: `2 ** 3 ** 2` は `2 ** (3 ** 2)` と解釈されます)。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "累算代入文 (Augmented Assignment Statement)",
        "explanation": "算術演算と代入を組み合わせた短縮表記の文です。例えば、`x = x + 1` は `x += 1` と書けます。`+=`, `-=`, `*=`, `/=`, `%=` などがあります。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "文字列の結合は+",
        "explanation": "2つの文字列を結合して新しい一つの文字列を作成する際に、`+` 演算子を使用します。",
        "category": "文字列 (String)"
      },
      {
        "term": "文字列の繰り返しは*",
        "explanation": "文字列と整数を `*` 演算子で組み合わせることで、文字列を指定された回数だけ繰り返して新しい文字列を作成します。",
        "category": "文字列 (String)"
      },
      {
        "term": "イミュータブル (Immutable)",
        "explanation": "作成された後にその内容を変更できないオブジェクトのことです。Pythonでは、数値 (`int`, `float`, `complex`)、文字列 (`str`)、タプル (`tuple`) などがイミュータブルです。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "ミュータブル (Mutable)",
        "explanation": "作成された後にその内容を変更できるオブジェクトのことです。Pythonでは、リスト (`list`)、辞書 (`dict`)、セット (`set`) などがミュータブルです。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "インデックス (Index)",
        "explanation": "シーケンス型（文字列、リスト、タプルなど）の要素の順番を示す番号です。Pythonでは0から始まり、各要素に一意に割り当てられます。",
        "category": "シーケンス (Sequence)"
      },
      {
        "term": "シーケンス (Sequence)",
        "explanation": "要素が順序付けられて並んでいるデータ構造の総称です。Pythonでは、文字列、リスト、タプルなどがシーケンス型に分類され、インデックスやスライスによるアクセスが可能です。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "スライス (Slice)",
        "explanation": "シーケンス型（文字列、リストなど）の一部を切り出して新しいシーケンスを作成する操作です。`[開始インデックス:終了インデックス:ストライド]` の形式で指定します。",
        "category": "シーケンス (Sequence)"
      },
      {
        "term": "開始インデックス (Start Index)",
        "explanation": "スライス操作において、切り出しを開始する要素のインデックスです。このインデックスの要素は含まれます。省略するとシーケンスの先頭（0）からとなります。",
        "category": "シーケンス (Sequence)"
      },
      {
        "term": "終了インデックス (Stop Index)",
        "explanation": "スライス操作において、切り出しを終了する要素のインデックスです。このインデックスの要素は含まれません（`終了インデックス - 1` の要素までが含まれる）。省略するとシーケンスの末尾までとなります。",
        "category": "シーケンス (Sequence)"
      },
      {
        "term": "ストライド (Stride)",
        "explanation": "スライス操作において、要素を何ステップごとに取得するかを指定する値です。デフォルトは `1` です。負の値を指定すると、シーケンスを逆順にたどります。",
        "category": "シーケンス (Sequence)"
      },
      {
        "term": "メソッド (Method)",
        "explanation": "オブジェクトに紐付けられた関数のことです。特定のデータ型（文字列、リストなど）のオブジェクトに対して操作を行うために使用されます。`オブジェクト.メソッド名()` の形式で呼び出されます。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "upperメソッド (upper method)",
        "explanation": "文字列オブジェクトのメソッドの一つで、文字列内のすべての小文字を大文字に変換した新しい文字列を返します。元の文字列は変更されません。",
        "category": "文字列メソッド (String Method)"
      },
      {
        "term": "lowerメソッド (lower method)",
        "explanation": "文字列オブジェクトのメソッドの一つで、文字列内のすべての大文字を小文字に変換した新しい文字列を返します。元の文字列は変更されません。",
        "category": "文字列メソッド (String Method)"
      },
      {
        "term": "startswithメソッド (startswith method)",
        "explanation": "文字列オブジェクトのメソッドの一つで、文字列が指定されたプレフィックス（先頭の文字列）で始まるかどうかを判定し、真偽値 (`True` または `False`) を返します。",
        "category": "文字列メソッド (String Method)"
      },
      {
        "term": "endswithメソッド (endswith method)",
        "explanation": "文字列オブジェクトのメソッドの一つで、文字列が指定されたサフィックス（末尾の文字列）で終わるかどうかを判定し、真偽値 (`True` または `False`) を返します。",
        "category": "文字列メソッド (String Method)"
      },
      {
        "term": "replaceメソッド (replace method)",
        "explanation": "文字列オブジェクトのメソッドの一つで、文字列内の指定された部分文字列を別の部分文字列に置換した新しい文字列を返します。元の文字列は変更されません。",
        "category": "文字列メソッド (String Method)"
      },
      {
        "term": "find",
        "explanation": "文字列オブジェクトのメソッド `str.find()` を指します。文字列内で指定された部分文字列が最初に見つかるインデックス（位置）を返します。見つからない場合は `-1` を返します。",
        "category": "文字列メソッド (String Method)"
      },
      {
        "term": "rfind",
        "explanation": "文字列オブジェクトのメソッド `str.rfind()` を指します。文字列内で指定された部分文字列が最後に見つかるインデックス（位置）を返します。見つからない場合は `-1` を返します。",
        "category": "文字列メソッド (String Method)"
      },
      {
        "term": "rindex",
        "explanation": "文字列オブジェクトのメソッド `str.rindex()` を指します。文字列内で指定された部分文字列が最後に見つかるインデックス（位置）を返します。見つからない場合は `ValueError` を発生させます。",
        "category": "文字列メソッド (String Method)"
      },
      {
        "term": "countメソッド (count method)",
        "explanation": "文字列オブジェクトのメソッド `str.count()` を指します。文字列内で指定された部分文字列が何回出現するかを数えて返します。",
        "category": "文字列メソッド (String Method)"
      },
      {
        "term": "SyntaxError",
        "explanation": "Pythonの文法的な誤り（コロンの忘れ、括弧の不一致など）によって発生する構文エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "TabError",
        "explanation": "インデントにタブとスペースが混在している場合に発生するエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "NameError",
        "explanation": "定義していない変数や関数を呼び出そうとした場合に発生する名前エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "TypeError",
        "explanation": "演算や関数に対して、不適切なデータ型のオブジェクトを使用した際に発生する型エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "ValueError",
        "explanation": "データ型は正しいが、その値が不適切（例: int(\"a\")）な場合に発生する値エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "IndexError",
        "explanation": "リストなどの範囲外のインデックスにアクセスした際に発生するインデックスエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "KeyError",
        "explanation": "辞書に存在しないキーを指定した際に発生するキーエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "AttributeError",
        "explanation": "オブジェクトに存在しない属性（メソッドや変数）を呼び出した際に発生する属性エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "ModuleNotFoundError",
        "explanation": "importしようとしたモジュールが見つからない場合に発生するモジュール未発見エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "ImportError",
        "explanation": "モジュールの一部インポート失敗（循環参照など）により発生するインポートエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "ZeroDivisionError",
        "explanation": "数値をゼロ（0）で割ろうとした場合に発生するゼロ除算エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "FileNotFoundError",
        "explanation": "存在しないファイルやディレクトリにアクセスしようとした際に発生するファイル未発見エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "PermissionError",
        "explanation": "ファイルやディレクトリへのアクセス権がない場合に発生する権限エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "OSError / IOError",
        "explanation": "OSレベルの入出力の問題（ディスク容量不足など）によって発生するOS/入出力エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "MemoryError",
        "explanation": "プログラムがコンピュータのメモリを使い果たした場合に発生するメモリエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "OverflowError",
        "explanation": "計算結果が数値型で表現できる限界を超えた場合に発生するオーバーフローエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "RecursionError",
        "explanation": "関数の再帰呼び出しが深すぎる場合に発生する再帰エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "UnboundLocalError",
        "explanation": "関数内で、ローカル変数に値が代入される前に参照しようとした場合に発生するローカル変数未束縛エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "AssertionError",
        "explanation": "assert文の条件式がFalseになった場合に発生するアサーションエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "NotImplementedError",
        "explanation": "まだ実装されていないメソッドが呼び出されたことを示すエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "StopIteration",
        "explanation": "イテレータがすべての要素を返し終わった際に発生するイテレーション停止エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "Exception",
        "explanation": "ほぼすべての組み込みエラーの基底クラスである例外です。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "BaseException",
        "explanation": "SystemExitなどを含む、すべての例外の最上位クラスである基底例外です。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "ArithmeticError",
        "explanation": "ZeroDivisionError, OverflowError などの基底クラスである数値計算エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "LookupError",
        "explanation": "IndexError, KeyError の基底クラスであるルックアップエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "RuntimeError",
        "explanation": "他のカテゴリに分類されない、一般的な実行時エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "SystemError",
        "explanation": "Pythonインタプリタ内部で発生したエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "EOFError",
        "explanation": "input()などが、データを読み込む前に入力の終わりに達した際に発生するEOFエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "UnicodeError",
        "explanation": "Unicode関連のエンコード/デコードエラーの基底クラスです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "UnicodeEncodeError",
        "explanation": "文字列を特定のバイト列に変換（エンコード）する際に失敗した場合に発生するUnicodeエンコードエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "UnicodeDecodeError",
        "explanation": "バイト列を文字列に変換（デコード）する際に失敗した場合に発生するUnicodeデコードエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "SystemExit",
        "explanation": "sys.exit() が呼び出された際に発生します。エラーというより正常な終了通知です。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "FileExistsError",
        "explanation": "既に存在するファイルやディレクトリを作成しようとした際に発生するファイル存在エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "IsADirectoryError",
        "explanation": "ファイル操作をディレクトリに対して行おうとした場合に発生するディレクトリエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "NotADirectoryError",
        "explanation": "ディレクトリ操作をファイルに対して行おうとした場合に発生する非ディレクトリエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "TimeoutError",
        "explanation": "システムレベルの操作（I/Oなど）が時間内に完了しなかった場合に発生するタイムアウトエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "ConnectionError",
        "explanation": "ネットワーク接続関連エラーの基底クラスです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "BrokenPipeError",
        "explanation": "パイプの片側が閉じているのに書き込もうとした場合に発生するパイプ破損エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "ConnectionAbortedError",
        "explanation": "接続が強制的に中断された場合に発生する接続中断エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "ConnectionRefusedError",
        "explanation": "相手のコンピュータが接続を拒否した場合に発生する接続拒否エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "ConnectionResetError",
        "explanation": "接続が相手によってリセットされた場合に発生する接続リセットエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "BlockingIOError",
        "explanation": "ノンブロッキングI/Oで、操作がブロックされる状況で発生するブロッキングI/Oエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "ChildProcessError",
        "explanation": "子プロセスの操作でエラーが発生した場合に発生する子プロセスエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "InterruptedError",
        "explanation": "処理がシグナルによって中断された場合に発生する割り込みエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "ProcessLookupError",
        "explanation": "指定されたプロセスが存在しない場合に発生するプロセス検索エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "StopAsyncIteration",
        "explanation": "非同期イテレータがすべての要素を返し終わった際に発生する非同期イテレーション停止エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "Warning",
        "explanation": "エラーではないが、問題の可能性があるコードへの警告を示す基底クラスです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "DeprecationWarning",
        "explanation": "廃止予定の古い機能が使われた際に発生する廃止予定警告です。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "ResourceWarning",
        "explanation": "ファイルを閉じ忘れるなど、リソースの不適切な利用があった場合に発生するリソース警告です。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "FutureWarning",
        "explanation": "将来のバージョンで意味が変わる構文が使われた際に発生する将来の変更警告です。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "BufferError",
        "explanation": "バッファ関連の操作（メモリの直接操作など）ができない場合に発生するバッファエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "FloatingPointError",
        "explanation": "浮動小数点計算でエラーが発生した場合に発生する浮動小数点エラーです。通常は発生しません。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "ReferenceError",
        "explanation": "弱参照が指していたオブジェクトが消滅した後にアクセスした場合に発生する弱参照エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "json.JSONDecodeError",
        "explanation": "JSON形式として不正な文字列をパースしようとした際に発生するJSONデコードエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "zipfile.BadZipFile",
        "explanation": "ZIPファイルが破損している、またはZIPファイルではない場合に発生する不正なZIPファイルエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "re.error",
        "explanation": "正規表現のパターンに文法的な誤りがある場合に発生する正規表現エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "socket.timeout",
        "explanation": "ソケット通信でタイムアウトが発生した場合に発生するソケットタイムアウトです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "socket.gaierror",
        "explanation": "ホスト名の解決（DNS検索）に失敗した場合に発生するアドレス情報エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "urllib.error.URLError",
        "explanation": "URLの形式が不正、またはサーバに接続できない場合に発生するURLエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "urllib.error.HTTPError",
        "explanation": "HTTPリクエストが失敗（404 Not Found, 500 Server Errorなど）した場合に発生するHTTPエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "subprocess.CalledProcessError",
        "explanation": "外部コマンドの実行がゼロ以外の終了コードで終了した場合に発生するサブプロセス呼び出しエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "subprocess.TimeoutExpired",
        "explanation": "外部コマンドの実行が指定時間内に完了しなかった場合に発生するサブプロセスタイムアウトです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "queue.Empty",
        "explanation": "空のキューから要素を取り出そうとした場合に発生するキュー空エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "queue.Full",
        "explanation": "満杯のキューに要素を追加しようとした場合に発生するキュー満杯エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "csv.Error",
        "explanation": "CSVファイルの読み書き中にフォーマットエラーが発生した場合に発生するCSVエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "configparser.Error",
        "explanation": "設定ファイル（.iniなど）の解析中にエラーが発生した場合に発生する設定パースエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "sqlite3.Error",
        "explanation": "sqlite3モジュール関連のエラーの基底クラスです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "sqlite3.IntegrityError",
        "explanation": "主キーの重複など、データベースの制約に違反した場合に発生する整合性エラーです（SQLite）。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "sqlite3.OperationalError",
        "explanation": "データベースファイルが見つからない、テーブルが存在しない場合などに発生する操作エラーです（SQLite）。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "struct.error",
        "explanation": "バイナリデータのパック/アンパックでエラーが発生した場合に発生するstructエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "pickle.PicklingError",
        "explanation": "オブジェクトをシリアライズ（バイト列に変換）できない場合に発生するPickle化エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "pickle.UnpicklingError",
        "explanation": "バイト列をオブジェクトにデシリアライズできない場合に発生するUnpickle化エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "ssl.SSLError",
        "explanation": "SSL/TLS通信でエラーが発生した場合（証明書の問題など）に発生するSSLエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "shutil.SameFileError",
        "explanation": "ファイルのコピー/移動で、移動元と移動先が同じファイルだった場合に発生する同一ファイルエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "statistics.StatisticsError",
        "explanation": "統計計算ができない（例: 空のデータで平均を求める）場合に発生する統計エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "tarfile.TarError",
        "explanation": "tarアーカイブの読み書きでエラーが発生した場合に発生するtarファイルエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "xml.parsers.expat.ExpatError",
        "explanation": "XMLの形式が不正でパースできない場合に発生するXMLパースエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "http.client.IncompleteRead",
        "explanation": "HTTPレスポンスを完全に受信する前に接続が切れた場合に発生する不完全な読み込みエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "asyncio.TimeoutError",
        "explanation": "asyncioを使った非同期処理がタイムアウトした場合に発生する非同期タイムアウトです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "asyncio.CancelledError",
        "explanation": "asyncioのタスクがキャンセルされた場合に発生する非同期キャンセルエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "concurrent.futures.TimeoutError",
        "explanation": "concurrent.futuresでの処理がタイムアウトした場合に発生するFutureタイムアウトです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "concurrent.futures.CancelledError",
        "explanation": "concurrent.futuresの処理がキャンセルされた場合に発生するFutureキャンセルエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "multiprocessing.ProcessError",
        "explanation": "multiprocessing関連のエラーの基底クラスです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "ipaddress.AddressValueError",
        "explanation": "不正なIPアドレス文字列をパースしようとした場合に発生するIPアドレス値エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "getopt.GetoptError",
        "explanation": "コマンドライン引数の解析に失敗した場合に発生するコマンドライン引数エラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "smtplib.SMTPException",
        "explanation": "SMTP（メール送信）プロトコルでのエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "tkinter.TclError",
        "explanation": "GUIライブラリTkinterの内部でエラーが発生した場合に発生するTcl/Tkエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "uuid.ParseError",
        "explanation": "UUIDとして不正な文字列をパースしようとした場合に発生するUUIDパースエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "wave.Error",
        "explanation": "WAV音声ファイルの処理でエラーが発生した場合に発生するwaveエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "xdrlib.Error",
        "explanation": "XDR（外部データ表現）のパック/アンパックでエラーが発生した場合に発生するXDRエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "zlib.error",
        "explanation": "zlib形式のデータの圧縮/解凍でエラーが発生した場合に発生するzlibエラーです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "requests.exceptions.RequestException",
        "explanation": "requestsライブラリの全般的なエラーの基底クラスです。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "requests.exceptions.HTTPError",
        "explanation": "HTTPステータスコードが4xxか5xxだった場合に発生するHTTPエラーです(requests)。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "requests.exceptions.ConnectionError",
        "explanation": "DNS障害や接続拒否など、ネットワーク接続の問題によって発生する接続エラーです(requests)。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "requests.exceptions.Timeout",
        "explanation": "リクエストがタイムアウトした場合に発生するタイムアウトです(requests)。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "numpy.AxisError",
        "explanation": "配列に存在しない軸（axis）を指定した場合に発生する軸エラーです(NumPy)。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "pandas.errors.EmptyDataError",
        "explanation": "空のデータソース（ファイルなど）を読み込もうとした場合に発生する空データエラーです(Pandas)。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "pandas.errors.ParserError",
        "explanation": "CSVなどのファイルの構造が不正で、解析に失敗した場合に発生するパースエラーです(Pandas)。",
        "category": "エラー/デバッグ (Error/Debug)"
      },
      {
        "term": "スクリプト (Script)",
        "explanation": "スクリプトとは、特定の処理を実行するために書かれた一連の命令が記述されたプログラムファイルのことです。Pythonの場合、`.py` 拡張子を持つファイルがスクリプトファイルです。このファイルをPythonインタプリタに渡すことで、記述された命令が上から順に実行されます。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "\"\"\"",
        "explanation": "`\"\"\"` は、三重クォート文字列を開始および終了するための記号です。特に、複数行にわたる文字列を記述する場合や、Docstringとして関数やクラスの説明を記述する際に使用されます。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "データ構造 (Data Structure)",
        "explanation": "データを効率的に格納、管理、アクセスするための特定の形式のことです。Pythonでは、リスト、タプル、辞書、集合などが代表的なデータ構造として提供されています。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "角括弧 (Square Brackets)",
        "explanation": "Pythonにおいて、リストの定義、リストや文字列などのシーケンスからの要素の取り出し、スライス操作などに使われる記号 `[]` のことです。",
        "category": "記号/構文 (Symbol/Syntax)"
      },
      {
        "term": "文字列を格納 (Store a string)",
        "explanation": "プログラミングにおいて、一連の文字（テキストデータ）をデータとして保持することです。通常、変数に文字列型として代入されます。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "list関数 (list function)",
        "explanation": "`list()` は、イテラブルなオブジェクト（タプル、文字列、範囲など）を新しいリストに変換するための組み込み関数です。",
        "category": "関数 (Function)"
      },
      {
        "term": "イテラブル (Iterable)",
        "explanation": "`for` ループなどで要素を一つずつ取り出すことができるオブジェクトの総称です。リスト、タプル、文字列、辞書、集合、rangeオブジェクトなどがイテラブルに該当します。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "id関数 (id function)",
        "explanation": "`id()` は、オブジェクトのメモリ上のID（識別番号）を返す組み込み関数です。このIDはオブジェクトの生存期間中一意であり、オブジェクトが同一であるかどうかを確認する際に利用できます。",
        "category": "関数 (Function)"
      },
      {
        "term": "[:]",
        "explanation": "リストやその他のシーケンスのすべての要素をコピー（シャローコピー）して新しいシーケンスを作成するスライス記法です。`list()` 関数で変換するのと同様に、新しいオブジェクトを生成します。",
        "category": "記号/構文 (Symbol/Syntax)"
      },
      {
        "term": "copyメソッド (copy method)",
        "explanation": "リストや辞書などのミュータブルなオブジェクトのシャローコピー（浅いコピー）を作成するためのメソッドです。元のオブジェクトとは異なる新しいオブジェクトを生成します。",
        "category": "メソッド (Method)"
      },
      {
        "term": "要素を追加 (Add an element)",
        "explanation": "リストやその他のコレクションデータ構造に新しい項目を付け加える操作のことです。リストでは `append()` や `insert()` メソッドが使われます。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "appendメソッド (append method)",
        "explanation": "リストの末尾に単一の要素を追加するためのリストメソッドです。",
        "category": "メソッド (Method)"
      },
      {
        "term": "extendメソッド (extend method)",
        "explanation": "リストの末尾に別のイテラブル（リストやタプルなど）のすべての要素を追加するためのリストメソッドです。",
        "category": "メソッド (Method)"
      },
      {
        "term": "len(リスト)",
        "explanation": "`len()` 組み込み関数を使って、リストに含まれる要素の数を取得する操作のことです。",
        "category": "関数 (Function)"
      },
      {
        "term": "空のリスト (Empty List)",
        "explanation": "要素を一つも含まないリストのことです。`[]` で表現されます。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "リストを連結 (Concatenate lists)",
        "explanation": "複数のリストを結合して一つの新しいリストを作成する操作のことです。`+` 演算子や `extend()` メソッドが使われます。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "要素を削除 (Remove an element)",
        "explanation": "リストやその他のコレクションデータ構造から項目を取り除く操作のことです。リストでは `del` 文、`pop()` メソッド、`remove()` メソッドが使われます。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "popメソッド (pop method)",
        "explanation": "リストの指定されたインデックスにある要素を削除し、その削除した要素の値を返すリストメソッドです。インデックスを指定しない場合は、末尾の要素を削除して返します。",
        "category": "メソッド (Method)"
      },
      {
        "term": "removeメソッド (remove method)",
        "explanation": "リスト内で最初に見つかった指定された値の要素を削除するリストメソッドです。値が見つからない場合は `ValueError` を発生させます。",
        "category": "メソッド (Method)"
      },
      {
        "term": "リストの途中に挿入 (Insert into a list)",
        "explanation": "リストの既存の要素の間に新しい要素を挿入する操作のことです。`insert()` メソッドが使われます。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "insertメソッド (insert method)",
        "explanation": "リストの指定されたインデックスに新しい要素を挿入するためのリストメソッドです。既存の要素は後ろにずれます。",
        "category": "メソッド (Method)"
      },
      {
        "term": "全ての要素を削除 (Clear all elements)",
        "explanation": "リストやその他のコレクションデータ構造内のすべての要素を取り除き、空にする操作のことです。リストでは `clear()` メソッドが使われます。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "clearメソッド (clear method)",
        "explanation": "リストのすべての要素を削除し、リストを空にするリストメソッドです。",
        "category": "メソッド (Method)"
      },
      {
        "term": "splitメソッド (split method)",
        "explanation": "文字列を区切り文字（デリミタ）で分割し、その部分文字列のリストを返す文字列メソッドです。",
        "category": "メソッド (Method)"
      },
      {
        "term": "joinメソッド (join method)",
        "explanation": "文字列のリスト（または他のイテラブル）の要素を、指定された文字列（セパレータ）で連結して一つの新しい文字列を生成する文字列メソッドです。",
        "category": "メソッド (Method)"
      },
      {
        "term": "len関数 (len function)",
        "explanation": "オブジェクトの長さ（要素の数）を返す組み込み関数です。文字列、リスト、タプル、辞書、集合など多くのコレクション型に適用できます。",
        "category": "関数 (Function)"
      },
      {
        "term": "要素数を返す (Return number of elements)",
        "explanation": "コレクションデータ構造に含まれる要素の総数を結果として返すことです。主に `len()` 関数が行う操作です。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "リストの要素を複製 (Duplicate list elements)",
        "explanation": "リストに含まれる要素のコピーを生成することです。これは、元のリストとは独立した新しいリストを作成する操作を指すことが多いです。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "要素の個数 (Number of elements)",
        "explanation": "コレクションデータ構造（リスト、タプルなど）に含まれる個々の項目の総数のことです。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "indexメソッド (index method)",
        "explanation": "リスト内で指定された値の要素が最初に見つかったインデックスを返すリストメソッドです。値が見つからない場合は `ValueError` を発生させます。",
        "category": "メソッド (Method)"
      },
      {
        "term": "要素のインデックス (Element Index)",
        "explanation": "シーケンス内の特定の要素が位置する番号（インデックス）のことです。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "sortメソッド (sort method)",
        "explanation": "リストの要素をその場で（インプレイスで）昇順または降順にソートするリストメソッドです。元のリストが変更されます。",
        "category": "メソッド (Method)"
      },
      {
        "term": "キーワード引数のreverse (reverse keyword argument)",
        "explanation": "`sort()` メソッドや `sorted()` 関数に渡すキーワード引数で、`reverse=True` と指定することで降順にソートするように指示できます。デフォルトは `False`（昇順）です。",
        "category": "関数 (Function)"
      },
      {
        "term": "sorted関数 (sorted function)",
        "explanation": "イテラブルなオブジェクトの要素をソートした新しいリストを返す組み込み関数です。元のイテラブルは変更されません。",
        "category": "関数 (Function)"
      },
      {
        "term": "ラムダ式 (Lambda Expression)",
        "explanation": "無名関数（名前のない関数）をその場で簡潔に定義するための構文です。`lambda 引数: 式` の形式で記述し、主に `map()` や `filter()`、`sorted()` などの高階関数に渡す小さな関数として利用されます。",
        "category": "関数 (Function)"
      },
      {
        "term": "丸括弧 (Parentheses)",
        "explanation": "Pythonにおいて、関数呼び出しの引数、演算の優先順位の指定、タプルの定義などに使用される括弧 `()` です。例えば、`print('Hello')` で関数に引数を渡したり、`result = (1 + 2) * 3` で計算順序を制御したり、`my_tuple = (1, 2, 3)` でタプルを作成したりします。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "tuple関数 (tuple function)",
        "explanation": "組み込み関数の一つで、引数に指定された反復可能オブジェクト（リストなど）をタプルに変換して返します。引数なしで呼び出すと空のタプルを作成します。",
        "category": "関数 (Function)"
      },
      {
        "term": "タプルを作成 (Create a tuple)",
        "explanation": "複数の値をカンマで区切り、全体を丸括弧 `()` で囲むか、`tuple()` 関数を使用することで作成します。要素が1つのタプルを作成する場合は、要素の後にカンマが必要です（例: `(1,)`）。",
        "category": "データ型 (Data Type)"
      },
      {
        "term": "パッキング (Packing)",
        "explanation": "複数の値を一つの変数にまとめて代入する操作で、Pythonがこれらの値を自動的にタプルに変換する機能です。例えば、`x = 1, 2, 3` とすると、`x` にはタプル `(1, 2, 3)` が代入されます。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "アンパッキング (Unpacking)",
        "explanation": "タプルやリストなどのシーケンス型オブジェクトの要素を、一度に複数の変数に展開して代入する操作です。左辺の変数と右辺のシーケンスの要素数が一致する必要があります。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "星付きの変数 (Starred variable)",
        "explanation": "アンパッキングの際に変数名の前に `*` をつけることで、シーケンス内の残りの要素すべてをリストとしてその変数にまとめて代入する機能です。これにより、要素数が不定なシーケンスを柔軟にアンパックできます。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "タプルA+タプルB",
        "explanation": "`+` 演算子を使用して二つ以上のタプルを結合し、新しいタプルを生成する操作です。元のタプルは変更されません。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "タプル*整数",
        "explanation": "`*` 演算子を使用して、タプルの要素を指定された整数回数だけ繰り返した新しいタプルを生成する操作です。例えば `(1, 2) * 3` は `(1, 2, 1, 2, 1, 2)` となります。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "整数*タプル",
        "explanation": "`*` 演算子を使用して、タプルの要素を指定された整数回数だけ繰り返した新しいタプルを生成する操作です。「タプル * 整数」と同じ結果になります。",
        "category": "演算子 (Operator)"
      },
      {
        "term": "len(タプル)",
        "explanation": "組み込み関数 `len()` を使用して、指定されたタプルに含まれる要素の総数を取得します。",
        "category": "関数 (Function)"
      },
      {
        "term": "min(タプル)",
        "explanation": "組み込み関数 `min()` を使用して、指定されたタプル内の最小の要素を返します。タプル内のすべての要素は比較可能である必要があります。",
        "category": "関数 (Function)"
      },
      {
        "term": "max(タプル)",
        "explanation": "組み込み関数 `max()` を使用して、指定されたタプル内の最大の要素を返します。タプル内のすべての要素は比較可能である必要があります。",
        "category": "関数 (Function)"
      },
      {
        "term": "タプル.count(値)",
        "explanation": "タプルのメソッドの一つで、引数に指定された値がタプル内にいくつ存在するかを数え、その数を返します。",
        "category": "メソッド (Method)"
      },
      {
        "term": "タプル.index(値)",
        "explanation": "タプルのメソッドの一つで、引数に指定された値がタプル内で最初に出現するインデックスを返します。値が見つからない場合は `ValueError` を発生させます。",
        "category": "メソッド (Method)"
      },
      {
        "term": "階層的な構造 (Hierarchical Structure)",
        "explanation": "データやコードが入れ子状に、木のような構造で整理されている状態を指します。ファイルシステムにおけるディレクトリ構造、Pythonのパッケージやモジュール構造、またはリストや辞書を組み合わせた複雑なデータ表現などで見られます。",
        "category": "基本概念 (Basic Concept)"
      },
      {
        "term": "timeitモジュール (timeit module)",
        "explanation": "Pythonの標準ライブラリの一つで、小さなコードスニペットの実行時間を正確に計測するために使用されます。コードのパフォーマンスを評価し、最適化する際に役立ちます。",
        "category": "モジュール (Module)"
      },
      {
        "term": "タプル内の要素検索 (in 演算子)",
        "explanation": "指定した値がタプルに含まれるかを確認します。計算速度はシーケンスの長さに比例して遅い傾向にあります。例: `2 in (1, 2, 3);` 結果: `True`",
        "category": "データ型操作 (タプル)"
      },
      {
        "term": "タプルの要素数取得 (len())",
        "explanation": "タプルの要素（項目の数）を返します。例: `len((1, 2, 3));` 結果: `3`",
        "category": "データ型操作 (タプル)"
      },
      {
        "term": "タプルのソート (sorted())",
        "explanation": "`sorted()` 関数はタプルの要素を並べ替えた新しいリストを返します。元のタプルは変更されません。",
        "category": "データ型操作 (タプル)"
      },
      {
        "term": "集合の要素追加 (add())",
        "explanation": "集合に1つの要素を追加します。集合に順序はないため、追加後の位置は不定です。集合は重複する要素を許容しないため、既存の要素を追加しても変化しません。例: `s = {1, 2}; s.add(3);` 結果: `{1, 2, 3}`",
        "category": "データ型操作 (集合)"
      },
      {
        "term": "集合の複数要素追加 (update())",
        "explanation": "別のイテラブルなオブジェクトから複数の要素を集合に追加します。重複する要素は無視されます。例: `s = {1, 2}; s.update({3, 4});` 結果: `{1, 2, 3, 4}`",
        "category": "データ型操作 (集合)"
      },
      {
        "term": "集合の要素削除 (remove()/discard())",
        "explanation": "指定した要素を集合から削除します。`remove()` は要素が存在しない場合に `KeyError` を発生させますが、`discard()` は要素が存在しない場合でも何もせず、エラーにはなりません。",
        "category": "データ型操作 (集合)"
      },
      {
        "term": "集合の要素削除と取得 (pop())",
        "explanation": "集合から任意の要素を1つ削除し、その要素を返します。集合は順序がないため、どの要素が削除されるかは不定です。集合が空の場合に呼び出すと `KeyError` が発生します。例: `s = {1, 2, 3}; val = s.pop();`",
        "category": "データ型操作 (集合)"
      },
      {
        "term": "集合の全要素削除 (clear())",
        "explanation": "集合内の全ての要素を削除し、集合を空にします。例: `s = {1, 2, 3}; s.clear();` 結果: `set()`",
        "category": "データ型操作 (集合)"
      },
      {
        "term": "集合の要素変更",
        "explanation": "集合は順序がないため、特定の場所の要素を上書きする概念はありません。要素を変更したい場合は、一度削除してから新しい要素を追加する必要があります。",
        "category": "データ型操作 (集合)"
      },
      {
        "term": "集合内の要素検索 (in 演算子)",
        "explanation": "指定した値が集合に含まれるかを確認します。ハッシュテーブルに基づいているため、計算速度は高速です。例: `2 in {1, 2, 3};` 結果: `True`",
        "category": "データ型操作 (集合)"
      },
      {
        "term": "集合の要素数取得 (len())",
        "explanation": "集合の要素（項目の数）を返します。例: `len({1, 2, 3});` 結果: `3`",
        "category": "データ型操作 (集合)"
      },
      {
        "term": "集合のソート (sorted())",
        "explanation": "`sorted()` 関数は集合の要素をリストとして並べ替えた新しいリストを返します。集合自体は順序を持たないため変更されません。",
        "category": "データ型操作 (集合)"
      },
      {
        "term": "辞書の要素追加/更新 (辞書[キー] = 値)",
        "explanation": "指定したキーに対応する値を設定します。キーが存在しない場合は新しい要素として追加され、キーが既存の場合はその値が上書きされます。例: `d = {'a':1}; d['b'] = 2;` 結果: `{'a':1, 'b':2}`。既存キーの更新例: `d = {'a':1}; d['a'] = 99;` 結果: `{'a':99}`",
        "category": "データ型操作 (辞書)"
      },
      {
        "term": "辞書の複数要素追加/更新 (update())",
        "explanation": "別の辞書やキーと値のペアのイテラブルを使って、現在の辞書を更新します。指定されたキーが既存の場合は値が上書きされ、存在しない場合は新しい要素が追加されます。例: `d = {'a':1}; d.update({'b':2});` 結果: `{'a':1, 'b':2}`",
        "category": "データ型操作 (辞書)"
      },
      {
        "term": "辞書の要素削除 (del 辞書[キー])",
        "explanation": "指定したキーとそのキーに対応する値を辞書から削除します。キーが存在しない場合は `KeyError` を発生させます。例: `d = {'a':1, 'b':2}; del d['b'];` 結果: `{'a':1}`",
        "category": "データ型操作 (辞書)"
      },
      {
        "term": "辞書の要素削除と取得 (pop(キー))",
        "explanation": "指定したキーとその値のペアを辞書から削除し、その値を返します。キーが存在しない場合はエラーになるか、指定されたデフォルト値を返します。例: `d = {'a':1, 'b':2}; val = d.pop('b');` 結果: `val=2, d={'a':1}`",
        "category": "データ型操作 (辞書)"
      },
      {
        "term": "辞書の全要素削除 (clear())",
        "explanation": "辞書内の全てのキーと値のペアを削除し、辞書を空にします。例: `d = {'a':1, 'b':2}; d.clear();` 結果: `{}`",
        "category": "データ型操作 (辞書)"
      },
      {
        "term": "辞書の要素取得 (辞書[キー]/get(キー))",
        "explanation": "指定したキーに対応する値を取得します。`辞書[キー]` の形式はキーが存在しない場合に `KeyError` を発生させますが、`get(キー)` メソッドはキーが存在しない場合に `None` を返すか、デフォルト値を指定できます。例: `d = {'a':1}; val = d.get('a');` 結果: `1`",
        "category": "データ型操作 (辞書)"
      },
      {
        "term": "辞書内のキー検索 (in 演算子)",
        "explanation": "指定したキーが辞書に含まれるかを確認します。ハッシュテーブルに基づいているため、計算速度は高速です。例: `'a' in {'a':1};` 結果: `True`",
        "category": "データ型操作 (辞書)"
      },
      {
        "term": "辞書の要素数取得 (len())",
        "explanation": "辞書内のキーと値のペアの数（項目数）を返します。例: `len({'a':1, 'b':2});` 結果: `2`",
        "category": "データ型操作 (辞書)"
      },
      {
        "term": "辞書のキーのソート (sorted())",
        "explanation": "`sorted()` 関数は辞書のキーを並べ替えた新しいリストを返します。辞書自体は（Python 3.7以降で挿入順を保持するものの）ソートされた状態にはなりません。",
        "category": "データ型操作 (辞書)"
      },
      {
        "term": "if文 (if-statement)",
        "explanation": "プログラミングにおいて、「もし（if）○○という条件を満たしているなら、××という処理をする」というように、条件によって処理の流れを変えるための命令です。天気予報で「もし晴れなら、洗濯をする」と考えるのに似ています。",
        "category": "条件分岐"
      },
      {
        "term": "条件分岐 (Conditional Branch)",
        "explanation": "プログラムが特定の条件にもとづいて、次に実行する処理を決めることです。if文などがその代表的な命令で、「Aという条件なら処理1を、Bという条件なら処理2を実行する」といったように、道筋を分ける役割を持ちます。",
        "category": "条件分岐"
      },
      {
        "term": "input関数 (input function)",
        "explanation": "プログラムを実行しているユーザーに、キーボードから文字などを入力してもらうための命令（関数）です。 プログラムがユーザーに質問を投げかけ、その答えを受け取るような対話的な動きを実現できます。",
        "category": "入出力"
      },
      {
        "term": "プロンプト (Prompt)",
        "explanation": "input関数を使う際に、ユーザーに何を入力してほしいかを示すために表示するメッセージのことです。「お名前を入力してください：」のような、入力を促す案内のテキストを指します。",
        "category": "入出力"
      },
      {
        "term": "else節 (else clause)",
        "explanation": "if文の条件が満たされなかった（Falseだった）場合に実行される処理のまとまりです。「もし晴れなら洗濯、そうでなければ（else）部屋干し」のように、条件に合わなかった場合の代替案を指定します。",
        "category": "条件分岐"
      },
      {
        "term": "elif節 (elif clause)",
        "explanation": "「else if」の略で、最初のif文の条件が満たされず、かつ、次の別の条件を確かめたいときに使います。「もし晴れなら洗濯、そうでなくもし曇りなら（elif）買い物、そうでなければ部屋干し」のように、複数の条件を順番に試すことができます。",
        "category": "条件分岐"
      },
      {
        "term": "条件式 (Conditional Expression)",
        "explanation": "if文などで使われる、「AはBより大きい」や「CはDと等しい」といった、正しい（True）か間違っている（False）かを判断できる式のことです。この式の結果によって、プログラムの次の動きが決まります。",
        "category": "条件分岐"
      },
      {
        "term": "三項演算子 (Ternary Operator)",
        "explanation": "if-else文を一行でシンプルに書くための特別な書き方です。「条件が正しいときの値 if 条件式 else 条件が間違いだったときの値」という形で記述します。",
        "category": "条件分岐"
      },
      {
        "term": "条件XがTrueならA、偽なら条件YがTrueならB、偽ならC",
        "explanation": "これは、if-elif-else文の構造を言葉で説明したものです。プログラムでは「if X: A elif Y: B else: C」のように書かれ、複数の条件を順番に評価して、最初にあてはまった処理を実行します。",
        "category": "条件分岐"
      },
      {
        "term": "for文 (for-loop)",
        "explanation": "リストや文字列など、複数の要素が集まったデータの中から、要素を一つずつ順番に取り出して、同じ処理を繰り返すための命令です。 「生徒名簿の各生徒に対して、名前を読み上げる」のような処理に使われます。",
        "category": "繰り返し"
      },
      {
        "term": "繰り返し (Iteration / Loop)",
        "explanation": "プログラミングにおいて、同じ、あるいは似たような処理を何度も実行することです。「ループ」とも呼ばれます。for文やwhile文がそのための代表的な命令です。",
        "category": "繰り返し"
      },
      {
        "term": "foreach文 (foreach-loop)",
        "explanation": "他のプログラミング言語でよく使われる、データのかたまりから要素を一つずつ取り出して処理を繰り返す命令のことです。Pythonでは、for文がこの役割を担っています。",
        "category": "繰り返し"
      },
      {
        "term": "for文の文字列 (for-loop with string)",
        "explanation": "for文を使って、文字列の中から一文字ずつデータを取り出して処理を繰り返すことです。例えば、「hello」という文字列に対してfor文を使うと、「h」「e」「l」「l」「o」の順に処理が行われます。",
        "category": "繰り返し"
      },
      {
        "term": "for文のリスト (for-loop with list)",
        "explanation": "for文を使って、リスト（複数のデータを順番に並べたもの）の中から、要素を一つずつ先頭から取り出して処理を繰り返すことです。 これにより、リスト内の全データに対して同じ操作を簡単に行えます。",
        "category": "繰り返し"
      },
      {
        "term": "removeメソッド (remove method)",
        "explanation": "リストから指定した値を持つ最初の要素を削除するための命令（メソッド）です。ループ処理の中で特定の条件に合う要素を取り除く際などに使われますが、ループ中の削除は注意が必要です。",
        "category": "リスト操作"
      },
      {
        "term": "copyメソッド (copy method)",
        "explanation": "リスト全体のコピー（複製）を作成するための命令（メソッド）です。元のリストを変更せずに、コピーしたリストに対してループ処理や変更を加えたい場合に使います。",
        "category": "リスト操作"
      },
      {
        "term": "for文のタプル (for-loop with tuple)",
        "explanation": "for文を使って、タプル（変更できないリストのようなもの）の中から、要素を一つずつ先頭から取り出して処理を繰り返すことです。基本的な使い方はリストの場合と同じです。",
        "category": "繰り返し"
      },
      {
        "term": "for文の集合 (for-loop with set)",
        "explanation": "for文を使って、集合（重複する値を持たない、順序のないデータの集まり）の中から、要素を一つずつ取り出して処理を繰り返すことです。順序がないため、取り出される順番は決まっていません。",
        "category": "繰り返し"
      },
      {
        "term": "for文の辞書 (for-loop with dictionary)",
        "explanation": "for文を使って、辞書（キーと値のペアでデータを管理するもの）の各要素に対して処理を繰り返すことです。単純にfor文を使うとキーが一つずつ取り出されますが、itemsメソッドを使うとキーと値をペアで取り出せます。",
        "category": "繰り返し"
      },
      {
        "term": "辞書[キー]",
        "explanation": "辞書データの中から、指定した「キー」に対応する「値」を取り出すための書き方です。例えば、「'名前': '田中'」というデータがある辞書で「辞書['名前']」とすると、「田中」という値が取得できます。",
        "category": "辞書操作"
      },
      {
        "term": "itemsメソッド (items method)",
        "explanation": "辞書の「キー」と「値」をペアのセットとして取り出すための命令（メソッド）です。 for文と組み合わせることで、キーと値を同時に使いながら繰り返し処理ができます。",
        "category": "辞書操作"
      },
      {
        "term": "range関数 (range function)",
        "explanation": "「0から9まで」のような、連続した数値のデータを作り出すための命令（関数）です。 for文と組み合わせて、「処理を10回繰り返す」といった回数を指定した繰り返しを簡単に行うことができます。",
        "category": "繰り返し"
      },
      {
        "term": "rangeオブジェクト (range object)",
        "explanation": "range関数によって作られる、連続した数値のルールを持つ特殊なデータのことです。 見た目はリストのようですが、実際に全ての数値をメモリ上に保持しているわけではないため、非常に大きな範囲を指定してもメモリを消費しにくいという特徴があります。",
        "category": "繰り返し"
      },
      {
        "term": "キーワード引数のend",
        "explanation": "print関数で何かを表示する際に、通常は最後に自動で改行されますが、その改行を別の文字に変えるための設定です。例えば `end=''` と指定すると、改行せずに続けて次の表示ができます。",
        "category": "入出力"
      },
      {
        "term": "ネスト(ネスティング) / Nesting",
        "explanation": "ある構造の内側に、さらに同じ種類の構造を入れることです。例えば、if文の中にさらにif文を書いたり、for文の中にさらにfor文を書いたりすることを指します。「入れ子」とも言います。",
        "category": "プログラミング構造"
      },
      {
        "term": "多重ループ (Nested Loop)",
        "explanation": "繰り返し処理（ループ）の中に、さらに別の繰り返し処理を入れることです。ネストされたループ構造のことを指します。",
        "category": "繰り返し"
      },
      {
        "term": "二重ループ (Double Loop)",
        "explanation": "for文やwhile文といった繰り返し処理の中に、もう一つだけ繰り返し処理が入っている状態です。九九の表を作るような、縦と横の組み合わせで処理を行う場合によく使われます。",
        "category": "繰り返し"
      },
      {
        "term": "enumerate関数 (enumerate function)",
        "explanation": "for文でリストなどの繰り返し処理を行う際に、要素の値だけでなく、その要素が何番目かという「インデックス番号（カウント）」も同時に取得できるようにする命令（関数）です。",
        "category": "繰り返し"
      },
      {
        "term": "カウント (Count)",
        "explanation": "enumerate関数を使ったときに得られる、要素の順番を示す番号（インデックス）のことです。通常、0から始まります。",
        "category": "繰り返し"
      },
      {
        "term": "要素の値 (Element Value)",
        "explanation": "リストやタプルなどの中に入っている個々のデータのことです。enumerate関数を使うと、この要素の値と、そのカウント（インデックス）をセットで取り出すことができます。",
        "category": "データ構造"
      },
      {
        "term": "reversed関数 (reversed function)",
        "explanation": "リストなどのシーケンスの要素を、逆順に取り出すための命令（関数）です。for文と組み合わせることで、後ろから順番に処理を行うことができます。",
        "category": "繰り返し"
      },
      {
        "term": "while文 (while-loop)",
        "explanation": "指定した条件が満たされている（Trueの）間、ずっと同じ処理を繰り返し続けるための命令です。 for文が回数を指定する繰り返しなのに対し、while文は条件で繰り返すのが特徴です。",
        "category": "繰り返し"
      },
      {
        "term": "continue文 (continue statement)",
        "explanation": "繰り返し処理（for文やwhile文）の途中でこの命令を実行すると、その回の残りの処理をスキップして、次の繰り返しに移ります。 「特定の条件の時だけ処理を飛ばしたい」場合に便利です。",
        "category": "繰り返し制御"
      },
      {
        "term": "break文 (break statement)",
        "explanation": "繰り返し処理（for文やwhile文）の途中でこの命令を実行すると、ループを完全に中断し、次の処理へ抜けます。 「特定の条件になったら、繰り返しをもう終えたい」場合に使います。",
        "category": "繰り返し制御"
      },
      {
        "term": "無限ループ (Infinite Loop)",
        "explanation": "while文などで指定した条件が常に満たされてしまい、繰り返しが永遠に終わらなくなってしまう状態のことです。 プログラムが応答しなくなる原因になるため、意図しない無限ループは避ける必要があります。",
        "category": "繰り返し"
      },
      {
        "term": "pass文 (pass statement)",
        "explanation": "「何もしない」ということを示すためだけの命令です。 文法的には何かを書かなければいけないけれど、まだ処理内容が決まっていない場合や、あえて何もしないことを明示したい場合などに、場所を埋めるために使われます。",
        "category": "繰り返し制御"
      },
      {
        "term": "プレースホルダー (Placeholder)",
        "explanation": "後から実際に入力される値やデータのために、一時的に場所を確保しておく仮の文字列や値のことです。 例えば、Webサイトの入力フォームで「お名前を入力」のように薄い文字で表示されるテキストや、プログラミングで後から値が設定される変数などを指します。 ユーザーに入力内容のヒントを与えたり、プログラムの構造を先に作っておく際に便利です。",
        "category": "繰り返し制御"
      },
      {
        "term": "仮引数 (Parameter)",
        "explanation": "関数を定義するときに、受け取る値を入れるために仮に置かれる名前（変数名）のことです。 例えば `def add(x, y):` の `x` と `y` が仮引数にあたります。※英語では parameter と呼び、関数定義側で使います。",
        "category": "関数の定義"
      },
      {
        "term": "実引数 (Argument)",
        "explanation": "関数を呼び出すときに、実際に渡す値やデータのことです。 例えば `add(5, 3)` のように関数を呼び出す際の `5` と `3` が実引数です。※英語では argument と呼び、関数呼び出し側で使います。",
        "category": "関数の定義"
      },
      {
        "term": "return文 (return statement)",
        "explanation": "関数の中での処理結果を、その関数を呼び出した元に返すための命令です。 `return` が実行されると、関数の処理はその時点で終了します。",
        "category": "関数の定義"
      },
      {
        "term": "*イテラブル (*iterable)",
        "explanation": "リストやタプルのような複数の要素を持つデータ（イテラブル）の前にアスタリスク `*` を付けて、その中身を展開することです。主に関数の引数として、リストの各要素を個別の引数として渡したい場合などに使われます。",
        "category": "特殊な引数"
      },
      {
        "term": "イテラブルアンパッキング (Iterable Unpacking)",
        "explanation": "リストやタプルなど、複数の要素を持つデータ（イテラブル）の中身を、一度に複数の変数に代入することです。例えば `my_list = [1, 2, 3]` があるとき、 `a, b, c = my_list` と書くと、aには1、bには2、cには3がそれぞれ代入されます。",
        "category": "プログラミング基礎"
      },
      {
        "term": "引数名=値",
        "explanation": "キーワード引数の書き方そのものを指します。関数を呼び出す際に、どの引数（パラメータ）にどの値を渡すかを明確に指定する方法です。",
        "category": "関数の引数"
      },
  {
        "term": "**辞書 (**dictionary)",
        "explanation": "辞書（キーと値のペアを持つデータ）の前にアスタリスクを2つ `**` 付けて、その中身をキーワード引数として展開することです。 これにより、辞書のキーが引数名、値がその引数の値として関数に渡されます。",
        "category": "特殊な引数"
      },
      {
        "term": "辞書アンパッキング (Dictionary Unpacking)",
        "explanation": "辞書データの前にアスタリスクを2つ `**` を付けて、キーと値をキーワード引数として関数に渡すことです。 例えば `params = {'a': 1, 'b': 2}` があるとき、`my_func(**params)`と書くと `my_func(a=1, b=2)` と同じ意味になります。",
        "category": "特殊な引数"
      },
      {
        "term": "デフォルト値 (Default Value)",
        "explanation": "関数の引数を定義する際に、あらかじめ設定しておく初期値のことです。 関数呼び出し時にその引数が省略された場合、このデフォルト値が自動的に使用されます。",
        "category": "関数の引数"
      },
      {
        "term": "可変長引数 (Arbitrary Arguments)",
        "explanation": "関数の引数の数が決まっていないときに使われる機能で、任意の数の引数を受け取ることができます。 `*args`（位置引数用）と`**kwargs`（キーワード引数用）の2種類があります。",
        "category": "特殊な引数"
      },
      {
        "term": "*引数 (*args)",
        "explanation": "任意の数の「位置引数」をタプルとしてまとめて受け取るための引数です。 慣例的に `*args` という名前が使われます。",
        "category": "特殊な引数"
      },
      {
        "term": "**引数 (**kwargs)",
        "explanation": "任意の数の「キーワード引数」を辞書としてまとめて受け取るための引数です。 慣例的に `**kwargs` という名前が使われます。",
        "category": "特殊な引数"
      },
      {
        "term": "キーワード専用引数 (Keyword-Only Argument)",
        "explanation": "関数を呼び出す際に、必ず「キーワード引数（引数名=値）」の形で指定しなければならない引数のことです。 関数の定義で、引数リストの中にアスタリスク `*` を置くと、それ以降に定義された引数がキーワード専用になります。",
        "category": "特殊な引数"
      },
      {
        "term": "位置専用引数 (Positional-Only Argument)",
        "explanation": "関数を呼び出す際に、必ず「位置引数」として順番通りに指定しなければならない引数のことです。 関数の定義で、引数リストの中にスラッシュ `/` を置くと、それより前に定義された引数が位置専用になります。",
        "category": "特殊な引数"
      },
      {
        "term": "スコープ (Scope)",
        "explanation": "変数がプログラムのどの範囲で有効かを示す境界線のことです。「この変数はここからここまでしか使えない」という縄張りのようなものです。スコープを意識することで、意図しない場所で変数が書き換えられてしまうといったバグを防ぐことができます。",
        "category": "変数とスコープ"
      },
      {
        "term": "グローバル変数 (Global Variable)",
        "explanation": "プログラムのどこからでもアクセスできる変数のことです。いわば「共有の掲示板」のようなもので、どこからでも書き換えたり参照したりできますが、多用するとどこで変更されたか分からなくなり、管理が難しくなることがあります。",
        "category": "変数とスコープ"
      },
      {
        "term": "ローカル変数 (Local Variable)",
        "explanation": "特定の範囲（例えば関数の中）でしか使えない変数のことです。その範囲の外からはアクセスできないため、他の場所への影響を心配せずに使うことができます。",
        "category": "変数とスコープ"
      },
      {
        "term": "global文 (global statement)",
        "explanation": "関数の中から外側にあるグローバル変数の値を書き換えたいときに使う宣言です。「この変数はローカル変数ではなく、あのグローバル変数を指しています」とプログラムに教える役割があります。",
        "category": "変数とスコープ"
      },
      {
        "term": "nonlocal文 (nonlocal statement)",
        "explanation": "入れ子になった関数の内側の関数から、外側の関数のローカル変数を書き換えたいときに使う宣言です。global文と似ていますが、グローバル変数ではなく、より近い外側の関数の変数を対象とします。",
        "category": "変数とスコープ"
      },
      {
        "term": "クラス (Class)",
        "explanation": "オブジェクト（モノ）を作るための「設計図」や「金型」のことです。例えば「車」というクラスを定義すれば、色や名前が違うたくさんの「車」オブジェクトを効率的に作ることができます。",
        "category": "オブジェクト指向"
      },
      {
        "term": "オブジェクト (Object)",
        "explanation": "クラスという「設計図」に基づいて作られた、具体的な「モノ」のことです。データ（属性）と処理（メソッド）をひとまとめにしたもので、プログラムの中で実際に操作する対象となります。",
        "category": "オブジェクト指向"
      },
      {
        "term": "データと処理 (Data and Behavior)",
        "explanation": "オブジェクトが持つ二つの要素です。「データ (Data)」はそのオブジェクトの状態（色、名前など）を表し、「処理 (Behavior)」はそのオブジェクトができること（走る、止まるなど）を表します。オブジェクト指向では、これらを一つにまとめます。",
        "category": "オブジェクト指向"
      },
      {
        "term": "オブジェクト指向プログラミング (Object-Oriented Programming)",
        "explanation": "プログラムを「モノ」の集まりとして捉え、モノ同士の相互作用としてシステムを設計していく考え方です。現実世界の物事をモデルにしやすいため、大規模で複雑なプログラムの開発に向いています。",
        "category": "オブジェクト指向"
      },
      {
        "term": "属性 (Attribute)",
        "explanation": "オブジェクトが持っているデータ（情報）のことです。例えば「犬」オブジェクトであれば、「名前」「年齢」「犬種」などが属性にあたります。",
        "category": "オブジェクト指向"
      },
      {
        "term": "データ属性 (Data Attribute)",
        "explanation": "オブジェクトの状態を保持するための変数のことです。インスタンス変数とも呼ばれ、各オブジェクトがそれぞれ独自に持つことができます。",
        "category": "オブジェクト指向"
      },
      {
        "term": "メソッド (Method)",
        "explanation": "オブジェクトが行うことができる「処理」や「振る舞い」のことです。クラスの中に定義された関数のことで、そのクラスから作られたオブジェクトの属性を操作したりします。",
        "category": "オブジェクト指向"
      },
      {
        "term": "インスタンス (Instance)",
        "explanation": "クラスという設計図から作られた、具体的なオブジェクト（実体）のことです。「車」クラスから「青い車」や「赤い車」といったインスタンスが作られます。",
        "category": "オブジェクト指向"
      },
      {
        "term": "クラスオブジェクト (Class Object)",
        "explanation": "クラスそのものを表すオブジェクトです。クラスが定義されるとPython内部で生成され、そのクラスの属性（クラス属性）を保持したり、新しいインスタンスを生成する役割を持ちます。",
        "category": "オブジェクト指向"
      },
      {
        "term": "インスタンスオブジェクト (Instance Object)",
        "explanation": "クラスオブジェクトを呼び出す（インスタンス化する）ことで生成される、個々の具体的なオブジェクトのことです。それぞれが独立したデータ（インスタンス属性）を持つことができます。",
        "category": "オブジェクト指向"
      },
      {
        "term": "丸括弧()と角括弧[] (Parentheses and Brackets)",
        "explanation": "Pythonでは、丸括弧 `()` は主に関数を呼び出したり、タプルというデータ型（変更できないリスト）を作成する際に使われます。一方、角括弧 `[]` はリスト（変更可能な順序付きのデータ列）を作成したり、リストの特定の要素にアクセスする際に使われます。",
        "category": "Pythonの基本"
      },
      {
        "term": "独自のクラスを定義 (Define a custom class)",
        "explanation": "「class」というキーワードを使って、自分で新しいクラス（設計図）を作成することです。これにより、プログラムで扱いたい独自のデータ構造や振る舞いを定義できます。",
        "category": "クラスの定義"
      },
      {
        "term": "空のクラス (Empty Class)",
        "explanation": "中身が何もないクラスのことです。「pass」キーワードを使って定義します。最初は空でも、後から動的に属性やメソッドを追加することができます。",
        "category": "クラスの定義"
      },
      {
        "term": "__init__メソッド (__init__ method)",
        "explanation": "クラスからインスタンスが作られるときに、自動的に呼び出される特別なメソッドです。「初期化メソッド」や「コンストラクタ」とも呼ばれ、インスタンスが最初に持つべきデータ（属性）を設定するのによく使われます。",
        "category": "クラスの定義"
      },
      {
        "term": "データ属性を初期化 (Initialize data attributes)",
        "explanation": "__init__メソッドの中などで、インスタンスが作られた際にそのインスタンスが持つデータ属性に初期値を設定することです。これにより、インスタンスが「空っぽ」の状態で始まるのを防ぎます。",
        "category": "クラスの定義"
      },
      {
        "term": "self",
        "explanation": "クラスのメソッド内で、そのメソッドを呼び出しているインスタンス自身を指すための特別な引数です。「自分自身」と考えると分かりやすく、これを使ってインスタンスの属性や他のメソッドにアクセスします。",
        "category": "クラスの定義"
      },
      {
        "term": "独自のメソッドを定義 (Define a custom method)",
        "explanation": "クラスの中に、そのクラスのインスタンスが行う独自の処理（振る舞い）を関数として定義することです。最初の引数には必ず「self」を指定します。",
        "category": "メソッド"
      },
      {
        "term": "インスタンスメソッド (Instance Method)",
        "explanation": "クラスのインスタンスから呼び出される、最も一般的なメソッドです。第一引数にインスタンス自身（self）を受け取り、そのインスタンスの属性を操作することができます。",
        "category": "メソッド"
      },
      {
        "term": "静的メソッド (Static Method)",
        "explanation": "インスタンスやクラスの状態に依存しない処理を行うメソッドです。インスタンスの情報（self）もクラスの情報も必要としないため、単なる関数のように振る舞いますが、クラスに属しているため関連性が分かりやすくなります。",
        "category": "メソッド"
      },
      {
        "term": "クラスメソッド (Class Method)",
        "explanation": "インスタンスではなく、クラス自体から呼び出されるメソッドです。第一引数にクラス自身（cls）を受け取り、クラス属性を操作したり、クラスに関連する処理を行ったりするのに使われます。",
        "category": "メソッド"
      },
      {
        "term": "マングリング (Mangling)",
        "explanation": "クラスの属性名の前にアンダースコアを2つ付ける（例: __変数名）ことで、外部から直接アクセスしにくくする仕組みです。継承した子クラスで意図せず親クラスの属性を上書きしてしまうのを防ぐために使われます。",
        "category": "クラスの応用"
      },
      {
        "term": "クラス属性 (Class Attribute)",
        "explanation": "クラスに直接紐づけられた属性で、そのクラスから作られたすべてのインスタンスで共有されます。クラスの全インスタンスに共通する値を保持したい場合に使われます。",
        "category": "クラスの応用"
      },
      {
        "term": "派生 (Derivation)",
        "explanation": "既存のクラス（基底クラス）を元にして、新しいクラス（派生クラス）を作ることです。継承とも呼ばれ、基底クラスの機能を引き継ぎつつ、新しい機能を追加したり変更したりできます。",
        "category": "継承"
      },
      {
        "term": "基底クラス (Base Class)",
        "explanation": "継承の元となるクラスのことです。親クラスやスーパークラスとも呼ばれます。",
        "category": "継承"
      },
      {
        "term": "派生クラス (Derived Class)",
        "explanation": "基底クラスを継承して作られた新しいクラスのことです。子クラスやサブクラスとも呼ばれます。",
        "category": "継承"
      },
      {
        "term": "継承 (Inheritance)",
        "explanation": "あるクラスが別のクラスの機能（属性やメソッド）を引き継ぐ仕組みです。コードの再利用性を高め、効率的なプログラミングを可能にします。",
        "category": "継承"
      },
      {
        "term": "汎化 (Generalization)",
        "explanation": "複数のクラスに共通する性質を抜き出して、それらをまとめた親クラス（基底クラス）を作る考え方です。例えば、「犬」クラスと「猫」クラスから共通の性質を持つ「動物」クラスを作ることを指します。",
        "category": "継承"
      },
      {
        "term": "単一継承 (Single Inheritance)",
        "explanation": "一つのクラスが、一つの親クラスだけを継承することです。多くのオブジェクト指向言語で採用されているシンプルな継承方法です。",
        "category": "継承"
      },
      {
        "term": "多重継承 (Multiple Inheritance)",
        "explanation": "一つのクラスが、複数の親クラスを同時に継承することです。これにより、様々なクラスの機能を一度に引き継ぐことができますが、どの親クラスのメソッドを呼び出すかが複雑になる場合があります。",
        "category": "継承"
      },
      {
        "term": "オーバーライド (Override)",
        "explanation": "親クラスから継承したメソッドを、子クラスで同じ名前で再定義（上書き）することです。これにより、子クラス独自の振る舞いをさせることができます。",
        "category": "継承"
      },
      {
        "term": "super関数 (super function)",
        "explanation": "子クラスから親クラスのメソッドを呼び出す際に使う関数です。オーバーライドした子クラスのメソッドの中から、親クラスの同じメソッドを呼び出したい場合などによく利用されます。",
        "category": "継承"
      },
      {
        "term": "再帰 (Recursion)",
        "explanation": "ある関数が、その処理の内部で自分自身の関数を呼び出すことです。特定の条件を満たすまで処理を繰り返すような場合に用いられますが、終了条件を正しく設定しないと無限ループに陥ります。",
        "category": "プログラミング概念"
      },
      {
        "term": "新しいメソッドを追加 (Add a new method)",
        "explanation": "派生クラス（子クラス）に、基底クラス（親クラス）にはない独自の新しいメソッドを定義することです。これにより、継承した機能に加えて、派生クラスならではの振る舞いを追加できます。",
        "category": "継承"
      },
      {
        "term": "菱形継承(ダイヤモンド継承) / Diamond Inheritance",
        "explanation": "あるクラスが、共通の祖先を持つ2つの親クラスを多重継承する構造のことです。その継承関係を図にすると菱形に見えることからこう呼ばれます。",
        "category": "継承"
      },
      {
        "term": "菱形継承問題 (Diamond Problem)",
        "explanation": "菱形継承において、祖先クラスのメソッドが複数回呼び出されてしまう問題や、どの親クラスのメソッドを優先して呼び出すべきかが曖昧になる問題のことです。",
        "category": "継承"
      },
      {
        "term": "MRO (Method Resolution Order)",
        "explanation": "メソッド解決順序のことで、Pythonが多重継承されたクラスのメソッドを呼び出す際に、どの親クラスのメソッドから順番に探していくかを定めたルールのことです。",
        "category": "継承"
      },
      {
        "term": "__mro__属性 (__mro__ attribute)",
        "explanation": "クラスがどの順番でメソッドを探しに行くか（MRO）をタプルで確認できる、クラスが持つ特別な属性です。「クラス名.__mro__」とすることで、そのクラスのメソッド解決順序を見ることができます。",
        "category": "継承"
      },
      {
        "term": "例外 (Exception)",
        "explanation": "プログラムの実行中に発生するエラーのことです。例えば、0で割り算をしようとしたり、指定されたファイルが見つからなかったりすると発生します。プログラムは通常、例外が発生すると停止してしまいます。",
        "category": "例外処理"
      },
      {
        "term": "例外処理 (Exception Handling)",
        "explanation": "プログラムの実行中に例外（エラー）が発生したときに、プログラムが強制終了しないように備えておく仕組みのことです。「try-except」文などを使って、エラーが起きても別の処理を実行させることができます。",
        "category": "例外処理"
      },
      {
        "term": "エラー処理 (Error Handling)",
        "explanation": "例外処理と同様に、プログラムでエラーが発生した際の対応を決めておくことです。エラーが発生してもプログラムを安全に継続させたり、原因を特定しやすくしたりする目的で行われます。",
        "category": "例外処理"
      },
      {
        "term": "isnumericメソッド (isnumeric method)",
        "explanation": "文字列がすべて数字で構成されているかどうかを判定するための機能（メソッド）です。数字であればTrue（真）、そうでなければFalse（偽）を返します。ValueErrorを防ぐために、型変換の前にチェックする際によく使われます。",
        "category": "例外処理"
      },
      {
        "term": "try文 (try statement)",
        "explanation": "例外が発生する可能性のある処理を囲むための構文です。 この中に書いた処理でエラーが起きても、プログラムはすぐに止まらず、次に続くexcept節などで対応することができます。",
        "category": "例外処理"
      },
      {
        "term": "try節 (try clause)",
        "explanation": "try文の中で、例外が発生する可能性のある処理を記述するブロックのことです。",
        "category": "例外処理"
      },
      {
        "term": "except節 (except clause)",
        "explanation": "try節の中で例外が発生した場合に実行される処理を記述するブロックです。 どのような種類の例外（ValueErrorなど）をキャッチして、どう対応するかを指定できます。",
        "category": "例外処理"
      },
      {
        "term": "finally節 (finally clause)",
        "explanation": "try-except文の最後に置かれ、例外が発生したかどうかに関わらず、必ず実行される処理を記述するブロックです。 ファイルを閉じる処理や、データベースの接続を解除するなど、後片付けの処理によく使われます。",
        "category": "例外処理"
      },
      {
        "term": "try節とexcept節",
        "explanation": "例外処理の最も基本的な組み合わせです。try節でエラーが起きる可能性のある処理を囲み、except節でエラーが発生したときの対処を記述します。",
        "category": "例外処理"
      },
      {
        "term": "try節とexcept節とelse節",
        "explanation": "try節でエラーが発生しなかった場合に、特別な処理（else節）を追加する組み合わせです。エラーが起きた場合はexcept節が、起きなかった場合はelse節が実行されます。",
        "category": "例外処理"
      },
      {
        "term": "try節とexcept節とelse節とfinally節",
        "explanation": "例外処理のすべての要素を組み合わせた形です。エラー発生の有無に応じてexcept節かelse節が実行された後、最後に必ずfinally節が実行されます。",
        "category": "例外処理"
      },
      {
        "term": "try節とexcept節とfinally節",
        "explanation": "エラーが発生した場合（except節）でも、しなかった場合でも、最後に必ず実行したい処理（finally節）がある場合の組み合わせです。",
        "category": "例外処理"
      },
      {
        "term": "try節とfinally節",
        "explanation": "エラーの有無に関わらず、ある処理の後には必ず後片付け処理を行いたいが、エラー自体をここで処理（キャッチ）する必要はない、という場合に使われる組み合わせです。",
        "category": "例外処理"
      },
      {
        "term": "raise文 (raise statement)",
        "explanation": "プログラマーが意図的に例外を発生させるときに使う命令です。 特定の条件が満たされない場合に、エラーとして処理を中断させたいときなどに利用します。",
        "category": "例外処理"
      },
      {
        "term": "内包表記 (Comprehension)",
        "explanation": "リストや集合、辞書などのコレクションを、簡潔な1行のコードで作成するためのPython特有の書き方です。forループやif文を組み合わせて、効率的に新しいコレクションを生成できます。",
        "category": "内包表記"
      },
      {
        "term": "comprehension",
        "explanation": "「内包表記」の英語表現です。",
        "category": "内包表記"
      },
      {
        "term": "リストの内包表記 (List Comprehension)",
        "explanation": "forループやif文を使って、新しいリストを1行で生成する書き方です。 例えば、既存のリストの各要素を2倍にした新しいリストを簡単に作ることができます。",
        "category": "内包表記"
      },
      {
        "term": "集合の内包表記 (Set Comprehension)",
        "explanation": "リスト内包表記と同様に、集合（重複する値を持たないコレクション）を1行で生成する書き方です。波括弧 `{}` を使って記述します。",
        "category": "内包表記"
      },
      {
        "term": "辞書の内包表記 (Dictionary Comprehension)",
        "explanation": "キーと値のペアを持つ辞書を1行で生成する書き方です。 波括弧 `{}` の中で `キー: 値` の形で要素を記述します。",
        "category": "内包表記"
      },
      {
        "term": "ジェネレータ式 (Generator Expression)",
        "explanation": "リスト内包表記と似た構文ですが、角括弧 `[]` の代わりに丸括弧 `()` を使います。 一度に全ての要素をメモリに格納するのではなく、必要になるたびに一つずつ要素を生成するため、巨大なデータや無限のデータを扱う際にメモリを節約できる利点があります。",
        "category": "ジェネレータ"
      },
      {
        "term": "ジェネレータ関数 (Generator Function)",
        "explanation": "`yield`文を含む関数のことです。この関数を呼び出すと、すぐに処理を実行するのではなく、ジェネレータオブジェクトというものが返されます。このオブジェクトから、値を一つずつ取り出すことができます。",
        "category": "ジェネレータ"
      },
      {
        "term": "yield文 (yield statement)",
        "explanation": "ジェネレータ関数内で使われる、`return`に似た働きをする命令です。`yield`は値を返す際に処理を一時停止し、次に値が要求されたときにその停止した場所から処理を再開します。",
        "category": "ジェネレータ"
      },
      {
        "term": "yield from文 (yield from statement)",
        "explanation": "別のジェネレータやイテラブル（リストなど、反復可能なオブジェクト）から、値を一つずつ取り出して`yield`するための構文です。これにより、複数のジェネレータを簡単に連結できます。",
        "category": "ジェネレータ"
      },
      {
        "term": "lambda",
        "explanation": "ラムダ式を定義するために使うPythonのキーワードです。",
        "category": "ラムダ式とソート"
      },
      {
        "term": "無名関数 (Anonymous Function)",
        "explanation": "ラムダ式によって作られる、名前を持たない関数のことです。 `def`を使って名前を定義するほどでもない、一度きりの簡単な処理に使われることが多いです。",
        "category": "ラムダ式とソート"
      },
      {
        "term": "ソート (Sort)",
        "explanation": "リストなどの要素を、特定の順序（昇順や降順など）に並べ替えることです。",
        "category": "ラムダ式とソート"
      },
      {
        "term": "reverse",
        "explanation": "ソートの順序を指定するための引数の一つです。`reverse=True`とすると、降順（大きいものから小さいものへ）にソートされます。",
        "category": "ラムダ式とソート"
      },
      {
        "term": "ソートのキー (Sort Key)",
        "explanation": "ソートの基準となる値を指定するためのものです。`sorted`関数や`sort`メソッドの`key`引数に、値を変換する関数（ラムダ式がよく使われる）を指定することで、複雑な条件でのソートが可能になります。",
        "category": "ラムダ式とソート"
      },
      {
        "term": "代入式 (Assignment Expression)",
        "explanation": "Python 3.8から導入された新しい構文で、`:=`（セイウチ演算子）を使います。式の中で変数に値を代入できるため、コードをより簡潔に書ける場合があります。",
        "category": "その他"
      },
      {
        "term": ":=演算子 (Walrus Operator)",
        "explanation": "代入式で使われる演算子で、見た目がセイウチの顔に似ていることから「セイウチ演算子」とも呼ばれます。if文やwhile文の条件式内で値を評価しつつ、その値を後で使うために変数に代入する、といった使い方ができます。",
        "category": "その他"
      },
      {
        "term": "?:演算子",
        "explanation": "他のプログラミング言語（C言語など）でよく使われる「三項演算子」のことです。Pythonにはこの演算子はありませんが、「`値1 if 条件 else 値2`」という形で同様の処理を実現できます。",
        "category": "その他"
      },
      {
        "term": "assert文 (assert statement)",
        "explanation": "プログラムのデバッグ（バグの発見・修正）を助けるための機能です。 「この時点でこの条件は必ず真（True）であるはずだ」ということを表明するために使います。もし条件が偽（False）の場合、AssertionErrorという例外を発生させてプログラムを停止させます。",
        "category": "アサーション"
      },
      {
        "term": "AssertionError",
        "explanation": "assert文の条件式が偽（False）と評価されたときに発生する例外です。 プログラムがプログラマーの想定通りに動いていないことを示します。",
        "category": "アサーション"
      },
      {
        "term": "print関数 (print function)",
        "explanation": "指定した値や文字を画面に出力（表示）するための基本的な関数です。プログラムが正しく動いているか確認するためによく使われます。",
        "category": "入出力関数"
      },
      {
        "term": "format関数 (format function)",
        "explanation": "Python2.7やPython3で利用できる、文字列の中に変数の値を埋め込むための関数です。",
        "category": "文字列フォーマット"
      },
      {
        "term": "format関数の書式 '桁数'",
        "explanation": "指定した桁数で表示領域を確保します。例えば'{:5}'.format(123)とすると、5文字分のスペースに「123」が表示されます。",
        "category": "文字列フォーマット"
      },
      {
        "term": "format関数の書式 '<桁数'",
        "explanation": "確保した領域の中で、値を左揃えで表示します。例えば'{:<5}'.format(123)とすると、「123  」のように表示されます。",
        "category": "文字列フォーマット"
      },
      {
        "term": "format関数の書式 '>桁数'",
        "explanation": "確保した領域の中で、値を右揃えで表示します。例えば'{:>5}'.format(123)とすると、「  123」のように表示されます。",
        "category": "文字列フォーマット"
      },
      {
        "term": "format関数の書式 '^桁数'",
        "explanation": "確保した領域の中で、値を中央揃えで表示します。例えば'{:^5}'.format(123)とすると、「 123 」のように表示されます。",
        "category": "文字列フォーマット"
      },
      {
        "term": "小数点以下の桁数のみ指定 '.小数点以下桁数f'",
        "explanation": "数値を小数点以下の指定した桁数で表示します。例えば'{:.2f}'.format(3.14159)とすると、「3.14」と表示されます。",
        "category": "文字列フォーマット"
      },
      {
        "term": "全体と小数点以下の桁数を指定 '全体桁数.小数点以下桁数f'",
        "explanation": "全体の桁数と小数点以下の桁数を指定して数値を表示します。例えば'{:8.2f}'.format(3.14159)とすると、「    3.14」のように全体の幅を8文字にして表示します。",
        "category": "文字列フォーマット"
      },
      {
        "term": "千の位ごとにカンマを入れる ','",
        "explanation": "数値を3桁区切りのカンマ付きで表示します。例えば'{:,}'.format(1000000)とすると、「1,000,000」と表示されます。",
        "category": "文字列フォーマット"
      },
      {
        "term": "千の位ごとにアンダースコアを入れる '_'",
        "explanation": "数値を3桁区切りのアンダースコア付きで表示します。例えば'{:_}'.format(1000000)とすると、「1_000_000」と表示されます。",
        "category": "文字列フォーマット"
      },
      {
        "term": "formatメソッド (format method)",
        "explanation": "文字列の後ろに「.format()」とつけて、文字列中の{}に値を埋め込む機能です。 「'{}です'.format('猫')」と書くと「猫です」という文字列になります。",
        "category": "文字列フォーマット"
      },
      {
        "term": "formatメソッドの書式 {}",
        "explanation": "引数の値を順番に埋め込みます。'{}, {}'.format('A', 'B') は 'A, B' になります。",
        "category": "文字列フォーマット"
      },
      {
        "term": "formatメソッドの書式 {整数}",
        "explanation": "引数のインデックス（番号）を指定して値を埋め込みます。'{1}, {0}'.format('A', 'B') は 'B, A' になります。",
        "category": "文字列フォーマット"
      },
      {
        "term": "formatメソッドの書式 {引数名}",
        "explanation": "引数名を指定して値を埋め込みます。'{name}です'.format(name='山田') は '山田です' になります。",
        "category": "文字列フォーマット"
      },
      {
        "term": "オブジェクトの属性 {.属性名}",
        "explanation": "オブジェクト（データ）が持つ特定の情報（属性）を参照して埋め込みます。",
        "category": "文字列フォーマット"
      },
      {
        "term": "シーケンスの要素 {[インデックス]}",
        "explanation": "リストやタプルなどのシーケンス（順番のあるデータの集まり）の要素をインデックスで指定して埋め込みます。",
        "category": "文字列フォーマット"
      },
      {
        "term": "桁数などを指定して参照 {引数指定:書式指定}",
        "explanation": "埋め込む値に対して、桁数や揃え方などの書式を細かく指定する方法です。",
        "category": "文字列フォーマット"
      },
      {
        "term": "f文字列 (f-string)",
        "explanation": "文字列の前に 'f' を付けて、{}の中に直接変数名や式を書くことで値を埋め込める、より新しく直感的な書き方です。例えば f'私の名前は{name}です' のように使います。",
        "category": "文字列フォーマット"
      },
      {
        "term": "値の型を変換する関数",
        "explanation": "データの種類（型）を別の種類に変換するための関数群です。例えば文字列の'123'を数値の123に変換する、といった操作を行います。",
        "category": "型変換関数"
      },
      {
        "term": "データ構造を作成する関数",
        "explanation": "複数のデータをまとめて扱うための入れ物（データ構造）を作成する関数群です。",
        "category": "データ構造関数"
      },
      {
        "term": "list(イテラブル)",
        "explanation": "複数の値を順序付けて格納する「リスト」を作成します。リストは後から中身の変更が可能です。",
        "category": "データ構造関数"
      },
      {
        "term": "tuple(イテラブル)",
        "explanation": "複数の値を順序付けて格納する「タプル」を作成します。タプルは一度作成すると中身の変更ができません。",
        "category": "データ構造関数"
      },
      {
        "term": "set(イテラブル)",
        "explanation": "重複しない値の集まりである「集合」を作成します。順序はありません。",
        "category": "データ構造関数"
      },
      {
        "term": "dict(イテラブル)",
        "explanation": "キーと値のペアでデータを格納する「辞書」を作成します。高速な検索が可能です。",
        "category": "データ構造関数"
      },
      {
        "term": "bytes関数 (bytes function)",
        "explanation": "文字列などをバイト列（コンピューターが直接扱う0と1のデータに近い形式）に変換します。一度作成すると変更できません。",
        "category": "データ構造関数"
      },
      {
        "term": "bytearray関数 (bytearray function)",
        "explanation": "文字列などをバイト配列に変換します。bytesと似ていますが、こちらは後から中身を変更できます。",
        "category": "データ構造関数"
      },
      {
        "term": "memoryview関数 (memoryview function)",
        "explanation": "bytesなどのオブジェクトのデータをコピーせずに、メモリ上のデータに直接アクセスするための「メモリビュー」を作成します。 大量のデータを扱う際にメモリを節約し、処理を高速化できます。",
        "category": "データ構造関数"
      },
      {
        "term": "complex関数 (complex function)",
        "explanation": "実数部と虚数部から複素数を作成する関数です。数学や科学技術計算で使われます。",
        "category": "数値演算関数"
      },
      {
        "term": "frozenset関数 (frozenset function)",
        "explanation": "一度作成すると要素の追加や削除ができない、変更不可能な集合（セット）を作成します。 辞書のキーとして使えるなどの特徴があります。",
        "category": "データ構造関数"
      },
      {
        "term": "object関数 (object function)",
        "explanation": "何も機能を持たない、最も基本的なオブジェクトを生成します。クラスの基礎を学ぶ際に使われることがあります。",
        "category": "オブジェクト操作関数"
      },
      {
        "term": "slice関数 (slice function)",
        "explanation": "リストなどから一部分を取り出す（スライスする）際の範囲情報を持つオブジェクトを作成します。通常は[1:5]のように直接書くことが多いです。",
        "category": "シーケンス操作関数"
      },
      {
        "term": "divmod関数 (divmod function)",
        "explanation": "割り算の商（答え）と余りを同時に求め、タプルとして返します。例えばdivmod(10, 3)は(3, 1)になります。",
        "category": "数値演算関数"
      },
      {
        "term": "pow関数 (pow function)",
        "explanation": "べき乗を計算します。pow(2, 3)は2の3乗で8になります。",
        "category": "数値演算関数"
      },
      {
        "term": "round関数 (round function)",
        "explanation": "数値を四捨五入して、最も近い整数または指定した小数点以下の桁数に丸めます。",
        "category": "数値演算関数"
      },
      {
        "term": "sum関数 (sum function)",
        "explanation": "リストなどの数値のシーケンスの合計値を計算します。 オプションで初期値を設定することもできます。",
        "category": "数値演算関数"
      },
      {
        "term": "iter関数 (iter function)",
        "explanation": "リストなどから、要素を一つずつ取り出せる「イテレータ」というオブジェクトを作成します。",
        "category": "イテレータ関数"
      },
      {
        "term": "next関数 (next function)",
        "explanation": "イテレータから要素を一つずつ取り出します。次の要素がない場合はエラー（StopIteration）が発生します。",
        "category": "イテレータ関数"
      },
      {
        "term": "bin関数 (bin function)",
        "explanation": "整数を2進数の文字列に変換します。'0b'という接頭辞が付きます。",
        "category": "数値変換関数"
      },
      {
        "term": "oct関数 (oct function)",
        "explanation": "整数を8進数の文字列に変換します。'0o'という接頭辞が付きます。",
        "category": "数値変換関数"
      },
      {
        "term": "hex関数 (hex function)",
        "explanation": "整数を16進数の文字列に変換します。'0x'という接頭辞が付きます。",
        "category": "数値変換関数"
      },
      {
        "term": "chr関数 (chr function)",
        "explanation": "文字コード（Unicode）の数値を対応する文字に変換します。例えばchr(65)は'A'になります。",
        "category": "文字コード関数"
      },
      {
        "term": "ord関数 (ord function)",
        "explanation": "文字を対応する文字コード（Unicode）の数値に変換します。例えばord('A')は65になります。",
        "category": "文字コード関数"
      },
      {
        "term": "repr関数 (repr function)",
        "explanation": "オブジェクトを、Pythonが解釈できる公式な文字列表現に変換します。デバッグ時によく使われます。",
        "category": "オブジェクト情報関数"
      },
      {
        "term": "ascii関数 (ascii function)",
        "explanation": "オブジェクトを、ASCII文字（半角英数字など）だけで表現できる文字列に変換します。",
        "category": "オブジェクト情報関数"
      },
      {
        "term": "hash関数 (hash function)",
        "explanation": "オブジェクトのハッシュ値（内容を元に計算された固定長の数値）を返します。辞書のキーなどに利用されます。",
        "category": "オブジェクト情報関数"
      },
      {
        "term": "eval関数 (eval function)",
        "explanation": "文字列として書かれたPythonの式を実行し、その結果を返します。",
        "category": "動的実行関数"
      },
      {
        "term": "exec関数 (exec function)",
        "explanation": "文字列として書かれたPythonの文（プログラム）を実行します。evalと違い、値を返しません。",
        "category": "動的実行関数"
      },
      {
        "term": "compile関数 (compile function)",
        "explanation": "文字列のソースコードを、実行可能なコードオブジェクトに変換します。evalやexecと組み合わせて使われます。",
        "category": "動的実行関数"
      },
      {
        "term": "globals関数 (globals function)",
        "explanation": "プログラム全体で利用できるグローバル変数とその値を辞書として返します。",
        "category": "スコープ情報関数"
      },
      {
        "term": "locals関数 (locals function)",
        "explanation": "現在いる場所（スコープ）で利用できるローカル変数とその値を辞書として返します。",
        "category": "スコープ情報関数"
      },
      {
        "term": "callable関数 (callable function)",
        "explanation": "指定したオブジェクトが、関数のように呼び出し可能（()をつけて実行できる）かどうかを判定します。",
        "category": "オブジェクト情報関数"
      },
      {
        "term": "breakpoint関数 (breakpoint function)",
        "explanation": "プログラムの実行をその場で一時停止し、デバッガを起動するための関数です。プログラムのバグを見つけるのに役立ちます。",
        "category": "デバッグ関数"
      },
      {
        "term": "help関数 (help function)",
        "explanation": "関数やオブジェクトのヘルプ情報（使い方などの説明）を表示します。プログラミング中に関数の使い方を忘れたときに便利です。",
        "category": "ヘルプ関数"
      },
      {
        "term": "インポート (Import)",
        "explanation": "他のソフトウェアで作成されたデータやファイルを取り込んで、利用できるようにすることです。 例えば、あるプログラムで別の人が作った便利な機能（モジュール）を使いたい時にインポートします。",
        "category": "プログラミング一般"
      },
      {
        "term": "パッケージ (Package)",
        "explanation": "複数のモジュールをまとめたものです。 関連する機能を持つモジュールを一つのパッケージとして整理することで、大規模なプログラムでも管理しやすくなります。",
        "category": "プログラミング一般"
      },
      {
        "term": "import文 (import statement)",
        "explanation": "Pythonで他のモジュールやパッケージを読み込むために使う命令です。 これにより、他のファイルに書かれた機能（関数やクラスなど）を自分のプログラムで利用できるようになります。",
        "category": "Python"
      },
      {
        "term": "randomモジュール (random module)",
        "explanation": "Pythonで乱数を扱うための機能を提供するモジュールです。サイコロを振るように、ランダムな数を生成したい場合などに使われます。",
        "category": "Python"
      },
      {
        "term": "擬似乱数 (Pseudo-random number)",
        "explanation": "一見するとランダムに見えるが、実際には特定の計算式に基づいて生成される数値の列です。 コンピュータは完全にランダムな数を作ることが苦手なため、この擬似乱数が利用されます。",
        "category": "アルゴリズム"
      },
      {
        "term": "randint関数 (randint function)",
        "explanation": "Pythonのrandomモジュールに含まれる関数の一つで、指定した範囲内の整数をランダムに一つ生成します。例えば、「1から6までのランダムな整数」といった形でサイコロの目を表現するのに使えます。",
        "category": "Python"
      },
      {
        "term": "from節 (from clause)",
        "explanation": "import文と組み合わせて使い、モジュールの中から特定の機能だけを直接インポートするためのものです。例えば、「`from random import randint`」と書くと、randomモジュールの中からrandint関数だけを取り込んで、モジュール名を付けずに`randint()`として使えるようになります。",
        "category": "Python"
      },
      {
        "term": "urllib.parseモジュール (urllib.parse module)",
        "explanation": "URLを解析したり、構成要素を操作したりするための機能を提供するPythonのモジュールです。URLの文字列を各部分（プロトコル、ドメイン名、パスなど）に分割する際などに利用します。",
        "category": "Python"
      },
      {
        "term": "urlparse関数 (urlparse function)",
        "explanation": "urllib.parseモジュールに含まれる関数で、URLの文字列をパース（解析）して、その構成要素を個別の部分に分解します。",
        "category": "Python"
      },
      {
        "term": "choice関数 (choice function)",
        "explanation": "Pythonのrandomモジュールに含まれる関数で、リストやタプルなどの複数の要素の中からランダムに一つを選び出します。",
        "category": "Python"
      },
      {
        "term": "shuffle関数 (shuffle function)",
        "explanation": "Pythonのrandomモジュールに含まれる関数で、リストの要素の順番をランダムにシャッフル（かき混ぜ）します。",
        "category": "Python"
      },
      {
        "term": "timeモジュール (time module)",
        "explanation": "Pythonで時間に関する操作を行うための機能を提供する標準ライブラリです。 現在時刻の取得や、プログラムの実行を一定時間停止させることができます。",
        "category": "Python"
      },
      {
        "term": "time関数 (time function)",
        "explanation": "Pythonのtimeモジュールに含まれる関数で、基準となる時刻（1970年1月1日0時0分0秒）からの経過秒数を返します。主に処理時間の計測などに使われます。",
        "category": "Python"
      },
      {
        "term": "gmtime関数 (gmtime function)",
        "explanation": "Pythonのtimeモジュールに含まれる関数で、基準時刻からの経過秒数を、協定世界時（UTC）に基づいた日付や時刻のデータに変換します。",
        "category": "Python"
      },
      {
        "term": "localtime関数 (localtime function)",
        "explanation": "Pythonのtimeモジュールに含まれる関数で、基準時刻からの経過秒数を、コンピュータが設定されている地域の時刻（ローカルタイム）に合わせた日付や時刻のデータに変換します。",
        "category": "Python"
      },
      {
        "term": "sleep関数 (sleep function)",
        "explanation": "Pythonのtimeモジュールに含まれる関数で、指定した秒数だけプログラムの実行を一時的に停止させます。",
        "category": "Python"
      },
      {
        "term": "pipコマンド (pip command)",
        "explanation": "Pythonのパッケージ（ライブラリ）をインストールしたり、管理したりするためのツールです。 これを使うことで、世界中の開発者が作成した便利なライブラリを簡単に自分の環境に追加できます。",
        "category": "Python"
      },
      {
        "term": "Numpy",
        "explanation": "Pythonで数値計算を効率的に行うためのライブラリです。 特に、ベクトルや行列といった多次元配列の計算を高速に行うことができます。",
        "category": "Pythonライブラリ"
      },
      {
        "term": "pip install numpy",
        "explanation": "Numpyライブラリをインストールするためのpipコマンドです。このコマンドを実行することで、自分のPython環境でNumpyが使えるようになります。",
        "category": "コマンド"
      },
      {
        "term": "pip show numpy",
        "explanation": "インストールされているNumpyライブラリの詳細情報（バージョン、インストール場所など）を表示するためのpipコマンドです。",
        "category": "コマンド"
      },
      {
        "term": "pip list",
        "explanation": "現在インストールされているPythonのパッケージ（ライブラリ）の一覧を表示するpipコマンドです。",
        "category": "コマンド"
      },
      {
        "term": "pip uninstall -y ライブラリ名",
        "explanation": "指定したライブラリをアンインストールするためのpipコマンドです。-y オプションを付けると、アンインストール前の確認メッセージを省略して実行します。",
        "category": "コマンド"
      },
      {
        "term": "pip install --upgrade ライブラリ名",
        "explanation": "インストール済みのライブラリを最新バージョンにアップグレード（更新）するためのpipコマンドです。",
        "category": "コマンド"
      },
      {
        "term": "python -m pip install --upgrade pip",
        "explanation": "pipコマンド自体を最新バージョンにアップグレードするためのコマンドです。",
        "category": "コマンド"
      },
      {
        "term": "テキストファイルの読み書き",
        "explanation": "コンピューター上でメモ帳のように文字情報だけが記録されたファイル（テキストファイル）の内容を、プログラムで読み込んだり、新しい内容を書き込んだりすることです。日記を読んだり書いたりするのに似ています。",
        "category": "ファイル操作"
      },
      {
        "term": "with文 (with statement)",
        "explanation": "ファイルなどを開いた後に、処理が終わったら自動的に閉じてくれるPythonの便利な命令です。ドアを開けて部屋に入ったら、出るときに自動でドアが閉まるようなイメージで、後片付けを忘れる心配がありません。",
        "category": "ファイル操作"
      },
      {
        "term": "open関数 (open function)",
        "explanation": "ファイルを読み書きするために「開く」操作を行うPythonの命令（関数）です。本を読む前に表紙を開くのと同じように、ファイルも中身を操作する前にこの命令で開く必要があります。",
        "category": "ファイル操作"
      },
      {
        "term": "encoding",
        "explanation": "コンピューターが理解できる数値（0と1の世界）と、人間が使う文字（「あ」や「A」など）を対応させるための「翻訳ルール」のことです。このルールが違うと文字化けが起こります。",
        "category": "文字コード"
      },
      {
        "term": "encodingの例 utf-8",
        "explanation": "世界中のほとんどの言語の文字を扱える、現在最も標準的なエンコーディング（文字コード）です。Webページやプログラムのソースコードで広く利用されています。",
        "category": "文字コード"
      },
      {
        "term": "encodingの例 shift-jis",
        "explanation": "主に古いWindowsの日本語環境で使われていたエンコーディング（文字コード）です。昔の日本のソフトウェアやシステムで作成されたファイルなどで見られます。",
        "category": "文字コード"
      },
      {
        "term": "encodingの例 euc-jp",
        "explanation": "主に古いUnixやLinuxの日本語環境で使われていたエンコーディング（文字コード）です。",
        "category": "文字コード"
      },
      {
        "term": "encodingの例 iso-2022-jp",
        "explanation": "電子メールで日本語を送受信するために古くから使われているエンコーディング（文字コード）です。",
        "category": "文字コード"
      },
      {
        "term": "writeメソッド (write method)",
        "explanation": "ファイルに文字列を書き込むための命令（メソッド）です。ノートに鉛筆で文字を書く操作にあたります。",
        "category": "ファイル操作"
      },
      {
        "term": "readメソッド (read method)",
        "explanation": "ファイルの内容を読み込むための命令（メソッド）です。ファイル全体を一度に読み取って、一つの文字列として返します。",
        "category": "ファイル操作"
      },
      {
        "term": "CSVファイル (CSV file)",
        "explanation": "「Comma Separated Values」の略で、データをカンマ（,）で区切って並べたテキストファイル形式です。 Excelなどの表計算ソフトで開くことができ、異なるソフトウェア間でデータを交換する際によく利用されます。",
        "category": "ファイル操作 (CSV)"
      },
      {
        "term": "csvモジュール (csv module)",
        "explanation": "PythonでCSVファイルを簡単に読み書きするための便利な機能がまとめられた部品（モジュール）です。",
        "category": "ファイル操作 (CSV)"
      },
      {
        "term": "newline",
        "explanation": "open関数でファイルを書き込みモードで開く際に指定する引数の一つです。CSVファイルを扱う際に、意図しない空行が書き込まれるのを防ぐために `newline=''` と指定します。",
        "category": "ファイル操作 (CSV)"
      },
      {
        "term": "writerオブジェクト (writer object)",
        "explanation": "csvモジュールの命令で、CSVファイルにデータを書き込むための機能を持つオブジェクトです。このオブジェクトのメソッドを使って、一行ずつデータを書き込んでいきます。",
        "category": "ファイル操作 (CSV)"
      },
      {
        "term": "writerowsメソッド (writerows method)",
        "explanation": "writerオブジェクトが持つ、複数の行のデータを一度にCSVファイルへ書き込むための命令（メソッド）です。リストのリスト（二次元リスト）を渡すことで、まとめて書き込めます。",
        "category": "ファイル操作 (CSV)"
      },
      {
        "term": "writerowメソッド (writerow method)",
        "explanation": "writerオブジェクトが持つ、一行分のデータをCSVファイルへ書き込むための命令（メソッド）です。リストを渡すことで、その要素がカンマで区切られて一行として書き込まれます。",
        "category": "ファイル操作 (CSV)"
      },
      {
        "term": "readerオブジェクト (reader object)",
        "explanation": "csvモジュールの命令で、CSVファイルのデータを一行ずつ読み込むための機能を持つオブジェクトです。for文と組み合わせて使うと、一行ずつリストとしてデータを取り出せます。",
        "category": "ファイル操作 (CSV)"
      },
      {
        "term": "JSONファイル (JSON file)",
        "explanation": "JavaScriptのオブジェクトの書き方を元にした、データ交換用のテキストファイル形式です。 WebサービスやAPIで設定情報やデータをやり取りする際によく利用されます。",
        "category": "ファイル操作 (JSON)"
      },
      {
        "term": "jsonモジュール (json module)",
        "explanation": "PythonでJSON形式のデータを扱えるように、便利な機能がまとめられた標準ライブラリの部品（モジュール）です。",
        "category": "ファイル操作 (JSON)"
      },
      {
        "term": "dump関数 (dump function)",
        "explanation": "Pythonの辞書やリストなどのデータを、JSON形式の文字列に変換してファイルに書き込む（保存する）ための関数です。",
        "category": "ファイル操作 (JSON)"
      },
      {
        "term": "load関数 (load function)",
        "explanation": "JSONファイルを読み込んで、Pythonの辞書やリストなどのデータに変換するための関数です。",
        "category": "ファイル操作 (JSON)"
      },
      {
        "term": "Pillowライブラリ (Pillow library)",
        "explanation": "Pythonで画像を作成したり、リサイズや回転などの加工をしたりするための便利な機能がたくさん詰まった道具箱（ライブラリ）です。",
        "category": "画像処理"
      },
      {
        "term": "PIL.Imageモジュール (PIL.Image module)",
        "explanation": "Pillowライブラリの中心的なモジュールで、画像を扱うための様々なクラスや関数がまとめられています。",
        "category": "画像処理"
      },
      {
        "term": "new関数 (new function)",
        "explanation": "Pillowライブラリで、新しい画像をゼロから作成するための関数です。画像のモード（カラーか白黒かなど）やサイズを指定して、真っ新な画像を作ります。",
        "category": "画像処理"
      },
      {
        "term": "imageクラス (Image class)",
        "explanation": "Pillowライブラリで画像を表現するための設計図（クラス）です。画像ファイルを開いたり、新しく作成したりすると、このクラスのオブジェクト（実体）が作られます。",
        "category": "画像処理"
      },
      {
        "term": "RGB",
        "explanation": "Pillowライブラリで扱う画像のモードの一つで、光の三原色である赤（Red）、緑（Green）、青（Blue）を組み合わせて様々な色を表現するフルカラーの画像を意味します。",
        "category": "画像処理"
      },
      {
        "term": "RGBA",
        "explanation": "Pillowライブラリで扱う画像のモードの一つで、RGBの色の情報に加えて、透明度（Alpha）の情報も持っています。背景を透過させたい場合などに使われます。",
        "category": "画像処理"
      },
      {
        "term": "saveメソッド (save method)",
        "explanation": "Pillowライブラリで作成・加工した画像を、ファイルとして保存するための命令（メソッド）です。ファイル名や画像のフォーマット（JPEG、PNGなど）を指定できます。",
        "category": "画像処理"
      },
      {
        "term": "putpixelメソッド (putpixel method)",
        "explanation": "画像上の指定した座標（位置）のピクセル（点）に、特定の色を設定（配置）するための命令（メソッド）です。 これを繰り返すことで、画像に点を描画できます。",
        "category": "画像処理"
      },
      {
        "term": "globモジュール (glob module)",
        "explanation": "ファイルやフォルダの一覧を、ワイルドカード（`*`や`?`など）を使って条件を指定して取得するためのPythonのモジュールです。「特定のフォルダにあるテキストファイルだけ」といった探し方ができます。",
        "category": "ファイルシステム操作"
      },
      {
        "term": "recursive",
        "explanation": "globモジュールでファイルを探す際のオプションの一つです。これを`True`に設定すると、指定したフォルダの中だけでなく、その中にある全てのサブフォルダの中まで再帰的に（繰り返し）探しに行ってくれます。",
        "category": "ファイルシステム操作"
      },
      {
        "term": "shutilモジュール (shutil module)",
        "explanation": "ファイルやフォルダのコピー、移動、削除といった、より高度なファイル操作を行うための機能がまとめられたPythonのモジュールです。「shutil」は「shell utilities（シェルユーティリティ）」の略です。",
        "category": "ファイルシステム操作"
      },
      {
        "term": "osモジュール (os module)",
        "explanation": "オペレーティングシステム（WindowsやmacOSなど）が持つ機能、例えばフォルダを作成したり、ファイルやフォルダを操作したりするための命令がまとめられたPythonのモジュールです。",
        "category": "ファイルシステム操作"
      },
      {
        "term": "makedirs関数 (makedirs function)",
        "explanation": "`os.makedirs`関数のことです。指定したパスにフォルダ（ディレクトリ）を作成します。途中のフォルダが存在しない場合でも、まとめて作成してくれる便利な機能です。",
        "category": "ファイルシステム操作"
      },
      {
        "term": "removedirs関数 (removedirs function)",
        "explanation": "`os.removedirs`関数のことです。指定したパスのフォルダを削除します。途中の親フォルダが空であれば、それらも一緒に削除していきます。",
        "category": "ファイルシステム操作"
      },
      {
        "term": "コマンドライン引数 (Command Line Argument)",
        "explanation": "プログラムを実行するときに、外からプログラムに渡すことができる情報のことです。 自動販売機で飲み物を買うときに、先にお金やボタンで商品（情報）を指定するのに似ています。",
        "category": "コマンドライン操作"
      },
      {
        "term": "sysモジュール (sys module)",
        "explanation": "Pythonのインタプリタや実行環境に関する情報を扱ったり、操作したりするための機能がまとめられたモジュールです。",
        "category": "コマンドライン操作"
      },
      {
        "term": "argv属性 (argv attribute)",
        "explanation": "sysモジュールが持つ属性の一つで、コマンドライン引数をリストとして格納しています。リストの最初の要素（`sys.argv[0]`）は実行したプログラムのファイル名、それ以降にコマンドラインで渡された引数が順番に格納されます。",
        "category": "コマンドライン操作"
      },
      {
        "term": "Excelの仕事を自動化する",
        "explanation": "人間が手作業で行っていたExcelの定型的な作業（データの入力、集計、グラフ作成など）を、プログラムを使って自動的に処理させることです。これにより、作業時間の短縮やミスの削減が期待できます。",
        "category": "Excel操作"
      },
      {
        "term": "VBA",
        "explanation": "「Visual Basic for Applications」の略で、ExcelなどのMicrosoft Office製品に搭載されているプログラミング言語です。Excel上での様々な操作を自動化するために使われます。",
        "category": "Excel操作"
      },
      {
        "term": "openpyxlモジュール (openpyxl module)",
        "explanation": "PythonでExcelファイル（.xlsx形式）を読み書きするための非常に人気のあるライブラリです。 Excelを直接開かずに、プログラムでセルの値を読み取ったり、新しいデータを書き込んだりできます。",
        "category": "Excel操作"
      },
      {
        "term": "Workbookクラス (Workbook class)",
        "explanation": "openpyxlにおいて、Excelファイル全体（ワークブック）を表すための設計図（クラス）です。 ファイルを読み込んだり、新規作成したりすると、このクラスのオブジェクトが作られます。",
        "category": "Excel操作"
      },
      {
        "term": "value属性 (value attribute)",
        "explanation": "openpyxlにおいて、セルオブジェクトが持つ属性の一つで、そのセルに入力されている値を取得したり、新しい値を設定したりするために使います。",
        "category": "Excel操作"
      },
      {
        "term": "load_workbook関数 (load_workbook function)",
        "explanation": "openpyxlの関数で、既存のExcelファイルを読み込んで、その内容を操作するためのWorkbookオブジェクトを生成します。",
        "category": "Excel操作"
      },
      {
        "term": "iter_rowsメソッド (iter_rows method)",
        "explanation": "openpyxlのWorksheetオブジェクトが持つメソッドで、シート内のセルを行単位で順番に取り出すことができます。for文と組み合わせて、一行ずつデータを処理する際に便利です。",
        "category": "Excel操作"
      },
      {
        "term": "iter_rowsメソッドの引数 min_row",
        "explanation": "iter_rowsメソッドで、データの取得を開始する行番号を指定するための引数です。例えば `min_row=2` とすると、2行目から取得を開始します。",
        "category": "Excel操作"
      },
      {
        "term": "iter_rowsメソッドの引数 max_row",
        "explanation": "iter_rowsメソッドで、データの取得を終了する行番号を指定するための引数です。",
        "category": "Excel操作"
      },
      {
        "term": "iter_rowsメソッドの引数 min_col",
        "explanation": "iter_rowsメソッドで、データの取得を開始する列番号を指定するための引数です。A列が1、B列が2となります。",
        "category": "Excel操作"
      },
      {
        "term": "iter_rowsメソッドの引数 max_col",
        "explanation": "iter_rowsメソッドで、データの取得を終了する列番号を指定するための引数です。",
        "category": "Excel操作"
      },
      {
        "term": "iter_rowsメソッドの引数 values_only",
        "explanation": "iter_rowsメソッドの引数で、`True`に設定すると、セルオブジェクトそのものではなく、セルに入力されている値だけをタプルとして取り出すことができます。",
        "category": "Excel操作"
      },
      {
        "term": "iter_colsメソッド (iter_cols method)",
        "explanation": "openpyxlのWorksheetオブジェクトが持つメソッドで、iter_rowsの列バージョンです。シート内のセルを列単位で順番に取り出すことができます。",
        "category": "Excel操作"
      },
      {
        "term": "psutil",
        "explanation": "「process and system utilities」の略で、実行中のコンピュータのCPU使用率、メモリ使用量、ディスク使用量といったシステム情報を取得するためのPythonライブラリです。",
        "category": "システム情報取得"
      },
      {
        "term": "cpu_percent関数 (cpu_percent function)",
        "explanation": "psutilライブラリの関数で、CPUの使用率をパーセントで取得します。システムの現在の負荷状況を知ることができます。",
        "category": "システム情報取得"
      },
      {
        "term": "interval",
        "explanation": "cpu_percent関数などで使用される引数で、CPU使用率を測定する時間の間隔（秒数）を指定します。指定しないと、前回呼び出した時からの平均使用率を返します。",
        "category": "システム情報取得"
      },
      {
        "term": "percpu",
        "explanation": "cpu_percent関数などで使用される引数で、`True`に設定すると、CPU全体の平均使用率ではなく、CPUのコアごとの使用率をリストで返します。",
        "category": "システム情報取得"
      },
      {
        "term": "virtual_memory関数 (virtual_memory function)",
        "explanation": "psutilライブラリの関数で、システムの物理メモリ（RAM）の使用状況に関する情報を取得します。合計メモリ、使用可能メモリ、使用率などを知ることができます。",
        "category": "システム情報取得"
      },
      {
        "term": "percent属性 (percent attribute)",
        "explanation": "virtual_memory関数やdisk_usage関数が返すオブジェクトの属性の一つで、メモリやディスクの使用率をパーセントで示します。",
        "category": "システム情報取得"
      },
      {
        "term": "collectionsモジュール (collections module)",
        "explanation": "Pythonの標準ライブラリの一つで、リストや辞書などをより便利に、または高性能に扱うための特別なデータ型がまとめられています。",
        "category": "システム情報取得"
      },
      {
        "term": "namedtuple関数 (namedtuple function)",
        "explanation": "collectionsモジュールにある関数で、タプルの各要素に名前を付けてアクセスできるようにする機能です。`point.x` のように、インデックス番号ではなく名前で値を取り出せるため、コードが読みやすくなります。",
        "category": "システム情報取得"
      },
      {
        "term": "disk_usage関数 (disk_usage function)",
        "explanation": "psutilライブラリの関数で、指定したパスのディスク（ハードディスクやSSDなど）の使用状況（合計容量、使用量、空き容量、使用率）を取得します。",
        "category": "システム情報取得"
      },
      {
        "term": "SMTPサーバ (SMTP Server)",
        "explanation": "「Simple Mail Transfer Protocol」の略で、電子メールを送信・転送するためのサーバー（コンピューター）です。 手紙をポストに投函すると郵便局が相手に届けてくれるように、メール送信の指示をするとこのサーバーが相手に届けてくれます。",
        "category": "メール送信"
      },
      {
        "term": "Gmail",
        "explanation": "Googleが提供する無料のEメールサービスです。PythonのプログラムからGmailのSMTPサーバーを利用して、自動でメールを送信することが可能です。",
        "category": "メール送信"
      },
      {
        "term": "email.mime.textモジュール (email.mime.text module)",
        "explanation": "Pythonでメールの本文を作成するためのモジュールです。特に、テキスト形式のメールメッセージを作成する際に使われます。",
        "category": "メール送信"
      },
      {
        "term": "MIMETextクラス (MIMEText class)",
        "explanation": "email.mime.textモジュールにあるクラスで、メールの本文となるテキストと、その形式（プレーンテキストかHTMLかなど）や文字コードを指定して、メールメッセージのオブジェクトを作成します。",
        "category": "メール送信"
      },
      {
        "term": "smtplibモジュール (smtplib module)",
        "explanation": "PythonでSMTPサーバーに接続し、メールを送信するための機能がまとめられた標準ライブラリのモジュールです。",
        "category": "メール送信"
      },
      {
        "term": "sendmailメソッド (sendmail method)",
        "explanation": "smtplibのSMTPオブジェクトが持つメソッドで、実際にメールを送信する命令です。送信元アドレス、宛先アドレス、メールのメッセージ本文を引数として渡します。",
        "category": "メール送信"
      },
      {
        "term": "SMTPクラスのメソッド ehlo",
        "explanation": "SMTPサーバーに接続後、こちらの身元を名乗り、挨拶を交わすための命令（メソッド）です。通信の開始を宣言する役割があります。",
        "category": "メール送信"
      },
      {
        "term": "SMTPクラスのメソッド starttls",
        "explanation": "SMTPサーバーとの通信を暗号化するための命令（メソッド）です。メールの内容やパスワードが盗み見られるのを防ぐために、ログインやメール送信の前に行います。",
        "category": "メール送信"
      },
      {
        "term": "SMTPクラスのメソッド login",
        "explanation": "SMTPサーバーにユーザー名とパスワードを使ってログインするための命令（メソッド）です。認証が必要なサーバー（Gmailなど）を利用する際に必須です。",
        "category": "メール送信"
      },
    {
      "term": "CPython",
      "explanation": "CPythonは、Pythonの最も標準的で広く使われている実装です。C言語で書かれており、私たちが通常「Python」と呼んで使っているのは、ほとんどの場合このCPythonを指します。高速で多くのライブラリと互換性があります。",
      "category": "実行環境"
    },
    {
      "term": "コンパイル (Compile)",
      "explanation": "人間が書いたプログラミング言語（ソースコード）を、コンピューターが直接理解できる形式（機械語やバイトコード）に変換する作業のことです。Pythonは通常、コンパイル (compile) と実行が同時に行われるインタプリタ言語ですが、内部的には実行時にバイトコードに「コンパイル (compile)」されます。",
      "category": "実行環境"
    },
    {
      "term": "cmd（ターミナル）",
      "explanation": "コマンドプロンプトやターミナルは、文字を入力してコンピューターに直接指示を出すための画面です。GUI（グラフィカルユーザーインターフェース）のようにマウスで操作するのではなく、特定のコマンドを入力してファイル操作やプログラムの実行などを行います。Windowsでは「コマンドプロンプト」や「PowerShell」、macOSやLinuxでは「ターミナル」と呼ばれます。",
      "category": "開発環境"
    },
    {
      "term": "PyCharm",
      "explanation": "PyCharmは、Pythonの開発に特化した統合開発環境（IDE: Integrated Development Environment）です。コードの入力補助、エラーチェック、デバッグ、テストなど、プログラミングを効率的に行うための様々な機能が一つにまとまっています。初心者からプロまで幅広く利用されています。",
      "category": "開発環境"
    },
    {
      "term": "プロンプト",
      "explanation": "対話モードやコマンドラインで、ユーザーが入力待ちであることを示す記号や文字列のことです。Pythonの対話モードでは `>>>` が、コマンドラインでは `>` や `$` などが表示されます。これを見て、コードやコマンドを入力します。",
      "category": "基本概念"
    },
    {
      "term": "組み込み関数 (built-in function)",
      "explanation": "Python言語に最初から用意されており、importすることなくすぐに使える便利な関数 (function) のことです。`print()`、`len()`、`int()`、`str()` など、Pythonプログラミングで頻繁に利用される基本的な機能を提供します。",
      "category": "関数"
    },
    {
      "term": "print",
      "explanation": "`print()` はPythonの組み込み関数 (built-in function) の一つで、指定した値や変数の内容を画面（標準出力）に表示するために使われます。デバッグ目的で変数の値を確認したり、ユーザーに情報を伝えたりする際によく利用されます。",
      "category": "関数"
    },
    {
      "term": "quit()",
      "explanation": "`quit()` はPythonの対話モードを終了するための関数 (function) です。対話モードで `quit()` または `exit()` と入力してEnterキーを押すと、Pythonインタプリタが終了し、通常のコマンドラインに戻ります。",
      "category": "実行環境"
    },
    {
      "term": "コマンドライン (command line)",
      "explanation": "コンピューターのOS（オペレーティングシステム）に直接命令をテキストで入力して実行するインターフェースのことです。ファイルやディレクトリの操作、プログラムの実行、設定変更など、様々なタスクをコマンドを使って実行できます。ターミナルやコマンドプロンプトの画面がこれに当たります。",
      "category": "開発環境"
    },
    {
      "term": "KeyboardInterrupt",
      "explanation": "KeyboardInterruptは、プログラムの実行中にユーザーがキーボードから強制終了の信号（通常は `Ctrl + C`）を送ったときに発生するエラー（例外: exception）です。これにより、無限ループに陥ったプログラムなどを途中で停止させることができます。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "range",
      "explanation": "`range()` はPythonの組み込み関数 (built-in function) で、連続した数値のシーケンス（数列）を生成するために使われます。主に `for` ループと組み合わせて、指定した回数だけ処理を繰り返す場合に便利です。例えば `range(5)` は0から4までの数を生成します。",
      "category": "関数"
    },
    {
      "term": "IndentationError",
      "explanation": "IndentationErrorは、Pythonコードのインデント（字下げ）が正しくない場合に発生するエラーです。Pythonはインデントによってコードのブロック（まとまり）を識別するため、インデントが間違っているとプログラムは動作しません。特にスペースとタブの混在は避けましょう。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "インデント (indentation)",
      "explanation": "インデントとは、コードの行頭に空白（スペースやタブ）を入れて字下げすることです。Pythonでは、このインデントがコードの構造（どの処理がどのブロックに属するか）を示す非常に重要な役割を果たします。例えば、`if` 文や `for` 文の内部の処理は、本体よりも一段階インデントされます。",
      "category": "基本概念"
    },
    {
      "term": "テキストエディタ (text editor)",
      "explanation": "テキストエディタは、プログラムのソースコードや単なるテキストファイルを作成、編集するためのソフトウェアです。シンプルなメモ帳から、コードの強調表示や入力補完などの機能を持つ高機能なものまで様々です。VS CodeやSublime Text、Atomなどが有名です。",
      "category": "開発環境"
    },
    {
      "term": "UTF-8",
      "explanation": "UTF-8は、Unicodeの文字をコンピューター上で表現するための文字エンコーディング方式の一つです。世界中のほとんどの文字（日本語、英語、中国語など）を扱えるため、現在最も広く使われています。Webページやプログラムのソースコードでよく利用されます。",
      "category": "文字コード"
    },
    {
      "term": "チェンジディレクトリ (change directory)",
      "explanation": "コマンドラインで、現在の作業ディレクトリ（フォルダ）を変更する操作のことです。Windowsでは `cd` コマンド、macOS/Linuxでも `cd` コマンドを使用します。例えば `cd Documents` と入力すると、現在のディレクトリから `Documents` ディレクトリに移動します。",
      "category": "開発環境"
    },
    {
      "term": "ディレクトリ (directory)",
      "explanation": "ディレクトリは、コンピューターのファイルシステムにおいて、ファイルや他のディレクトリを整理・分類するための場所です。Windowsでは「フォルダ」とも呼ばれます。木構造のように階層的にファイルを管理することができます。",
      "category": "開発環境"
    },
    {
      "term": "UTF-8(BOM付き)",
      "explanation": "UTF-8(BOM付き)は、UTF-8エンコーディングの一種で、ファイルの先頭にBOM（Byte Order Mark）と呼ばれる特殊なバイト列が付加されたものです。BOMはファイルの文字エンコーディングを明示するためのものですが、PythonのスクリプトではBOM付きUTF-8を使うと、SyntaxErrorなどの問題を引き起こすことがあるため、通常はBOMなしのUTF-8が推奨されます。",
      "category": "文字コード"
    },
    {
      "term": "Unicode",
      "explanation": "Unicodeは、世界中のあらゆる文字（漢字、ひらがな、アルファベット、記号など）を一つの体系で表現するために作られた文字コードの国際標準規格です。各文字に固有の番号（コードポイント）を割り当てることで、異なる言語の文字が混在するテキストでも正しく表示できるようになります。",
      "category": "文字コード"
    },
    {
      "term": "ASCII",
      "explanation": "ASCII（American Standard Code for Information Interchange）は、最も古くから使われている文字コードの一つです。主に英数字、記号、制御文字など、128種類の文字を表現できます。日本語などの多バイト文字は扱えません。他の文字コードの基盤となることが多いです。",
      "category": "文字コード"
    },
    {
      "term": "文字コード (character code)",
      "explanation": "文字コードとは、コンピューターが文字を認識し、保存、表示するために、それぞれの文字に割り当てられた固有の数値（コード）の集合体のことです。例えば、「A」という文字には特定の数値が対応付けられています。同じ文字でも、使われている文字コードによって数値が異なることがあります。",
      "category": "文字コード"
    },
    {
      "term": "文字エンコーディング (character encoding)",
      "explanation": "文字エンコーディングとは、文字コードで定義された数値（コードポイント）を、実際にコンピューターが保存・転送できるようなバイト列に変換する具体的な方式のことです。UTF-8やShift_JISなどがこれにあたります。文字コードとエンコーディングは密接に関連しており、セットで考えることが多いです。",
      "category": "文字コード"
    },
    {
      "term": "カレントディレクトリ (current directory)",
      "explanation": "カレントディレクトリ（Current Directory）は、現在作業しているディレクトリ（フォルダ）のことです。ファイル名やディレクトリ名を指定する際に、パスを省略した場合、このカレントディレクトリを基準にファイルが検索されたり、作成されたりします。コマンドラインで `pwd` (macOS/Linux) や `cd` (Windows) と入力すると確認できます。",
      "category": "開発環境"
    },
    {
      "term": "エラーメッセージ (error message)",
      "explanation": "プログラムの実行中に問題が発生した際に、その原因や種類、発生箇所などを開発者に伝えるために表示される情報のことです。エラーメッセージを読み解くことは、プログラムのバグを修正する上で非常に重要です。初めは難しく感じるかもしれませんが、慣れると強力な味方になります。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "cd /? 機能説明",
      "explanation": "`cd /?` は、Windowsのコマンドプロンプトで `cd` コマンドのヘルプ情報を表示するためのコマンドです。`cd` コマンドの正しい使い方、オプション、機能などを確認したいときに便利です。他の多くのコマンドも `/?` や `--help` でヘルプが表示されます。",
      "category": "開発環境"
    },
    {
      "term": "トレースバック (traceback)",
      "explanation": "トレースバックは、Pythonプログラムでエラー（例外: exception）が発生したときに表示される、エラー発生時の関数の呼び出し履歴のことです。どのファイルで、どの行で、どの関数が呼び出されている途中でエラーが起きたのかが順番に示されており、エラーの原因を特定する上で非常に重要な情報源となります。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "モジュール (module)",
      "explanation": "モジュールは、Pythonのコードを機能ごとにまとめたファイル（`.py` 拡張子）のことです。関数 (function) やクラス (class)、変数 (variable) などが含まれています。他のPythonファイルから `import` することで、そのモジュール内の機能を利用できるようになり、コードの再利用性や管理がしやすくなります。",
      "category": "基本概念"
    },
    {
      "term": "WinMerge",
      "explanation": "WinMergeは、Windows向けのオープンソースのファイル比較・マージツールです。二つのファイルやフォルダの中身を比較し、違いを視覚的に表示してくれます。プログラムのコード変更履歴の確認や、複数のバージョン間の差分を統合する際に役立ちます。",
      "category": "ツール"
    },
    {
      "term": "diffコマンド",
      "explanation": "`diff` コマンドは、主にUnix/Linux系のOSで使われる、二つのファイルの内容を比較し、その差分（違い）を表示するためのコマンドです。プログラムのバージョン管理や、テキストファイルの変更点を確認する際に非常に重宝されます。WinMergeのようなGUIツールは、この `diff` の結果を視覚的に分かりやすくしたものです。",
      "category": "ツール"
    },
    {
      "term": "総合開発環境(VScode)",
      "explanation": "総合開発環境（IDE: Integrated Development Environment）は、プログラミングに必要な様々なツール（コードエディタ、コンパイラ/インタプリタ、デバッガなど）を一つにまとめたソフトウェアです。VS Code（Visual Studio Code）は、Microsoftが開発した非常に人気のある軽量かつ高機能なIDE（正確には高機能なテキストエディタとIDEの中間的な存在）で、多くの言語に対応し、拡張機能が豊富です。",
      "category": "開発環境"
    },
    {
      "term": "randint",
      "explanation": "`randint()` は、Pythonの `random` モジュールに含まれる関数 (function) で、指定した範囲内のランダムな整数（乱数）を生成するために使われます。例えば `random.randint(1, 10)` は1から10までの整数をランダムに返します。",
      "category": "関数"
    },
    {
      "term": "引数 (argument / parameter)",
      "explanation": "引数（ひきすう）とは、関数 (function) を呼び出す際に、その関数に渡す値のことです。関数はこれらの引数を受け取って、その値に基づいて処理を実行します。例えば `print('Hello')` の `'Hello'` が引数です。\n※関数を定義する際の引数を「仮引数 (parameter)」、関数を呼び出す際に渡す値を「実引数 (argument)」と呼び分けるのが厳密ですが、文脈によっては両方を単に「引数」と呼ぶこともあります。",
      "category": "関数"
    },
    {
      "term": "デバッガ (debugger)",
      "explanation": "デバッガは、プログラムのバグ（不具合）を見つけ、修正する作業（デバッグ）を助けるためのツールです。プログラムの実行を一時停止させたり、変数の値を監視したり、コードを一行ずつ実行したりすることで、プログラムの動作を詳細に調べることができます。IDEに内蔵されていることが多いです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "パス (path)",
      "explanation": "パスとは、コンピューターのファイルシステム上で、ファイルやディレクトリの場所を示す文字列のことです。ルートディレクトリからの完全な位置を示す「絶対パス」と、現在のディレクトリからの相対的な位置を示す「相対パス」があります。例: `/Users/username/Documents/file.txt`",
      "category": "開発環境"
    },
    {
      "term": "文字列 (string)",
      "explanation": "文字列は、プログラミングにおいて、文字の並び（テキストデータ）を表現するためのデータ型です。Pythonでは、シングルクォーテーション (`'`) またはダブルクォーテーション (`\"`) で囲むことで文字列として扱われます。例: `'Hello, world!'`",
      "category": "データ型"
    },
    {
      "term": "end='〇'",
      "explanation": "`print()` 関数のキーワード引数の一つである `end` は、`print()` が出力する文字列の最後に何を付けるかを指定します。デフォルトでは改行文字 (`\\n`) が入りますが、`end='〇'` のように指定すると、出力の最後に `〇` が付き、改行されなくなります。",
      "category": "関数"
    },
    {
      "term": "空白（スペース）",
      "explanation": "空白（スペース）は、文字と文字の間に挿入される空の領域です。プログラミングにおいては、可読性を高めるためにコード中に適切に配置されたり、文字列の一部として扱われたりします。Pythonのインデントには通常スペースが使われます。",
      "category": "基本概念"
    },
    {
      "term": "関数 (function)",
      "explanation": "関数は、特定の処理のまとまりに名前を付けたものです。一度定義すれば、何度でも呼び出して再利用できます。これにより、コードの重複を減らし、プログラムを見やすく、管理しやすくすることができます。引数を受け取り、結果を返すことができます。",
      "category": "関数"
    },
    {
      "term": "関数を呼び出す (call a function)",
      "explanation": "関数を呼び出すとは、定義された関数に処理を実行させることです。関数名の後に `()` を付け、必要であればその中に引数を渡して実行します。例えば、`print()` 関数を呼び出す場合は `print('Hello')` のように記述します。",
      "category": "関数"
    },
    {
      "term": "戻り値 (return value)",
      "explanation": "戻り値（返り値、返却値とも）とは、関数 (function) がその処理を終えた後に、呼び出し元に返す結果の値のことです。`return` 文を使って指定します。関数が計算結果を返す場合や、処理の成否を示す場合などに利用されます。戻り値がない関数は `None` を返します。",
      "category": "関数"
    },
    {
      "term": "None",
      "explanation": "`None` はPythonにおける特別な値で、「何もない」「値が存在しない」ことを表します。JavaScriptの `null` に似ています。関数の戻り値がない場合や、変数がまだ何も指していない状態を示す際などに使われます。`None` は `True` でも `False` でもない単一のオブジェクトです。",
      "category": "データ型"
    },
    {
      "term": "キーワード引数 (keyword argument)",
      "explanation": "関数に引数を渡す際に、引数名と値を `引数名=値` の形式で指定する方法です。引数の順番を気にせず渡すことができ、どの引数に何の値を渡しているのかが分かりやすくなる利点があります。例: `print('Hello', end='!')` の `end='!'` の部分です。",
      "category": "関数"
    },
    {
      "term": "位置引数 (positional argument)",
      "explanation": "関数に引数を渡す際に、定義された引数の順番通りに値を指定する方法です。引数名を使わず、値だけをカンマで区切って並べます。関数の定義を知っている場合や、引数の数が少ない場合に簡潔に書けます。例: `print('Hello', 'World')` の `'Hello'` と `'World'` は位置引数です。",
      "category": "関数"
    },
    {
      "term": "文（ステートメント） (statement)",
      "explanation": "文（ステートメント）とは、プログラミング言語における、コンピューターに特定の動作を指示する最小単位のことです。変数の代入、関数の呼び出し、条件分岐、繰り返し処理など、プログラムが行う一連の操作を表します。Pythonでは通常、1行が1つの文になります。",
      "category": "基本概念"
    },
    {
      "term": "式文 (expression statement)",
      "explanation": "式文は、値を計算する「式 (expression)」が単独で文 (statement) として使われているものです。例えば `1 + 2` は式であり、その結果をどこにも代入せず、ただ計算するだけの `1 + 2` という記述は式文となりえます。Pythonのインタプリタでは、式文の結果が表示されます。",
      "category": "基本概念"
    },
    {
      "term": "代入文 (assignment statement)",
      "explanation": "代入文は、変数 (variable) に値を割り当てる（代入する）ための文 (statement) です。`変数名 = 値` の形式で記述します。これにより、右辺の式の計算結果が左辺の変数に格納され、後からその変数を参照することで値を利用できるようになります。例: `message = 'Hello'`",
      "category": "基本概念"
    },
    {
      "term": "if文 (if statement)",
      "explanation": "`if` 文は、特定の条件が「真」（True）の場合にのみ、指定したコードブロックを実行するための条件分岐の文 (statement) です。`if 条件:` の後にインデントされたブロックで実行する処理を記述します。`elif` や `else` と組み合わせて、複数の条件に対応することもできます。",
      "category": "制御構文"
    },
    {
      "term": "for文 (for statement)",
      "explanation": "`for` 文は、繰り返し処理を行うための構文（ループ）の一つです。リストやタプルなどのコレクションの各要素に対して、順番に同じ処理を適用したい場合や、指定した回数だけ処理を繰り返したい場合に使います。Pythonでは `for 変数 in シーケンス:` の形式で記述します。",
      "category": "制御構文"
    },
    {
      "term": "単純文 (simple statement)",
      "explanation": "単純文は、一行で完結し、他の文を内包しない文 (statement) のことです。例えば、代入文 (`x = 10`) や `print()` 文、`pass` 文などがこれにあたります。これらは通常、セミコロンで区切ることもできますが、Pythonでは推奨されません。",
      "category": "基本概念"
    },
    {
      "term": "複合文 (compound statement)",
      "explanation": "複合文は、ヘッダー（`if` や `for` など）と、それに続くインデントされた一つ以上の「スイート」（コードブロック）から構成される文 (statement) です。例えば `if` 文や `for` 文、`while` 文、関数の定義 (`def`) などがこれにあたります。複数の単純文をまとめて一つのロジックを形成します。",
      "category": "基本概念"
    },
    {
      "term": "オフサイドルール (off-side rule)",
      "explanation": "オフサイドルールは、プログラミング言語において、コードのブロックの範囲をインデント（字下げ）によって識別する規則のことです。Pythonはこのルールを採用しており、中括弧 `{}` などを使わずにインデントの深さでコードの構造を示します。これにより、コードが自動的に読みやすくなる利点があります。",
      "category": "基本概念"
    },
    {
      "term": "教育言語のABC",
      "explanation": "ABCは、Pythonに影響を与えたとされる教育用プログラミング言語です。オランダで開発され、そのシンプルで読みやすい構文、特にインデントを構文要素として使う「オフサイドルール」は、Pythonの設計思想に大きな影響を与えました。Pythonの作者であるGuido van RossumもABCの開発に関わっていました。",
      "category": "歴史/概念"
    },
    {
      "term": "関数型言語のHaskell",
      "explanation": "Haskell（ハスケル）は、純粋関数型プログラミング言語の一つです。副作用のない純粋な関数を重視し、参照透過性や遅延評価といった特徴を持ちます。数学的な記述に近く、厳密な型システムを持つため、堅牢なプログラムを作成するのに適していますが、学習曲線は急な傾向があります。Pythonとはパラダイムが異なります。",
      "category": "歴史/概念"
    },
    {
      "term": "PEP8",
      "explanation": "PEP8（Python Enhancement Proposal 8）は、Pythonコードの書き方に関するスタイルガイドです。コードの可読性を高めるために、変数名、関数名、インデント、空白の入れ方など、様々なコーディング規約が定められています。Pythonコミュニティで広く受け入れられており、このガイドに従うことで、他の開発者にも理解しやすいコードを書くことができます。",
      "category": "コーディング規約"
    },
    {
      "term": "FORTRAN",
      "explanation": "FORTRAN（フォートラン）は、科学技術計算や数値解析の分野で非常に長く使われているプログラミング言語です。特に高速な計算処理に強みがあり、スーパーコンピュータの分野などで今でも現役で利用されています。Pythonとは異なり、コンパイル型の言語です。",
      "category": "歴史/概念"
    },
    {
      "term": "COBOL",
      "explanation": "COBOL（コボル）は、主に事務処理やビジネスアプリケーション向けに開発されたプログラミング言語です。銀行の基幹システムなどで使われることが多く、大量のデータを正確に処理することに長けています。英語に近い構文を持つのが特徴です。Pythonとは利用目的や歴史が大きく異なります。",
      "category": "歴史/概念"
    },
    {
      "term": "コメント (comment)",
      "explanation": "コメントは、プログラムのコード中に書かれる、コンピューターが実行しない「説明文」のことです。コードが何をしているのか、なぜそのように書かれているのかなどを、後からコードを読む人（自分自身を含む）が理解しやすくするために使われます。Pythonでは `#` で始まります。",
      "category": "コーディング規約"
    },
    {
      "term": "コメントアウト (comment out)",
      "explanation": "コメントアウトとは、一時的にコードの一部をコメントとして扱い、プログラムの実行対象から外すことです。これにより、特定のコードが原因でエラーが出ないかを確認したり、機能を一時的に無効にしたりすることができます。デバッグ作業でよく利用されます。",
      "category": "コーディング規約"
    },
    {
      "term": "ブロックコメント (block comment)",
      "explanation": "ブロックコメントは、複数の行にわたる長い説明や、一時的に多くのコード行を無効化（コメントアウト）したい場合に使われるコメントの形式です。Pythonでは、正式なブロックコメントの構文はありませんが、三重クォーテーション文字列 `'''コメント'''` または `\"\"\"コメント\"\"\"` を使って、複数行にわたるコメントを表現することが一般的です。",
      "category": "コーディング規約"
    },
    {
      "term": "インラインコメント (inline comment)",
      "explanation": "インラインコメントは、コードの行の途中に書かれるコメントです。行のコードが何をしているのかを、その行のすぐ隣で簡潔に説明するために使われます。Pythonでは、コードの後に `#` を付けて記述します。例: `x = 10  # 変数xに10を代入`",
      "category": "コーディング規約"
    },
    {
      "term": "三重クウォート文字列 (triple-quoted string)",
      "explanation": "三重クォート文字列（Triple-quoted string）は、シングルクォーテーションを3つ (`'''` または `\"\"\"`) で囲まれた文字列です。複数行にわたる文字列を記述できるだけでなく、PythonのDocstring（ドキュメンテーション文字列）として関数の説明を書いたり、ブロックコメントのように使ったりするのに便利です。",
      "category": "データ型"
    },
    {
      "term": "コーディングスタイル (coding style)",
      "explanation": "コーディングスタイルとは、プログラミング言語でコードを書く際の見た目や記述方法に関する一連の規則や推奨事項のことです。インデントの幅、変数名の付け方、空白の入れ方などを含みます。一貫したコーディングスタイルは、コードの可読性を高め、チーム開発での協力作業をスムーズにします。PythonではPEP8が有名です。",
      "category": "コーディング規約"
    },
    {
      "term": "pycodestyle",
      "explanation": "`pycodestyle` は、PythonコードがPEP8のコーディング規約に準拠しているかをチェックするためのツールです。コードを分析し、PEP8のルールから逸脱している箇所を警告として表示してくれます。これにより、自動的にコーディングスタイルを統一し、コード品質を向上させることができます。",
      "category": "ツール"
    },
    {
      "term": "pip install",
      "explanation": "`pip install` は、Pythonのパッケージ管理システムである `pip` を使って、Pythonの外部ライブラリやツールをインストールするためのコマンドです。Pythonの標準ライブラリには含まれていない機能（例: `numpy`, `pandas`, `requests` など）を使いたい場合に利用します。",
      "category": "ツール"
    },
    {
      "term": "autopep8",
      "explanation": "`autopep8` は、PythonコードをPEP8のスタイルガイドに自動的に整形（フォーマット）してくれるツールです。`pycodestyle` が警告を表示するのに対し、`autopep8` は実際にコードを修正してくれます。これにより、手作業でPEP8に準拠させる手間を省き、効率的に整形されたコードを作成できます。",
      "category": "ツール"
    },
    {
      "term": "型 (type)",
      "explanation": "プログラミングにおいて、データがどのような種類のものかを示す分類です。Pythonでは、整数、浮動小数点数、文字列、真偽値など、様々な組み込み型があります。データの型によって、そのデータに対して行える操作や、メモリ上での表現方法が異なります。",
      "category": "データ型"
    },
    {
      "term": "数値 (number)",
      "explanation": "算術演算が可能な、数値を表すデータ型の総称です。Pythonには、整数型 (`int`)、浮動小数点数型 (`float`)、複素数型 (`complex`) などがあります。",
      "category": "データ型"
    },
    {
      "term": "真偽値 (boolean)",
      "explanation": "真 (`True`) または偽 (`False`) のどちらか一方の値のみを持つデータ型です。条件分岐や論理演算で、条件の真偽を判定するために使用されます。",
      "category": "データ型"
    },
    {
      "term": "整数(int)",
      "explanation": "小数点以下の部分を持たない数値を表すデータ型です。Pythonの `int` 型は、メモリが許す限りいくらでも大きな整数を扱うことができる「多倍長整数」です。",
      "category": "データ型"
    },
    {
      "term": "浮動小数点数(float)",
      "explanation": "小数点以下の部分を持つ数値を表すデータ型です。Pythonの `float` 型は、通常、IEEE 754規格の倍精度浮動小数点数として実装されており、近似値を表現します。",
      "category": "データ型"
    },
    {
      "term": "多倍長整数",
      "explanation": "扱える整数の大きさに制限がなく、コンピュータのメモリが許す限り、いくらでも大きな整数を表現できる仕組みです。Pythonの `int` 型は、この多倍長整数として実装されています。",
      "category": "データ型"
    },
    {
      "term": "**",
      "explanation": "Pythonにおけるべき乗（累乗）を計算する算術演算子です。例えば、`A ** B` は「AのB乗」を意味します。",
      "category": "演算子"
    },
    {
      "term": "演算子 (operator)",
      "explanation": "プログラム中で変数や値に対して何らかの操作（計算、比較、論理判断など）を行うための記号です。算術演算子、比較演算子、論理演算子など様々な種類があります。",
      "category": "基本概念"
    },
    {
      "term": "リテラル (literal)",
      "explanation": "ソースコード中に直接記述された、固定された値のことです。例えば、`123` は整数リテラル、`\"Hello\"` は文字列リテラル、`True` は真偽値リテラルです。",
      "category": "基本概念"
    },
    {
      "term": "整数リテラル (integer literal)",
      "explanation": "ソースコード中に直接記述された整数の値です。10進数だけでなく、2進数 (`0b...`)、8進数 (`0o...`)、16進数 (`0x...`) 形式でも記述できます。",
      "category": "基本概念"
    },
    {
      "term": "10進数 (decimal)",
      "explanation": "私たちが日常的に使用する基数10の数値表現方法です。0から9の数字を使って数を表します。",
      "category": "基本概念"
    },
    {
      "term": "2進数 (binary)",
      "explanation": "基数2の数値表現方法で、0と1の数字のみを使って数を表します。コンピュータの内部ではこの形式でデータが扱われます。Pythonでは `0b` をプレフィックスとして表現します (例: `0b101`)。",
      "category": "基本概念"
    },
    {
      "term": "8進数 (octal)",
      "explanation": "基数8の数値表現方法で、0から7の数字を使って数を表します。Pythonでは `0o` をプレフィックスとして表現します (例: `0o755`)。",
      "category": "基本概念"
    },
    {
      "term": "16進数 (hexadecimal)",
      "explanation": "基数16の数値表現方法で、0から9の数字とAからFのアルファベットを使って数を表します。Pythonでは `0x` をプレフィックスとして表現します (例: `0xFF`)。",
      "category": "基本概念"
    },
    {
      "term": "単精度 (single precision)",
      "explanation": "浮動小数点数を表現する際の精度の一つで、通常32ビット（4バイト）を使用して数値を格納します。表現できる数値の範囲や有効桁数が倍精度より小さいです。Pythonの `float` は通常倍精度です。",
      "category": "基本概念"
    },
    {
      "term": "倍精度 (double precision)",
      "explanation": "浮動小数点数を表現する際の精度の一つで、通常64ビット（8バイト）を使用して数値を格納します。単精度よりも表現できる数値の範囲が広く、有効桁数も多いです。Pythonの `float` はこの倍精度浮動小数点数です。",
      "category": "基本概念"
    },
    {
      "term": "IEEE754",
      "explanation": "浮動小数点数の表現と算術を標準化した国際規格です。ほとんどのプログラミング言語（Pythonの `float` も含む）がこの規格に基づいて浮動小数点数を扱っています。",
      "category": "基本概念"
    },
    {
      "term": "32ビット (32-bit)",
      "explanation": "コンピュータのデータ処理における単位の一つで、32個の2進数（ビット）で情報を表現することです。単精度浮動小数点数は通常32ビットで表現されます。",
      "category": "基本概念"
    },
    {
      "term": "64ビット (64-bit)",
      "explanation": "コンピュータのデータ処理における単位の一つで、64個の2進数（ビット）で情報を表現することです。倍精度浮動小数点数は通常64ビットで表現されます。Pythonの `float` は64ビットです。",
      "category": "基本概念"
    },
    {
      "term": "有効桁数",
      "explanation": "数値の精度を示す桁数のことです。浮動小数点数においては、表現できる桁数に限りがあり、特に大きな数値や小さな数値を扱う際に丸め誤差が生じることがあります。",
      "category": "基本概念"
    },
    {
      "term": "decimal",
      "explanation": "Pythonの `decimal` モジュールで提供される、固定小数点数および浮動小数点数の両方を正確に表現するためのデータ型です。金融計算など、高い精度が求められる場面で浮動小数点数の誤差を回避するために使用されます。",
      "category": "データ型"
    },
    {
      "term": "浮動小数点数リテラル (floating point literal)",
      "explanation": "ソースコード中に直接記述された浮動小数点数の値です。小数点を含む数値 (例: `3.14`) や、指数表記 (例: `1.2e-5`) で表現されます。",
      "category": "基本概念"
    },
    {
      "term": "虚数リテラル (imaginary literal)",
      "explanation": "Pythonで複素数を構成する虚数部を直接記述する際に使用されるリテラルです。数値の後に `j` または `J` を付けて表現します (例: `3j`, `1.5j`)。",
      "category": "基本概念"
    },
    {
      "term": "複素数 (complex number)",
      "explanation": "実数部と虚数部からなる数値です。Pythonでは `complex` 型として扱われ、`実数部 + 虚数部j` の形式で表現されます (例: `1 + 2j`)。",
      "category": "データ型"
    },
    {
      "term": "*",
      "explanation": "Pythonにおける乗算（掛け算）を行う算術演算子です。また、文字列に対して使用すると、その文字列を指定した回数だけ繰り返す操作も行えます (例: `'abc' * 3` は `'abcabcabc'`)。",
      "category": "演算子"
    },
    {
      "term": "str",
      "explanation": "Pythonの文字列型を指します。テキストデータを扱うための組み込み型であり、様々な文字列操作メソッドを提供します。",
      "category": "データ型"
    },
    {
      "term": "文字列型 (string type)",
      "explanation": "文字の並び（シーケンス）を表現するためのデータ型です。Pythonでは `str` 型として実装されており、変更不能（イミュータブル）なシーケンスです。",
      "category": "データ型"
    },
    {
      "term": "文字列リテラル (string literal)",
      "explanation": "ソースコード中に直接記述された文字列の値です。シングルクォーテーション (`'...'`)、ダブルクォーテーション (`\"...\"`)、または三重クォーテーション (`'''...'''` もしくは `\"\"\"...\"\"\"`) で囲みます。",
      "category": "基本概念"
    },
    {
      "term": "空文字列 (empty string)",
      "explanation": "文字を一つも含まない文字列のことです。長さが0の文字列であり、`''` または `\"\"` と記述されます。",
      "category": "データ型"
    },
    {
      "term": "\\'",
      "explanation": "エスケープシーケンスの一つで、文字列中にシングルクォーテーションそのものを文字として含めたい場合に使用します。",
      "category": "文字列"
    },
    {
      "term": "\\\"",
      "explanation": "エスケープシーケンスの一つで、文字列中にダブルクォーテーションそのものを文字として含めたい場合に使用します。",
      "category": "文字列"
    },
    {
      "term": "\\",
      "explanation": "バックスラッシュ（円記号）は、エスケープシーケンスを開始する特殊文字です。この後に続く文字によって特別な意味を持ちます。",
      "category": "文字列"
    },
    {
      "term": "エスケープシーケンス (escape sequence)",
      "explanation": "文字列中で特殊な意味を持つ文字（改行、タブ、クォーテーションなど）を表現したり、通常の文字としては入力できない文字を表現したりするために、バックスラッシュ (`\\`) と特定の文字を組み合わせて記述する表記方法です。",
      "category": "文字列"
    },
    {
      "term": "\\n",
      "explanation": "エスケープシーケンスの一つで、改行（New Line）を表します。文字列中に挿入すると、その位置で出力が次の行に移ります。",
      "category": "文字列"
    },
    {
      "term": "\\t",
      "explanation": "エスケープシーケンスの一つで、水平タブ（Tab）を表します。文字列中に挿入すると、タブ文字のスペースが挿入されます。",
      "category": "文字列"
    },
    {
      "term": "\\\\",
      "explanation": "エスケープシーケンスの一つで、バックスラッシュそのものを文字として表現したい場合に使用します。",
      "category": "文字列"
    },
    {
      "term": "シングルクウォート (single quote)",
      "explanation": "文字列リテラルを定義するために使用される記号 (`'`) です。Pythonではダブルクォートと同じように使えます。",
      "category": "文字列"
    },
    {
      "term": "ダブルクウォート (double quote)",
      "explanation": "文字列リテラルを定義するために使用される記号 (`\"`) です。Pythonではシングルクォートと同じように使えます。",
      "category": "文字列"
    },
    {
      "term": "文字列リテラルの連結",
      "explanation": "複数の文字列リテラルを結合して一つの文字列にする操作です。Pythonでは、隣接する文字列リテラルは自動的に連結されます。",
      "category": "文字列"
    },
    {
      "term": "文字列同士は+",
      "explanation": "2つの文字列オブジェクトを `+` 演算子を使って結合し、新しい一つの文字列オブジェクトを生成する操作です。",
      "category": "演算子"
    },
    {
      "term": "'''",
      "explanation": "三重クォート文字列の開始と終了を示す記号の一つです。複数行の文字列やDocstringに使われます。",
      "category": "文字列"
    },
    {
      "term": "パスの文字列リテラル",
      "explanation": "ファイルパスやディレクトリパスを表現する文字列リテラルです。特にWindowsパスではバックスラッシュが多用されるため、エスケープシーケンスの問題を避けるためにraw文字列がよく使われます。",
      "category": "文字列"
    },
    {
      "term": "raw",
      "explanation": "raw文字列を指します。文字列リテラルの前に `r` または `R` を付けることで、エスケープシーケンスを通常の文字として解釈させることができます。ファイルパスなどを扱う際に便利です。",
      "category": "文字列"
    },
    {
      "term": "rまたはR",
      "explanation": "文字列リテラルの先頭に付けることで、その文字列をraw文字列（生の文字列）として扱わせるプレフィックスです。これにより、文字列中のバックスラッシュ (`\\`) がエスケープシーケンスとして解釈されなくなります。",
      "category": "文字列"
    },
    {
      "term": "真偽値の真",
      "explanation": "論理的な「真」を表す値です。Pythonではキーワード `True` で表現されます。",
      "category": "データ型"
    },
    {
      "term": "真偽値の偽",
      "explanation": "論理的な「偽」を表す値です。Pythonではキーワード `False` で表現されます。",
      "category": "データ型"
    },
    {
      "term": "bool",
      "explanation": "Pythonの真偽値型を指します。`True` と `False` の二つの値のみを持ちます。",
      "category": "データ型"
    },
    {
      "term": "True",
      "explanation": "Pythonにおける真偽値の「真」を表すキーワードです。条件式が成立した場合などにこの値となります。",
      "category": "データ型"
    },
    {
      "term": "False",
      "explanation": "Pythonにおける真偽値の「偽」を表すキーワードです。条件式が成立しなかった場合などにこの値となります。",
      "category": "データ型"
    },
    {
      "term": "比較演算子 (comparison operator)",
      "explanation": "2つの値を比較し、その結果が真 (`True`) か偽 (`False`) かを返す演算子です。等しいか、大きいか、小さいかなどを判定します。",
      "category": "演算子"
    },
    {
      "term": "A==B",
      "explanation": "比較演算子の一つで、`A` と `B` の値が「等しい」場合に `True` を、そうでない場合に `False` を返します。",
      "category": "演算子"
    },
    {
      "term": "A!=B",
      "explanation": "比較演算子の一つで、`A` と `B` の値が「等しくない」場合に `True` を、そうでない場合に `False` を返します。",
      "category": "演算子"
    },
    {
      "term": "A<B",
      "explanation": "比較演算子の一つで、`A` が `B` より「小さい」場合に `True` を、そうでない場合に `False` を返します。",
      "category": "演算子"
    },
    {
      "term": "A>B",
      "explanation": "比較演算子の一つで、`A` が `B` より「大きい」場合に `True` を、そうでない場合に `False` を返します。",
      "category": "演算子"
    },
    {
      "term": "A<=B",
      "explanation": "比較演算子の一つで、`A` が `B` 以下（小さいか等しい）の場合に `True` を、そうでない場合に `False` を返します。",
      "category": "演算子"
    },
    {
      "term": "A>=B",
      "explanation": "比較演算子の一つで、`A` が `B` 以上（大きいか等しい）の場合に `True` を、そうでない場合に `False` を返します。",
      "category": "演算子"
    },
    {
      "term": "ブール演算子(論理演算子) (boolean operator / logical operator)",
      "explanation": "真偽値（`True` または `False`）に対して論理的な操作を行う演算子です。`and`、`or`、`not` があります。",
      "category": "演算子"
    },
    {
      "term": "and",
      "explanation": "論理演算子の一つで、両方のオペランドが `True` の場合に `True` を返します。どちらか一方でも `False` であれば `False` を返します。",
      "category": "演算子"
    },
    {
      "term": "or",
      "explanation": "論理演算子の一つで、どちらか一方または両方のオペランドが `True` の場合に `True` を返します。両方が `False` の場合にのみ `False` を返します。",
      "category": "演算子"
    },
    {
      "term": "not",
      "explanation": "論理演算子の一つで、オペランドの真偽を反転させます。`True` であれば `False` を、`False` であれば `True` を返します。",
      "category": "演算子"
    },
    {
      "term": "A and B",
      "explanation": "論理演算子 `and` を使用した式です。`A` と `B` の両方が真であれば真、そうでなければ偽となります。",
      "category": "演算子"
    },
    {
      "term": "A or B",
      "explanation": "論理演算子 `or` を使用した式です。`A` と `B` のどちらか一方、または両方が真であれば真、両方が偽であれば偽となります。",
      "category": "演算子"
    },
    {
      "term": "not A",
      "explanation": "論理演算子 `not` を使用した式です。`A` の真偽値を反転させます。",
      "category": "演算子"
    },
    {
      "term": "int関数 (int function)",
      "explanation": "Pythonの組み込み関数の一つで、数値や文字列を整数型 (`int`) に変換します。浮動小数点数を整数に変換すると小数点以下は切り捨てられます。",
      "category": "関数"
    },
    {
      "term": "math",
      "explanation": "Pythonの標準ライブラリに含まれるモジュールの一つで、数学的な関数（三角関数、対数関数、平方根など）を提供します。利用するには `import math` が必要です。",
      "category": "ライブラリ"
    },
    {
      "term": "floor",
      "explanation": "`math` モジュールに含まれる関数 `math.floor()` を指し、与えられた数値以下の最大の整数（小数点以下を切り捨てた値）を返します。",
      "category": "関数"
    },
    {
      "term": "ceil",
      "explanation": "`math` モジュールに含まれる関数 `math.ceil()` を指し、与えられた数値以上の最小の整数（小数点以下を切り上げた値）を返します。",
      "category": "関数"
    },
    {
      "term": "mathライブラリ (math library)",
      "explanation": "Pythonの標準ライブラリの一つで、数学的な計算を行うための関数や定数を提供します。例えば、`math.sqrt()` (平方根)、`math.pi` (円周率) などがあります。",
      "category": "ライブラリ"
    },
    {
      "term": "import文 (import statement)",
      "explanation": "他のモジュールやパッケージが提供する機能（関数、クラス、変数など）を現在のプログラムで利用できるようにするための文です。例: `import math`",
      "category": "基本概念"
    },
    {
      "term": "float関数 (float function)",
      "explanation": "Pythonの組み込み関数の一つで、数値や文字列を浮動小数点数型 (`float`) に変換します。",
      "category": "関数"
    },
    {
      "term": "str関数 (str function)",
      "explanation": "Pythonの組み込み関数の一つで、任意のオブジェクトを文字列型 (`str`) に変換します。",
      "category": "関数"
    },
    {
      "term": "bool関数 (bool function)",
      "explanation": "Pythonの組み込み関数の一つで、任意のオブジェクトを真偽値型 (`bool`) に変換します。数値の0、空のコレクション、`None` などは `False` に、それ以外は `True` に評価されます。",
      "category": "関数"
    },
    {
      "term": "変数 (variable)",
      "explanation": "プログラム中でデータを一時的に格納するための名前付きの記憶領域です。変数は、代入演算子 (`=`) を使って値が割り当てられ、後からその値を参照したり変更したりすることができます。\n※一般的にデータを格納する名前付きの領域を「変数 (variable)」と呼びます。関数に渡される値を指す場合は「引数 (parameter / argument)」と区別されることが多いです。",
      "category": "基本概念"
    },
    {
      "term": "代入　＝（イコール） (assignment)",
      "explanation": "変数に値を割り当てるために使用される代入演算子です。右辺の式の評価結果が左辺の変数に格納されます。",
      "category": "演算子"
    },
    {
      "term": "デリミタ (delimiter)",
      "explanation": "プログラミング言語において、コードの要素（例えば、引数の区切りや文の区切り）を区別するために使用される特殊な記号や文字のことです。Pythonではカンマ (`,`) やコロン (`:`) などがデリミタとして機能します。",
      "category": "基本概念"
    },
    {
      "term": "オブジェクト (object)",
      "explanation": "Pythonにおけるすべてのデータはオブジェクトとして扱われます。オブジェクトは、値と型、そしてそれに対して行える操作（メソッド）を持ちます。変数はオブジェクトそのものではなく、オブジェクトへの参照を保持します。",
      "category": "基本概念"
    },
    {
      "term": "ガベージコレクション (garbage collection)",
      "explanation": "プログラムによって動的に確保されたメモリ領域のうち、不要になったものを自動的に解放する機能です。Pythonでは主に参照カウント方式と世代別ガベージコレクタを組み合わせてメモリ管理を行います。",
      "category": "基本概念"
    },
    {
      "term": "リファレンスカウント (reference counting)",
      "explanation": "オブジェクトへの参照（変数など）がいくつあるかを数える仕組みです。参照カウントが0になったオブジェクトは、もうどこからも参照されていないと判断され、メモリから解放されます（ガベージコレクションの主要な方式の一つ）。",
      "category": "基本概念"
    },
    {
      "term": "is関数",
      "explanation": "Pythonの `is` 演算子を指し、2つの変数が「同じオブジェクト」を参照しているか（つまり、メモリ上の同じ場所を指しているか）を比較します。値が等しいかどうかを比較する `==` とは異なります。",
      "category": "演算子"
    },
    {
      "term": "is not関数",
      "explanation": "Pythonの `is not` 演算子を指し、2つの変数が「異なるオブジェクト」を参照しているか（メモリ上の異なる場所を指しているか）を比較します。",
      "category": "演算子"
    },
    {
      "term": "識別子 (identifier)",
      "explanation": "変数、関数、クラス、モジュールなどのプログラム要素に付ける名前のことです。アルファベット、数字、アンダースコア (`_`) で構成され、数字で始まることはできません。",
      "category": "基本概念"
    },
    {
      "term": "定数 (constant)",
      "explanation": "プログラムの実行中に値が変更されないことを意図した変数です。Pythonには厳密な定数の概念はありませんが、慣習としてすべて大文字で名前を付けることで定数であることを示します。",
      "category": "基本概念"
    },
    {
      "term": "_(アンダースコア1個)",
      "explanation": "Pythonにおいて様々な文脈で使われる特殊な識別子です。\n- インタプリタの対話モードで直前の式の結果を保持。\n- ループ内で値が不要な場合にプレースホルダーとして使用。\n- 変数名のプレフィックスとして、内部的に使用されることを示す（が強制力はない）。",
      "category": "基本概念"
    },
    {
      "term": "__(アンダースコア2個)",
      "explanation": "Pythonにおいて「特殊メソッド」（マジックメソッド）の名前や、クラスの属性において名前のマングリング（name mangling）に使われる特殊な識別子です。例: `__init__`, `__str__`。",
      "category": "基本概念"
    },
    {
      "term": "del文 (del statement)",
      "explanation": "変数、リストの要素、辞書のキーと値のペアなどを削除するために使用する文です。`del` を使うと、指定された名前がバインドされていたオブジェクトへの参照が削除されます。参照カウントが0になるとオブジェクトはガベージコレクションされます。",
      "category": "基本概念"
    },
    {
      "term": "算術演算子 (arithmetic operator)",
      "explanation": "数値に対して数学的な計算（足し算、引き算、掛け算、割り算など）を行うための演算子です。",
      "category": "演算子"
    },
    {
      "term": "A+B",
      "explanation": "算術演算子 `+` を使用した加算（足し算）の式です。数値の加算、または文字列の結合を行います。",
      "category": "演算子"
    },
    {
      "term": "A-B",
      "explanation": "算術演算子 `-` を使用した減算（引き算）の式です。",
      "category": "演算子"
    },
    {
      "term": "A*B",
      "explanation": "算術演算子 `*` を使用した乗算（掛け算）の式です。数値の乗算、または文字列の繰り返しを行います。",
      "category": "演算子"
    },
    {
      "term": "A@B",
      "explanation": "Python 3.5で導入された `@` 演算子を指し、主に行列の乗算を行うために使用されます。`Numpy` などのライブラリで定義されています。",
      "category": "演算子"
    },
    {
      "term": "A/B",
      "explanation": "算術演算子 `/` を使用した除算（割り算）の式です。結果は常に浮動小数点数（`float`）になります。",
      "category": "演算子"
    },
    {
      "term": "A//B",
      "explanation": "算術演算子 `//` を使用した整数除算（切り捨て除算）の式です。結果は小数点以下を切り捨てた整数（または浮動小数点数）になります。負の数の場合は、結果が小さい方向（負の無限大方向）に丸められます。",
      "category": "演算子"
    },
    {
      "term": "A%B",
      "explanation": "算術演算子 `%` を使用した剰余（余り）の式です。`A` を `B` で割った余りを返します。",
      "category": "演算子"
    },
    {
      "term": "A**B",
      "explanation": "算術演算子 `**` を使用したべき乗（累乗）の式です。`A` の `B` 乗を計算します。",
      "category": "演算子"
    },
    {
      "term": "項数",
      "explanation": "演算子や関数が取る引数（オペランド）の数のことです。例えば、`+` は2項演算子（2つのオペランドを取る）であり、`not` は1項演算子です。",
      "category": "基本概念"
    },
    {
      "term": "二項演算子 (binary operator)",
      "explanation": "2つのオペランド（項）を取って操作を行う演算子です。算術演算子 (`+`, `-`, `*`, `/` など) や比較演算子 (`==`, `<` など) の多くが二項演算子です。",
      "category": "演算子"
    },
    {
      "term": "二項算術演算子 (binary arithmetic operator)",
      "explanation": "2つの数値オペランドに対して算術計算を行う演算子です。`+`, `-`, `*`, `/`, `//`, `%`, `**`, `@` などがあります。",
      "category": "演算子"
    },
    {
      "term": "単項演算子 (unary operator)",
      "explanation": "1つのオペランド（項）を取って操作を行う演算子です。例えば、単項の `-` (負の符号) や論理演算子 `not` などがあります。",
      "category": "演算子"
    },
    {
      "term": "単項算術演算子 (unary arithmetic operator)",
      "explanation": "1つの数値オペランドに対して算術的な操作を行う演算子です。正の符号 (`+`) と負の符号 (`-`) があります。",
      "category": "演算子"
    },
    {
      "term": "Numpy",
      "explanation": "Pythonで数値計算を効率的に行うためのライブラリです。特に多次元配列（`ndarray`）オブジェクトと、それらを操作するための高速な関数を提供し、科学技術計算の基盤となっています。`@` 演算子が行列の乗算として利用されるのもこのライブラリで定義されています。",
      "category": "ライブラリ"
    },
    {
      "term": "整数と浮動小数点の//",
      "explanation": "整数除算演算子 `//` は、オペランドが両方とも整数であれば整数を、片方または両方が浮動小数点数であれば浮動小数点数を返します。常に結果は小数部を切り捨てて整数に丸められます。",
      "category": "演算子"
    },
    {
      "term": "負の数の//",
      "explanation": "負の数に対する整数除算 `//` の挙動は、結果が常に小さい方向（負の無限大方向）に丸められるという特徴があります。例えば、`-7 // 3` は `-3` となります。",
      "category": "演算子"
    },
    {
      "term": "式を評価する (evaluate an expression)",
      "explanation": "プログラム中の「式 (expression)」（値を持つ部分）を計算し、その結果の値を決定することです。例えば `1 + 2` という式を評価すると `3` という値になります。",
      "category": "基本概念"
    },
    {
      "term": "演算子の優先順位 (operator precedence)",
      "explanation": "複数の演算子が含まれる式において、どの演算子が先に実行されるかを決定する規則です。例えば、`*` や `/` は `+` や `-` より優先順位が高いです。",
      "category": "基本概念"
    },
    {
      "term": "結合性 (associativity)",
      "explanation": "同じ優先順位を持つ複数の演算子が連続して現れた場合に、どちらの方向から評価されるか（左から右か、右から左か）を決定する規則です。",
      "category": "基本概念"
    },
    {
      "term": "左結合 (left-associative)",
      "explanation": "演算子が左結合である場合、同じ優先順位の演算子が連続する場合、式は左から右へ評価されます。ほとんどの算術演算子や比較演算子は左結合です。",
      "category": "基本概念"
    },
    {
      "term": "右結合 (right-associative)",
      "explanation": "演算子が右結合である場合、同じ優先順位の演算子が連続する場合、式は右から左へ評価されます。Pythonでは、べき乗演算子 `**` が右結合です (例: `2 ** 3 ** 2` は `2 ** (3 ** 2)` と解釈されます)。",
      "category": "基本概念"
    },
    {
      "term": "累算代入文 (augmented assignment statement)",
      "explanation": "算術演算と代入を組み合わせた短縮表記の文です。例えば、`x = x + 1` は `x += 1` と書けます。`+=`, `-=`, `*=`, `/=`, `%=` などがあります。",
      "category": "基本概念"
    },
    {
      "term": "文字列の結合は+",
      "explanation": "2つの文字列を結合して新しい一つの文字列を作成する際に、`+` 演算子を使用します。",
      "category": "文字列"
    },
    {
      "term": "文字列の繰り返しは*",
      "explanation": "文字列と整数を `*` 演算子で組み合わせることで、文字列を指定された回数だけ繰り返して新しい文字列を作成します。",
      "category": "文字列"
    },
    {
      "term": "イミュータブル (immutable)",
      "explanation": "作成された後にその内容を変更できないオブジェクトのことです。Pythonでは、数値 (`int`, `float`, `complex`)、文字列 (`str`)、タプル (`tuple`) などがイミュータブルです。",
      "category": "基本概念"
    },
    {
      "term": "ミュータブル (mutable)",
      "explanation": "作成された後にその内容を変更できるオブジェクトのことです。Pythonでは、リスト (`list`)、辞書 (`dict`)、セット (`set`) などがミュータブルです。",
      "category": "基本概念"
    },
    {
      "term": "インデックス (index)",
      "explanation": "シーケンス型（文字列、リスト、タプルなど）の要素の順番を示す番号です。Pythonでは0から始まり、各要素に一意に割り当てられます。",
      "category": "シーケンス"
    },
    {
      "term": "シーケンス (sequence)",
      "explanation": "要素が順序付けられて並んでいるデータ構造の総称です。Pythonでは、文字列、リスト、タプルなどがシーケンス型に分類され、インデックスやスライスによるアクセスが可能です。",
      "category": "データ型"
    },
    {
      "term": "スライス (slice)",
      "explanation": "シーケンス型（文字列、リストなど）の一部を切り出して新しいシーケンスを作成する操作です。`[開始インデックス:終了インデックス:ストライド]` の形式で指定します。",
      "category": "シーケンス"
    },
    {
      "term": "開始インデックス (start index)",
      "explanation": "スライス操作において、切り出しを開始する要素のインデックスです。このインデックスの要素は含まれます。省略するとシーケンスの先頭（0）からとなります。",
      "category": "シーケンス"
    },
    {
      "term": "終了インデックス (stop index)",
      "explanation": "スライス操作において、切り出しを終了する要素のインデックスです。このインデックスの要素は含まれません（`終了インデックス - 1` の要素までが含まれる）。省略するとシーケンスの末尾までとなります。",
      "category": "シーケンス"
    },
    {
      "term": "ストライド (stride)",
      "explanation": "スライス操作において、要素を何ステップごとに取得するかを指定する値です。デフォルトは `1` です。負の値を指定すると、シーケンスを逆順にたどります。",
      "category": "シーケンス"
    },
    {
      "term": "メソッド (method)",
      "explanation": "オブジェクトに紐付けられた関数のことです。特定のデータ型（文字列、リストなど）のオブジェクトに対して操作を行うために使用されます。`オブジェクト.メソッド名()` の形式で呼び出されます。",
      "category": "基本概念"
    },
    {
      "term": "upperメソッド",
      "explanation": "文字列オブジェクトのメソッドの一つで、文字列内のすべての小文字を大文字に変換した新しい文字列を返します。元の文字列は変更されません。",
      "category": "文字列メソッド"
    },
    {
      "term": "lowerメソッド",
      "explanation": "文字列オブジェクトのメソッドの一つで、文字列内のすべての大文字を小文字に変換した新しい文字列を返します。元の文字列は変更されません。",
      "category": "文字列メソッド"
    },
    {
      "term": "startswithメソッド",
      "explanation": "文字列オブジェクトのメソッドの一つで、文字列が指定されたプレフィックス（先頭の文字列）で始まるかどうかを判定し、真偽値 (`True` または `False`) を返します。",
      "category": "文字列メソッド"
    },
    {
      "term": "endswithメソッド",
      "explanation": "文字列オブジェクトのメソッドの一つで、文字列が指定されたサフィックス（末尾の文字列）で終わるかどうかを判定し、真偽値 (`True` または `False`) を返します。",
      "category": "文字列メソッド"
    },
    {
      "term": "replaceメソッド",
      "explanation": "文字列オブジェクトのメソッドの一つで、文字列内の指定された部分文字列を別の部分文字列に置換した新しい文字列を返します。元の文字列は変更されません。",
      "category": "文字列メソッド"
    },
    {
      "term": "find",
      "explanation": "文字列オブジェクトのメソッド `str.find()` を指します。文字列内で指定された部分文字列が最初に見つかるインデックス（位置）を返します。見つからない場合は `-1` を返します。",
      "category": "文字列メソッド"
    },
    {
      "term": "rfind",
      "explanation": "文字列オブジェクトのメソッド `str.rfind()` を指します。文字列内で指定された部分文字列が最後に見つかるインデックス（位置）を返します。見つからない場合は `-1` を返します。",
      "category": "文字列メソッド"
    },
    {
      "term": "rindex",
      "explanation": "文字列オブジェクトのメソッド `str.rindex()` を指します。文字列内で指定された部分文字列が最後に見つかるインデックス（位置）を返します。見つからない場合は `ValueError` を発生させます。",
      "category": "文字列メソッド"
    },
    {
      "term": "countメソッド",
      "explanation": "文字列オブジェクトのメソッド `str.count()` を指します。文字列内で指定された部分文字列が何回出現するかを数えて返します。",
      "category": "文字列メソッド"
    },
    {
      "term": "SyntaxError",
      "explanation": "Pythonの文法的な誤り（コロンの忘れ、括弧の不一致など）によって発生する構文エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "TabError",
      "explanation": "インデントにタブとスペースが混在している場合に発生するエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "NameError",
      "explanation": "定義していない変数や関数を呼び出そうとした場合に発生する名前エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "TypeError",
      "explanation": "演算や関数に対して、不適切なデータ型のオブジェクトを使用した際に発生する型エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "ValueError",
      "explanation": "データ型は正しいが、その値が不適切（例: int(\"a\")）な場合に発生する値エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "IndexError",
      "explanation": "リストなどの範囲外のインデックスにアクセスした際に発生するインデックスエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "KeyError",
      "explanation": "辞書に存在しないキーを指定した際に発生するキーエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "AttributeError",
      "explanation": "オブジェクトに存在しない属性（メソッドや変数）を呼び出した際に発生する属性エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "ModuleNotFoundError",
      "explanation": "importしようとしたモジュールが見つからない場合に発生するモジュール未発見エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "ImportError",
      "explanation": "モジュールの一部インポート失敗（循環参照など）により発生するインポートエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "ZeroDivisionError",
      "explanation": "数値をゼロ（0）で割ろうとした場合に発生するゼロ除算エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "FileNotFoundError",
      "explanation": "存在しないファイルやディレクトリにアクセスしようとした際に発生するファイル未発見エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "PermissionError",
      "explanation": "ファイルやディレクトリへのアクセス権がない場合に発生する権限エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "OSError / IOError",
      "explanation": "OSレベルの入出力の問題（ディスク容量不足など）によって発生するOS/入出力エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "MemoryError",
      "explanation": "プログラムがコンピュータのメモリを使い果たした場合に発生するメモリエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "OverflowError",
      "explanation": "計算結果が数値型で表現できる限界を超えた場合に発生するオーバーフローエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "RecursionError",
      "explanation": "関数の再帰呼び出しが深すぎる場合に発生する再帰エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "UnboundLocalError",
      "explanation": "関数内で、ローカル変数に値が代入される前に参照しようとした場合に発生するローカル変数未束縛エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "AssertionError",
      "explanation": "assert文の条件式がFalseになった場合に発生するアサーションエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "NotImplementedError",
      "explanation": "まだ実装されていないメソッドが呼び出されたことを示すエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "StopIteration",
      "explanation": "イテレータがすべての要素を返し終わった際に発生するイテレーション停止エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "Exception",
      "explanation": "ほぼすべての組み込みエラーの基底クラスである例外です。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "BaseException",
      "explanation": "SystemExitなどを含む、すべての例外の最上位クラスである基底例外です。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "ArithmeticError",
      "explanation": "ZeroDivisionError, OverflowError などの基底クラスである数値計算エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "LookupError",
      "explanation": "IndexError, KeyError の基底クラスであるルックアップエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "RuntimeError",
      "explanation": "他のカテゴリに分類されない、一般的な実行時エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "SystemError",
      "explanation": "Pythonインタプリタ内部で発生したエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "EOFError",
      "explanation": "input()などが、データを読み込む前に入力の終わりに達した際に発生するEOFエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "UnicodeError",
      "explanation": "Unicode関連のエンコード/デコードエラーの基底クラスです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "UnicodeEncodeError",
      "explanation": "文字列を特定のバイト列に変換（エンコード）する際に失敗した場合に発生するUnicodeエンコードエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "UnicodeDecodeError",
      "explanation": "バイト列を文字列に変換（デコード）する際に失敗した場合に発生するUnicodeデコードエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "SystemExit",
      "explanation": "sys.exit() が呼び出された際に発生します。エラーというより正常な終了通知です。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "FileExistsError",
      "explanation": "既に存在するファイルやディレクトリを作成しようとした際に発生するファイル存在エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "IsADirectoryError",
      "explanation": "ファイル操作をディレクトリに対して行おうとした場合に発生するディレクトリエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "NotADirectoryError",
      "explanation": "ディレクトリ操作をファイルに対して行おうとした場合に発生する非ディレクトリエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "TimeoutError",
      "explanation": "システムレベルの操作（I/Oなど）が時間内に完了しなかった場合に発生するタイムアウトエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "ConnectionError",
      "explanation": "ネットワーク接続関連エラーの基底クラスです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "BrokenPipeError",
      "explanation": "パイプの片側が閉じているのに書き込もうとした場合に発生するパイプ破損エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "ConnectionAbortedError",
      "explanation": "接続が強制的に中断された場合に発生する接続中断エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "ConnectionRefusedError",
      "explanation": "相手のコンピュータが接続を拒否した場合に発生する接続拒否エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "ConnectionResetError",
      "explanation": "接続が相手によってリセットされた場合に発生する接続リセットエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "BlockingIOError",
      "explanation": "ノンブロッキングI/Oで、操作がブロックされる状況で発生するブロッキングI/Oエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "ChildProcessError",
      "explanation": "子プロセスの操作でエラーが発生した場合に発生する子プロセスエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "InterruptedError",
      "explanation": "処理がシグナルによって中断された場合に発生する割り込みエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "ProcessLookupError",
      "explanation": "指定されたプロセスが存在しない場合に発生するプロセス検索エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "StopAsyncIteration",
      "explanation": "非同期イテレータがすべての要素を返し終わった際に発生する非同期イテレーション停止エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "Warning",
      "explanation": "エラーではないが、問題の可能性があるコードへの警告を示す基底クラスです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "DeprecationWarning",
      "explanation": "廃止予定の古い機能が使われた際に発生する廃止予定警告です。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "ResourceWarning",
      "explanation": "ファイルを閉じ忘れるなど、リソースの不適切な利用があった場合に発生するリソース警告です。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "FutureWarning",
      "explanation": "将来のバージョンで意味が変わる構文が使われた際に発生する将来の変更警告です。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "BufferError",
      "explanation": "バッファ関連の操作（メモリの直接操作など）ができない場合に発生するバッファエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "FloatingPointError",
      "explanation": "浮動小数点計算でエラーが発生した場合に発生する浮動小数点エラーです。通常は発生しません。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "ReferenceError",
      "explanation": "弱参照が指していたオブジェクトが消滅した後にアクセスした場合に発生する弱参照エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "json.JSONDecodeError",
      "explanation": "JSON形式として不正な文字列をパースしようとした際に発生するJSONデコードエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "zipfile.BadZipFile",
      "explanation": "ZIPファイルが破損している、またはZIPファイルではない場合に発生する不正なZIPファイルエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "re.error",
      "explanation": "正規表現のパターンに文法的な誤りがある場合に発生する正規表現エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "socket.timeout",
      "explanation": "ソケット通信でタイムアウトが発生した場合に発生するソケットタイムアウトです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "socket.gaierror",
      "explanation": "ホスト名の解決（DNS検索）に失敗した場合に発生するアドレス情報エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "urllib.error.URLError",
      "explanation": "URLの形式が不正、またはサーバに接続できない場合に発生するURLエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "urllib.error.HTTPError",
      "explanation": "HTTPリクエストが失敗（404 Not Found, 500 Server Errorなど）した場合に発生するHTTPエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "subprocess.CalledProcessError",
      "explanation": "外部コマンドの実行がゼロ以外の終了コードで終了した場合に発生するサブプロセス呼び出しエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "subprocess.TimeoutExpired",
      "explanation": "外部コマンドの実行が指定時間内に完了しなかった場合に発生するサブプロセスタイムアウトです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "queue.Empty",
      "explanation": "空のキューから要素を取り出そうとした場合に発生するキュー空エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "queue.Full",
      "explanation": "満杯のキューに要素を追加しようとした場合に発生するキュー満杯エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "csv.Error",
      "explanation": "CSVファイルの読み書き中にフォーマットエラーが発生した場合に発生するCSVエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "configparser.Error",
      "explanation": "設定ファイル（.iniなど）の解析中にエラーが発生した場合に発生する設定パースエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "sqlite3.Error",
      "explanation": "sqlite3モジュール関連のエラーの基底クラスです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "sqlite3.IntegrityError",
      "explanation": "主キーの重複など、データベースの制約に違反した場合に発生する整合性エラーです（SQLite）。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "sqlite3.OperationalError",
      "explanation": "データベースファイルが見つからない、テーブルが存在しない場合などに発生する操作エラーです（SQLite）。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "struct.error",
      "explanation": "バイナリデータのパック/アンパックでエラーが発生した場合に発生するstructエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "pickle.PicklingError",
      "explanation": "オブジェクトをシリアライズ（バイト列に変換）できない場合に発生するPickle化エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "pickle.UnpicklingError",
      "explanation": "バイト列をオブジェクトにデシリアライズできない場合に発生するUnpickle化エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "ssl.SSLError",
      "explanation": "SSL/TLS通信でエラーが発生した場合（証明書の問題など）に発生するSSLエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "shutil.SameFileError",
      "explanation": "ファイルのコピー/移動で、移動元と移動先が同じファイルだった場合に発生する同一ファイルエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "statistics.StatisticsError",
      "explanation": "統計計算ができない（例: 空のデータで平均を求める）場合に発生する統計エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "tarfile.TarError",
      "explanation": "tarアーカイブの読み書きでエラーが発生した場合に発生するtarファイルエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "xml.parsers.expat.ExpatError",
      "explanation": "XMLの形式が不正でパースできない場合に発生するXMLパースエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "http.client.IncompleteRead",
      "explanation": "HTTPレスポンスを完全に受信する前に接続が切れた場合に発生する不完全な読み込みエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "asyncio.TimeoutError",
      "explanation": "asyncioを使った非同期処理がタイムアウトした場合に発生する非同期タイムアウトです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "asyncio.CancelledError",
      "explanation": "asyncioのタスクがキャンセルされた場合に発生する非同期キャンセルエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "concurrent.futures.TimeoutError",
      "explanation": "concurrent.futuresでの処理がタイムアウトした場合に発生するFutureタイムアウトです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "concurrent.futures.CancelledError",
      "explanation": "concurrent.futuresの処理がキャンセルされた場合に発生するFutureキャンセルエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "multiprocessing.ProcessError",
      "explanation": "multiprocessing関連のエラーの基底クラスです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "ipaddress.AddressValueError",
      "explanation": "不正なIPアドレス文字列をパースしようとした場合に発生するIPアドレス値エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "getopt.GetoptError",
      "explanation": "コマンドライン引数の解析に失敗した場合に発生するコマンドライン引数エラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "smtplib.SMTPException",
      "explanation": "SMTP（メール送信）プロトコルでのエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "tkinter.TclError",
      "explanation": "GUIライブラリTkinterの内部でエラーが発生した場合に発生するTcl/Tkエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "uuid.ParseError",
      "explanation": "UUIDとして不正な文字列をパースしようとした場合に発生するUUIDパースエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "wave.Error",
      "explanation": "WAV音声ファイルの処理でエラーが発生した場合に発生するwaveエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "xdrlib.Error",
      "explanation": "XDR（外部データ表現）のパック/アンパックでエラーが発生した場合に発生するXDRエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "zlib.error",
      "explanation": "zlib形式のデータの圧縮/解凍でエラーが発生した場合に発生するzlibエラーです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "requests.exceptions.RequestException",
      "explanation": "requestsライブラリの全般的なエラーの基底クラスです。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "requests.exceptions.HTTPError",
      "explanation": "HTTPステータスコードが4xxか5xxだった場合に発生するHTTPエラーです(requests)。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "requests.exceptions.ConnectionError",
      "explanation": "DNS障害や接続拒否など、ネットワーク接続の問題によって発生する接続エラーです(requests)。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "requests.exceptions.Timeout",
      "explanation": "リクエストがタイムアウトした場合に発生するタイムアウトです(requests)。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "numpy.AxisError",
      "explanation": "配列に存在しない軸（axis）を指定した場合に発生する軸エラーです(NumPy)。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "pandas.errors.EmptyDataError",
      "explanation": "空のデータソース（ファイルなど）を読み込もうとした場合に発生する空データエラーです(Pandas)。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "pandas.errors.ParserError",
      "explanation": "CSVなどのファイルの構造が不正で、解析に失敗した場合に発生するパースエラーです(Pandas)。",
      "category": "エラー/デバッグ"
    },
    {
      "term": "スクリプト (script)",
      "explanation": "スクリプトとは、特定の処理を実行するために書かれた一連の命令が記述されたプログラムファイルのことです。Pythonの場合、`.py` 拡張子を持つファイルがスクリプトファイルです。このファイルをPythonインタプリタに渡すことで、記述された命令が上から順に実行されます。",
      "category": "基本概念"
    },
    {
      "term": "\"\"\"",
      "explanation": "`\"\"\"` は、三重クォート文字列を開始および終了するための記号です。特に、複数行にわたる文字列を記述する場合や、Docstringとして関数やクラスの説明を記述する際に使用されます。",
      "category": "データ型"
    },
    {
      "term": "データ構造 (data structure)",
      "explanation": "データを効率的に格納、管理、アクセスするための特定の形式のことです。Pythonでは、リスト、タプル、辞書、集合などが代表的なデータ構造として提供されています。",
      "category": "基本概念"
    },
    {
      "term": "角括弧",
      "explanation": "Pythonにおいて、リストの定義、リストや文字列などのシーケンスからの要素の取り出し、スライス操作などに使われる記号 `[]` のことです。",
      "category": "記号/構文"
    },
    {
      "term": "文字列を格納",
      "explanation": "プログラミングにおいて、一連の文字（テキストデータ）をデータとして保持することです。通常、変数に文字列型として代入されます。",
      "category": "基本概念"
    },
    {
      "term": "list関数 (list function)",
      "explanation": "`list()` は、イテラブルなオブジェクト（タプル、文字列、範囲など）を新しいリストに変換するための組み込み関数です。",
      "category": "関数"
    },
    {
      "term": "イテラブル (iterable)",
      "explanation": "`for` ループなどで要素を一つずつ取り出すことができるオブジェクトの総称です。リスト、タプル、文字列、辞書、集合、rangeオブジェクトなどがイテラブルに該当します。",
      "category": "基本概念"
    },
    {
      "term": "id関数 (id function)",
      "explanation": "`id()` は、オブジェクトのメモリ上のID（識別番号）を返す組み込み関数です。このIDはオブジェクトの生存期間中一意であり、オブジェクトが同一であるかどうかを確認する際に利用できます。",
      "category": "関数"
    },

    {
      "term": "copyメソッド",
      "explanation": "リストや辞書などのミュータブルなオブジェクトのシャローコピー（浅いコピー）を作成するためのメソッドです。元のオブジェクトとは異なる新しいオブジェクトを生成します。",
      "category": "メソッド"
    },
    {
      "term": "要素を追加",
      "explanation": "リストやその他のコレクションデータ構造に新しい項目を付け加える操作のことです。リストでは `append()` や `insert()` メソッドが使われます。",
      "category": "基本概念"
    },
    {
      "term": "appendメソッド",
      "explanation": "リストの末尾に単一の要素を追加するためのリストメソッドです。",
      "category": "メソッド"
    },
    {
      "term": "extendメソッド",
      "explanation": "リストの末尾に別のイテラブル（リストやタプルなど）のすべての要素を追加するためのリストメソッドです。",
      "category": "メソッド"
    },
    {
      "term": "len(リスト):",
      "explanation": "`len()` 組み込み関数を使って、リストに含まれる要素の数を取得する操作のことです。",
      "category": "関数"
    },
    {
      "term": "空のリスト",
      "explanation": "要素を一つも含まないリストのことです。`[]` で表現されます。",
      "category": "データ型"
    },
    {
      "term": "リストを連結",
      "explanation": "複数のリストを結合して一つの新しいリストを作成する操作のことです。`+` 演算子や `extend()` メソッドが使われます。",
      "category": "基本概念"
    },
    {
      "term": "要素を削除",
      "explanation": "リストやその他のコレクションデータ構造から項目を取り除く操作のことです。リストでは `del` 文、`pop()` メソッド、`remove()` メソッドが使われます。",
      "category": "基本概念"
    },
    {
      "term": "popメソッド",
      "explanation": "リストの指定されたインデックスにある要素を削除し、その削除した要素の値を返すリストメソッドです。インデックスを指定しない場合は、末尾の要素を削除して返します。",
      "category": "メソッド"
    },
    {
      "term": "removeメソッド",
      "explanation": "リスト内で最初に見つかった指定された値の要素を削除するリストメソッドです。値が見つからない場合は `ValueError` を発生させます。",
      "category": "メソッド"
    },
    {
      "term": "リストの途中に挿入",
      "explanation": "リストの既存の要素の間に新しい要素を挿入する操作のことです。`insert()` メソッドが使われます。",
      "category": "基本概念"
    },
    {
      "term": "insertメソッド",
      "explanation": "リストの指定されたインデックスに新しい要素を挿入するためのリストメソッドです。既存の要素は後ろにずれます。",
      "category": "メソッド"
    },
    {
      "term": "全ての要素を削除",
      "explanation": "リストやその他のコレクションデータ構造内のすべての要素を取り除き、空にする操作のことです。リストでは `clear()` メソッドが使われます。",
      "category": "基本概念"
    },
    {
      "term": "clearメソッド",
      "explanation": "リストのすべての要素を削除し、リストを空にするリストメソッドです。",
      "category": "メソッド"
    },
    {
      "term": "splitメソッド",
      "explanation": "文字列を区切り文字（デリミタ）で分割し、その部分文字列のリストを返す文字列メソッドです。",
      "category": "メソッド"
    },
    {
      "term": "joinメソッド",
      "explanation": "文字列のリスト（または他のイテラブル）の要素を、指定された文字列（セパレータ）で連結して一つの新しい文字列を生成する文字列メソッドです。",
      "category": "メソッド"
    },
    {
      "term": "len関数 (len function)",
      "explanation": "オブジェクトの長さ（要素の数）を返す組み込み関数です。文字列、リスト、タプル、辞書、集合など多くのコレクション型に適用できます。",
      "category": "関数"
    },
    {
      "term": "要素数を返す",
      "explanation": "コレクションデータ構造に含まれる要素の総数を結果として返すことです。主に `len()` 関数が行う操作です。",
      "category": "基本概念"
    },
    {
      "term": "リストの要素を複製",
      "explanation": "リストに含まれる要素のコピーを生成することです。これは、元のリストとは独立した新しいリストを作成する操作を指すことが多いです。",
      "category": "基本概念"
    },
    {
      "term": "要素の個数",
      "explanation": "コレクションデータ構造（リスト、タプルなど）に含まれる個々の項目の総数のことです。",
      "category": "基本概念"
    },
    {
      "term": "indexメソッド",
      "explanation": "リスト内で指定された値の要素が最初に見つかったインデックスを返すリストメソッドです。値が見つからない場合は `ValueError` を発生させます。",
      "category": "メソッド"
    },
    {
      "term": "要素のインデックス",
      "explanation": "シーケンス内の特定の要素が位置する番号（インデックス）のことです。",
      "category": "基本概念"
    },
    {
      "term": "sortメソッド",
      "explanation": "リストの要素をその場で（インプレイスで）昇順または降順にソートするリストメソッドです。元のリストが変更されます。",
      "category": "メソッド"
    },
    {
      "term": "キーワード引数のreverse",
      "explanation": "`sort()` メソッドや `sorted()` 関数に渡すキーワード引数で、`reverse=True` と指定することで降順にソートするように指示できます。デフォルトは `False`（昇順）です。",
      "category": "関数"
    },
    {
      "term": "sorted関数 (sorted function)",
      "explanation": "イテラブルなオブジェクトの要素をソートした新しいリストを返す組み込み関数です。元のイテラブルは変更されません。",
      "category": "関数"
    },
    {
      "term": "min関数 (min function)",
      "explanation": "イテラブルなオブジェクト内の最小の要素、または複数の引数の中で最小の値を返す組み込み関数です。",
      "category": "関数"
    },
    {
      "term": "max関数 (max function)",
      "explanation": "イテラブルなオブジェクト内の最大の要素、または複数の引数の中で最大の値を返す組み込み関数です。",
      "category": "関数"
    },
    {
      "term": "ラムダ式 (lambda expression)",
      "explanation": "無名関数（名前のない関数）をその場で簡潔に定義するための構文です。`lambda 引数: 式` の形式で記述し、主に `map()` や `filter()`、`sorted()` などの高階関数に渡す小さな関数として利用されます。",
      "category": "関数"
    },
    {
      "term": "丸括弧",
      "explanation": "Pythonにおいて、関数呼び出しの引数、演算の優先順位の指定、タプルの定義などに使用される括弧です。例えば、`print('Hello')` で関数に引数を渡したり、`result = (1 + 2) * 3` で計算順序を制御したり、`my_tuple = (1, 2, 3)` でタプルを作成したりします。",
      "category": "基本概念"
    },
    {
      "term": "tuple関数 (tuple function)",
      "explanation": "組み込み関数の一つで、引数に指定された反復可能オブジェクト（リストなど）をタプルに変換して返します。引数なしで呼び出すと空のタプルを作成します。",
      "category": "関数"
    },
    {
      "term": "タプルを作成",
      "explanation": "複数の値をカンマで区切り、全体を丸括弧 `()` で囲むか、`tuple()` 関数を使用することで作成します。要素が1つのタプルを作成する場合は、要素の後にカンマが必要です（例: `(1,)`）。",
      "category": "データ型"
    },
    {
      "term": "パッキング (packing)",
      "explanation": "複数の値を一つの変数にまとめて代入する操作で、Pythonがこれらの値を自動的にタプルに変換する機能です。例えば、`x = 1, 2, 3` とすると、`x` にはタプル `(1, 2, 3)` が代入されます。",
      "category": "基本概念"
    },
    {
      "term": "アンパッキング (unpacking)",
      "explanation": "タプルやリストなどのシーケンス型オブジェクトの要素を、一度に複数の変数に展開して代入する操作です。左辺の変数と右辺のシーケンスの要素数が一致する必要があります。",
      "category": "基本概念"
    },
    {
      "term": "星付きの変数",
      "explanation": "アンパッキングの際に変数名の前に `*` をつけることで、シーケンス内の残りの要素すべてをリストとしてその変数にまとめて代入する機能です。これにより、要素数が不定なシーケンスを柔軟にアンパックできます。",
      "category": "基本概念"
    },
    {
      "term": "タプルA+タプルB",
      "explanation": "`+` 演算子を使用して二つ以上のタプルを結合し、新しいタプルを生成する操作です。元のタプルは変更されません。",
      "category": "演算子"
    },
    {
      "term": "タプル*整数",
      "explanation": "`*` 演算子を使用して、タプルの要素を指定された整数回数だけ繰り返した新しいタプルを生成する操作です。例えば `(1, 2) * 3` は `(1, 2, 1, 2, 1, 2)` となります。",
      "category": "演算子"
    },
    {
      "term": "整数*タプル",
      "explanation": "`*` 演算子を使用して、タプルの要素を指定された整数回数だけ繰り返した新しいタプルを生成する操作です。「タプル * 整数」と同じ結果になります。",
      "category": "演算子"
    },
    {
      "term": "len(タプル)",
      "explanation": "組み込み関数 `len()` を使用して、指定されたタプルに含まれる要素の総数を取得します。",
      "category": "関数"
    },
    {
      "term": "min(タプル)",
      "explanation": "組み込み関数 `min()` を使用して、指定されたタプル内の最小の要素を返します。タプル内のすべての要素は比較可能である必要があります。",
      "category": "関数"
    },
    {
      "term": "max(タプル)",
      "explanation": "組み込み関数 `max()` を使用して、指定されたタプル内の最大の要素を返します。タプル内のすべての要素は比較可能である必要があります。",
      "category": "関数"
    },
    {
      "term": "タプル.count(値)",
      "explanation": "タプルのメソッドの一つで、引数に指定された値がタプル内にいくつ存在するかを数え、その数を返します。",
      "category": "メソッド"
    },
    {
      "term": "タプル.index(値)",
      "explanation": "タプルのメソッドの一つで、引数に指定された値がタプル内で最初に出現するインデックスを返します。値が見つからない場合は `ValueError` を発生させます。",
      "category": "メソッド"
    },
    {
      "term": "階層的な構造 (hierarchical structure)",
      "explanation": "データやコードが入れ子状に、木のような構造で整理されている状態を指します。ファイルシステムにおけるディレクトリ構造、Pythonのパッケージやモジュール構造、またはリストや辞書を組み合わせた複雑なデータ表現などで見られます。",
      "category": "基本概念"
    },
    {
      "term": "timeitモジュール",
      "explanation": "Pythonの標準ライブラリの一つで、小さなコードスニペットの実行時間を正確に計測するために使用されます。コードのパフォーマンスを評価し、最適化する際に役立ちます。",
      "category": "モジュール"
    },
    {
      "term": "(集合)値を取り出すときの順序は保証されない",
      "explanation": "Pythonの集合 (set) は順序付けられていないコレクション型であり、要素が格納された順序や特定の順序で要素が取り出されることは保証されません。集合をイテレート（繰り返し処理）するたびに、要素の順序が変わる可能性があります。",
      "category": "データ型"
    },
    {
      "term": "(集合)同じ値を重複して格納することができない",
      "explanation": "集合は、数学的な集合と同様に、重複する要素を持つことができません。同じ値の要素を複数回追加しようとしても、集合にはその要素が1つだけ保持され、集合の要素数は変わりません。",
      "category": "データ型"
    },
    {
      "term": "(集合)イミュータブルな値だけ格納することができる",
      "explanation": "集合の要素はハッシュ可能でなければなりません。つまり、リストや辞書、他の集合といったミュータブル（変更可能）なオブジェクトは集合の要素として格納できません。整数、浮動小数点数、文字列、タプルなどのイミュータブルなオブジェクトのみが要素として格納できます。",
      "category": "データ型"
    },
    {
      "term": "波括弧",
      "explanation": "Pythonで集合を直接定義する際に使用する記号です。例えば、`{1, 2, 'a'}` のように記述することで集合を作成できます。ただし、空の集合を `{}` で作成しようとすると辞書になるため、空の集合を作成するには `set()` 関数を使用します。",
      "category": "データ型"
    },
    {
      "term": "set関数 (set function)",
      "explanation": "イテラブル（リスト、タプル、文字列など）を引数として受け取り、その要素から重複を除いた新しい集合を生成する組み込み関数です。`set([1, 2, 2, 3])` のように使うと `{1, 2, 3}` が生成されます。また、引数なしで `set()` と呼び出すと空の集合を作成します。",
      "category": "関数"
    },
    {
      "term": "所属検査演算",
      "explanation": "特定の要素がコレクション（リスト、タプル、集合など）内に存在するかどうかを確認する操作のことです。主に `in` 演算子と `not in` 演算子を用いて行われます。",
      "category": "演算子"
    },
    {
      "term": "in演算子",
      "explanation": "ある要素がコレクション（文字列、リスト、タプル、集合、辞書など）のメンバーであるかどうかを判定するために使用される演算子です。要素がコレクション内に存在すれば `True` を、存在しなければ `False` を返します。集合に対しては、要素の存在チェックを非常に高速に行うことができます。",
      "category": "演算子"
    },
    {
      "term": "not in演算子",
      "explanation": "ある要素がコレクション（文字列、リスト、タプル、集合、辞書など）のメンバーではないかどうかを判定するために使用される演算子です。要素がコレクション内に存在しなければ `True` を、存在すれば `False` を返します。`in` 演算子の逆の判定を行います。",
      "category": "演算子"
    },
    {
      "term": "ハッシュ(hash)法",
      "explanation": "データを格納・検索する際に、データのキー（集合の場合は要素自体）から直接、そのデータが格納されている場所（インデックス）を計算する手法です。これにより、平均的に非常に高速な検索・挿入・削除が可能になります。Pythonの辞書や集合の内部実装に利用されています。",
      "category": "データ構造/アルゴリズム"
    },
    {
      "term": "リストのtimeitモジュール",
      "explanation": "Pythonの `timeit` モジュールは、小さなコードスニペットの実行時間を測定するために使用されます。特に、リストの要素追加、検索、削除、ソートなどの操作が、他のデータ構造（タプルや集合）と比べてどの程度のパフォーマンスを持つかを比較・評価する際に役立ちます。",
      "category": "ツール"
    },
    {
      "term": "タプルのtimeitモジュール",
      "explanation": "Pythonの `timeit` モジュールは、タプル操作のパフォーマンスを測定するためにも使用されます。タプルはイミュータブルであるため、リストとは異なる性能特性を持つ場合があります。例えば、タプルの作成やイテレーションの速度などを測定するのに適しています。",
      "category": "ツール"
    },
    {
      "term": "集合のtimeitモジュール",
      "explanation": "Pythonの `timeit` モジュールは、集合操作（要素の追加、削除、所属検査、集合演算など）のパフォーマンスを測定するために使用されます。集合は内部的にハッシュテーブルを使用するため、所属検査などの特定の操作では、リストやタプルよりも非常に高速であることが `timeit` を使って確認できます。",
      "category": "ツール"
    },
    {
      "term": "集合の要素の追加・削除",
      "explanation": "集合はミュータブルなデータ型であるため、初期作成後でも要素を後から追加したり削除したりすることができます。これには `add()`, `remove()`, `discard()`, `pop()`, `clear()` といったメソッドを使用します。",
      "category": "関数"
    },
    {
      "term": "addメソッド",
      "explanation": "集合に単一の要素を追加するためのメソッドです。追加しようとする要素がすでに集合内に存在する場合でもエラーは発生せず、集合は変更されません。",
      "category": "関数"
    },
    {
      "term": "discardメソッド",
      "explanation": "集合から指定された要素を削除するためのメソッドです。`remove()` メソッドと異なり、削除しようとする要素が集合内に存在しない場合でもエラーを発生させず、何も行いません。",
      "category": "関数"
    },
    {
      "term": "集合の累算代入文",
      "explanation": "集合に対する特定の演算（和集合、積集合、差集合、対称差）を適用し、その結果を元の集合に直接代入して更新する短縮記法です。例えば `A |= B` は `A = A | B` と同じ意味になります。",
      "category": "演算子"
    },
    {
      "term": "集合の特有の演算を使う",
      "explanation": "Pythonの集合は、和集合、積集合、差集合、対称差といった数学的な集合演算を、専用の演算子（`|`, `&`, `-`, `^`）やメソッド（`union()`, `intersection()`, `difference()`, `symmetric_difference()`）を使って効率的に行うことができます。",
      "category": "演算子"
    },
    {
      "term": "集合A|集合B",
      "explanation": "集合Aと集合Bの和集合（Union）を計算する演算子です。両方の集合に含まれるすべてのユニークな要素からなる新しい集合を返します。例えば `{1, 2} | {2, 3}` は `{1, 2, 3}` を返します。",
      "category": "演算子"
    },
    {
      "term": "集合A&集合B",
      "explanation": "集合Aと集合Bの積集合（Intersection）を計算する演算子です。両方の集合に共通して含まれる要素からなる新しい集合を返します。例えば `{1, 2} & {2, 3}` は `{2}` を返します。",
      "category": "演算子"
    },
    {
      "term": "集合A-集合B",
      "explanation": "集合Aと集合Bの差集合（Difference）を計算する演算子です。集合Aにのみ含まれ、集合Bには含まれない要素からなる新しい集合を返します。例えば `{1, 2} - {2, 3}` は `{1}` を返します。",
      "category": "演算子"
    },
    {
      "term": "集合A^集合B",
      "explanation": "集合Aと集合Bの対称差（Symmetric Difference）を計算する演算子です。両方の集合のどちらか一方にのみ含まれる要素からなる新しい集合を返します（共通する要素は含まれない）。例えば `{1, 2} ^ {2, 3}` は `{1, 3}` を返します。",
      "category": "演算子"
    },
    {
      "term": "集合A|=集合B",
      "explanation": "集合Aに集合Bの要素をすべて追加し、集合A自体を和集合の結果で更新する累算代入演算子です。`A.update(B)` と同等です。",
      "category": "演算子"
    },
    {
      "term": "集合A&=集合B",
      "explanation": "集合Aを、集合Aと集合Bの積集合の結果で更新する累算代入演算子です。つまり、AからBに存在しない要素をすべて削除します。`A.intersection_update(B)` と同等です。",
      "category": "演算子"
    },
    {
      "term": "集合A-=集合B",
      "explanation": "集合Aから集合Bに含まれる要素をすべて削除し、集合A自体を差集合の結果で更新する累算代入演算子です。`A.difference_update(B)` と同等です。",
      "category": "演算子"
    },
    {
      "term": "集合A^=集合B",
      "explanation": "集合Aを、集合Aと集合Bの対称差の結果で更新する累算代入演算子です。つまり、AからBに共通する要素を削除し、Bにのみ存在する要素をAに追加します。`A.symmetric_difference_update(B)` と同等です。",
      "category": "演算子"
    },
    {
      "term": "ハッシュテーブル (hash table)",
      "explanation": "ハッシュ法を用いてデータを格納・検索するデータ構造です。キーと値のペア（辞書の場合）やユニークな要素（集合の場合）を効率的に管理するために設計されており、平均的にはO(1)（定数時間）の計算量でアクセスできます。Pythonの辞書 (dict) と集合 (set) は内部的にハッシュテーブルで実装されています。",
      "category": "データ構造/アルゴリズム"
    },
    {
      "term": "ハッシュの衝突 (hash collision)",
      "explanation": "異なる2つのキー（集合の場合は要素）が、ハッシュ関数によって同じハッシュ値（ハッシュテーブル内の同じインデックス）を生成してしまう現象です。ハッシュテーブルの性能に影響を与えるため、衝突を解決する機構（衝突解決法）が必要です。",
      "category": "データ構造/アルゴリズム"
    },
    {
      "term": "開番地法 (open addressing)",
      "explanation": "ハッシュの衝突が発生した際に、ハッシュテーブル内の空いている次の場所を探してデータを格納する衝突解決手法の一つです。線形プロービング、二次プロービング、ダブルハッシングなどの方法があります。検索時も同様に空き場所を探して要素を見つけます。",
      "category": "データ構造/アルゴリズム"
    },
    {
      "term": "連鎖法 (chaining)",
      "explanation": "ハッシュの衝突が発生した際に、同じハッシュ値を持つ複数の要素を連結リスト（または別のデータ構造）で管理する衝突解決手法の一つです。ハッシュテーブルの各バケット（配列の各要素）に、そのバケットに対応する要素を格納する連結リストへのポインタを持ちます。",
      "category": "データ構造/アルゴリズム"
    },
    {
      "term": "連結リスト (linked list)",
      "explanation": "データをノードとして保持し、各ノードが次のノードへの参照（ポインタ）を持つことで、データを線形に連結したデータ構造です。配列のように連続したメモリ領域を必要とせず、要素の挿入や削除が効率的に行えます。ハッシュテーブルの連鎖法で衝突した要素を格納するのによく使われます。",
      "category": "データ構造/アルゴリズム"
    },
    {
      "term": "ハッシュ計算による乱数",
      "explanation": "ハッシュ関数は、その入力に対して予測不能で一様に見える出力を生成する特性を持つため、特定の状況で「乱数」のような振る舞いを模倣するために利用されることがあります。ただし、これは暗号学的な意味での真の乱数ではなく、セキュリティが要求される場面での利用は避けるべきです。",
      "category": "データ構造/アルゴリズム"
    },
    {
      "term": "hash flooding(ハッシュの氾濫)",
      "explanation": "悪意のある攻撃者が、ハッシュテーブルの性能を意図的に低下させることを目的として、多くのハッシュ衝突を引き起こすような入力データを与える攻撃手法です。これにより、ハッシュテーブルの操作が平均O(1)から最悪O(N)に劣化し、サービス拒否 (DoS) を引き起こす可能性があります。",
      "category": "データ構造/アルゴリズム"
    },
    {
      "term": "ハッシュの計算",
      "explanation": "ある入力値（キーやオブジェクト）に対して、ハッシュ関数を適用し、固定長の数値（ハッシュ値）を生成する処理のことです。このハッシュ値は、ハッシュテーブル内のデータの格納位置を効率的に決定するために使われます。",
      "category": "データ構造/アルゴリズム"
    },
    {
      "term": "hash関数 (hash function)",
      "explanation": "入力データを受け取り、それを固定長の値（ハッシュ値）に変換する関数です。同じ入力に対しては常に同じハッシュ値を返し、異なる入力に対しては異なるハッシュ値を返すように設計されています（ただし、衝突は発生し得る）。Pythonには組み込みの `hash()` 関数があり、オブジェクトのハッシュ値を返します。ハッシュ可能（hashable）なオブジェクトのみがこの関数でハッシュ値を生成できます。",
      "category": "関数"
    },
    {
      "term": "Pythonの辞書とは",
      "explanation": "Pythonの辞書（dictionary）は、キーと値のペアを格納する順序付けられた（Python 3.7以降）ミュータブルなデータ構造です。各キーは辞書内で一意でなければなりませんが、値は重複しても構いません。要素の追加、削除、変更が可能です。キーを格納した順序が保持される特性があります。",
      "category": "データ型"
    },
    {
      "term": "辞書のキーの制約",
      "explanation": "Pythonの辞書にキーとして格納できるのは、数値、文字列、タプルなど、ハッシュ可能でイミュータブル（変更不可能）なオブジェクトに限られます。リストや辞書のようなミュータブルなオブジェクトはキーとして使用できません。一方、値としてはミュータブルなオブジェクトもイミュータブルなオブジェクトも格納可能です。",
      "category": "データ型"
    },
    {
      "term": "辞書リテラル (dictionary literal)",
      "explanation": "辞書リテラルは、波括弧 `{}` を使用して辞書を直接記述する構文です。`{キー1: 値1, キー2: 値2, ...}` の形式でキーと値をコロン `:` で区切り、ペアをカンマ `,` で区切って記述します。",
      "category": "データ型"
    },
    {
      "term": "dict関数 (dict function)",
      "explanation": "`dict()` 関数は、新しい空の辞書を作成したり、他のデータ構造（キーと値のペアのリストなど）から辞書を作成したりするために使用されます。例えば、`dict([('a', 1), ('b', 2)])` のように使います。",
      "category": "関数"
    },
    {
      "term": "dict関数とキーワード引数",
      "explanation": "`dict()` 関数は、キーワード引数を使用して辞書を作成することもできます。この場合、キーワード引数の名前が辞書のキー（文字列）となり、引数の値が辞書の値となります。例: `dict(apple=1, banana=2)` は `{'apple': 1, 'banana': 2}` を作成します。",
      "category": "関数"
    },
    {
      "term": "辞書の値を取得",
      "explanation": "辞書から値を取得するには、角括弧 `[]` の中にキーを指定します。例: `my_dict['key_name']`。指定したキーが存在しない場合、`KeyError` が発生します。",
      "category": "データ型"
    },
    {
      "term": "getメソッド",
      "explanation": "`get()` メソッドは、辞書から指定したキーに対応する値を取得します。キーが存在しない場合でも `KeyError` を発生させず、デフォルトで `None` を返します。また、第二引数にデフォルト値を指定することで、キーが存在しない場合にその値を返すように設定できます。例: `my_dict.get('key_name', default_value)`。",
      "category": "関数"
    },
    {
      "term": "辞書に要素を追加",
      "explanation": "辞書に新しい要素を追加するには、新しいキーを角括弧 `[]` で指定し、それに値を代入します。例: `my_dict['new_key'] = 'new_value'`。もし指定したキーが既に存在する場合、既存の値は上書きされます。",
      "category": "データ型"
    },
    {
      "term": "辞書に要素を削除(del)",
      "explanation": "`del` 文は、辞書から指定したキーとその値のペアを削除するために使用されます。例: `del my_dict['key_to_delete']`。存在しないキーを指定すると `KeyError` が発生します。",
      "category": "基本概念"
    },
    {
      "term": "辞書に要素を削除(pop)",
      "explanation": "`pop()` メソッドは、指定したキーに対応する要素を辞書から削除し、その削除された値自体を返します。キーが存在しない場合、`KeyError` が発生しますが、第二引数にデフォルト値を指定すると、キーがない場合にその値を返して `KeyError` を回避できます。例: `my_dict.pop('key_to_delete', default_value)`。",
      "category": "関数"
    },
    {
      "term": "辞書に全ての要素を削除(clear)",
      "explanation": "`clear()` メソッドは、辞書内のすべてのキーと値のペアを削除し、辞書を空にします。辞書オブジェクト自体は残りますが、中身は空になります。例: `my_dict.clear()`。",
      "category": "関数"
    },
    {
      "term": "辞書のキーを含むか(in演算子)",
      "explanation": "`in` 演算子は、特定のキーが辞書内に存在するかどうかを判定するために使用されます。キーが存在すれば `True` を、存在しなければ `False` を返します。例: `'key_name' in my_dict`。",
      "category": "演算子"
    },
    {
      "term": "辞書のキーを含まないか(not in演算子)",
      "explanation": "`not in` 演算子は、特定のキーが辞書内に存在しないかどうかを判定するために使用されます。キーが存在しなければ `True` を、存在すれば `False` を返します。`in` 演算子の逆の判定を行います。例: `'key_name' not in my_dict`。",
      "category": "演算子"
    },
    {
      "term": "辞書ビューオブジェクト (dictionary view object)",
      "explanation": "辞書ビューオブジェクトは、辞書のキー、値、またはキーと値のペアへの動的なビューを提供するオブジェクトです。これらは辞書の変更にリアルタイムで追従します。`keys()`, `values()`, `items()` メソッドが返します。リストのようにインデックスでアクセスすることはできませんが、イテラブル（反復可能）です。",
      "category": "データ型"
    },
    {
      "term": "キーの一覧を取得(keysメソッド)",
      "explanation": "`keys()` メソッドは、辞書のすべてのキーを含む辞書ビューオブジェクトを返します。このビューは辞書の変更を反映します。例: `my_dict.keys()`。",
      "category": "関数"
    },
    {
      "term": "値の一覧を取得(valuesメソッド)",
      "explanation": "`values()` メソッドは、辞書のすべての値を含む辞書ビューオブジェクトを返します。このビューは辞書の変更を反映します。例: `my_dict.values()`。",
      "category": "関数"
    },
    {
      "term": "キーと値の組の一覧を取得(itemsメソッド)",
      "explanation": "`items()` メソッドは、辞書のすべてのキーと値のペア（タプルとして）を含む辞書ビューオブジェクトを返します。このビューは辞書の変更を反映します。主に `for` ループで辞書のキーと値を同時に反復処理する際に便利です。例: `my_dict.items()`。",
      "category": "関数"
    },
    {
      "term": "条件分岐 (conditional branch)",
      "explanation": "条件分岐とは、プログラムの実行フローを、特定の条件に基づいて変更する制御構造のことです。Pythonでは主に `if`、`elif`、`else` 文を使って実現されます。これにより、条件に応じて異なる処理を実行することが可能になります。",
      "category": "制御構文"
    },
    {
      "term": "input関数 (input function)",
      "explanation": "`input()` はPythonの組み込み関数の一つで、プログラムの実行中にユーザーからのキーボード入力を受け取るために使われます。引数に文字列を渡すと、それがプロンプトとして表示されます。ユーザーが入力してEnterキーを押すと、その内容が文字列として関数の戻り値として返されます。",
      "category": "関数"
    },
    {
      "term": "else節 (else clause)",
      "explanation": "`else` 節は、`if` 文や `if-elif` 文と組み合わせて使用されるブロックです。`if` または `elif` のどの条件も「真」と評価されなかった場合に、この `else` 節に続くインデントされたコードブロックが実行されます。常に `if` または `elif` の後に配置されます。",
      "category": "制御構文"
    },
    {
      "term": "elif文 (elif statement)",
      "explanation": "`elif` 文は、`if` 文の後に複数の条件を順に評価したい場合に使用します。これは「else if」（さもなくば、もし〜ならば）の短縮形です。前の `if` 文や `elif` 文の条件が「偽」（False）だった場合に、次の `elif` の条件式が評価され、それが「真」であればそのブロックが実行されます。",
      "category": "制御構文"
    },
    {
      "term": "条件式 (conditional expression)",
      "explanation": "条件式とは、評価すると真（True）または偽（False）のいずれかのブール値になる式のことです。`if` 文や `elif` 文の後に記述され、その結果に基づいてプログラムの実行経路が決定されます。比較演算子（例: `x > 10`）や論理演算子（例: `a and b`）をよく用いて記述されます。",
      "category": "基本概念"
    },
    {
      "term": "三項演算子 (ternary operator)",
      "explanation": "三項演算子（Conditional Expression）は、条件に基づいて2つの値のいずれかを選択する簡潔な方法を提供する演算子です。Pythonでは `値1 if 条件式 else 値2` の形式で記述され、`条件式` が真と評価されれば `値1` が、偽と評価されれば `値2` が返されます。短い条件分岐を一行で記述する際に便利です。",
      "category": "演算子"
    },
    {
      "term": "式A if 条件の式X else 式B if 条件の式Y else 式Cの解説",
      "explanation": "これは、Pythonの三項演算子をネスト（入れ子）にした例です。まず `条件の式X` が評価されます。もし真であれば `式A` の結果が返されます。偽であった場合、次に `条件の式Y` が評価されます。`条件の式Y` が真であれば `式B` の結果が返され、偽であれば最終的に `式C` の結果が返されます。複数の条件に基づいて値を決定する際に使用できますが、複雑になりすぎると可読性が低下する可能性があります。",
      "category": "演算子"
    },
    {
      "term": "式A if 条件の式X else 式B if 条件の式Y else 式C if 条件の式Z else 式Dの解説",
      "explanation": "この形式は、三項演算子のさらなるネストの例です。最初に `条件の式X` が評価され、真なら `式A` の結果が返されます。偽の場合、次に `条件の式Y` が評価され、真なら `式B` の結果が返されます。これも偽の場合、`条件の式Z` が評価され、真なら `式C` の結果が返されます。最終的に、どの条件も真でなかった場合は `式D` の結果が返されます。複数の段階的な条件に基づいて値を決定する場合に用いられますが、可読性を考慮して通常の `if-elif-else` 文を使う方が適切な場合もあります。",
      "category": "演算子"
    },
    {
      "term": "インタプリタ (interpreter)",
      "explanation": "インタプリタは、プログラミング言語で書かれたコードを一行ずつ読み込み、その場で機械が実行できる形式に変換しながら実行していくプログラムです。コンパイラのように事前に全てのコードを変換するのではなく、実行と変換を同時に行います。Pythonはインタプリタ言語の代表例です。",
      "category": "実行環境"
    },
    {
      "term": "Pythonインタプリタ",
      "explanation": "Pythonインタプリタとは、Python言語で書かれたプログラムコードを解釈し、実行するソフトウェアのことです。通常、ターミナルで `python` と入力して起動します。これにより、Pythonコードを直接入力して実行したり、Pythonスクリプトファイルを実行したりすることができます。",
      "category": "実行環境"
    },
    {
      "term": "対話モード (interactive mode)",
      "explanation": "Pythonインタプリタを起動した際に、一行ずつPythonのコードを入力し、その場で実行結果を確認できるモードです。すぐにコードの動作を確認したい場合や、簡単な計算、関数の挙動を試したいときに非常に便利です。REPL (Read-Eval-Print Loop) とも呼ばれます。",
      "category": "実行環境"
    },
    {
      "term": "1次プロンプト",
      "explanation": "Pythonの対話モードで、新しい命令の入力を待っている状態を示すプロンプトです。通常 `>>>` と表示されます。この状態のときに、新しいPythonの文や式を入力します。",
      "category": "実行環境"
    },
    {
      "term": "2次プロンプト",
      "explanation": "Pythonの対話モードで、前の行のコードがまだ完了しておらず、続きの入力が必要な状態を示すプロンプトです。通常 `...` と表示されます。例えば、`if` 文や `for` 文のように、次の行にインデントされたブロックが続く場合などに現れます。",
      "category": "実行環境"
    },
    {
      "term": "#",
      "explanation": "`#` はPythonにおいて、コメントの開始を示す記号です。`#` の後ろに書かれた文字列は、その行の終わりまでプログラムの実行時には無視されます。一行コメントを作成する際に使用します。",
      "category": "コーディング規約"
    },
    {
      "term": "リスト (list)",
      "explanation": "リストは順序があり (Ordered)、変更可能 (Mutable) で、要素の重複を許容するデータ型です。様々な種類のデータを順番に格納したい場合や、後から追加・削除・変更が必要な場合に最適です。",
      "category": "データ型"
    },
    {
      "term": "タプル (tuple)",
      "explanation": "タプルは順序があり (Ordered)、変更不可能 (Immutable) で、要素の重複を許容するデータ型です。座標データや設定値など、一度定義したら変更しない（されたくない）データの格納に利用されます。",
      "category": "データ型"
    },
    {
      "term": "集合 (set)",
      "explanation": "集合は順序なし (Unordered)、変更可能 (Mutable) で、要素の重複を許容しないデータ型です。要素の重複をなくしたい場合や、和集合・積集合などの数学的な集合演算を行いたい場合に強力です。",
      "category": "データ型"
    },
    {
      "term": "辞書 (dict)",
      "explanation": "辞書はキーと値のペアで構成され、変更可能 (Mutable) です。キーの重複は許容しません（Python 3.7以降は追加順が保持されます）。名前と電話番号のように、意味の対応するデータをセットで管理したい場合に最適です。",
      "category": "データ型"
    },
    {
      "term": "リストの要素追加 (append())",
      "explanation": "リストの末尾に1つの要素を追加するメソッドです。例: `a = [1, 2]; a.append(3);` 結果: `[1, 2, 3]`",
      "category": "データ型操作 (リスト)"
    },
    {
      "term": "リストの複数要素追加 (extend())",
      "explanation": "リストの末尾に複数の要素（イテラブルなオブジェクト）を連結します。例: `a = [1, 2]; a.extend([3, 4]);` 結果: `[1, 2, 3, 4]`",
      "category": "データ型操作 (リスト)"
    },
    {
      "term": "リストの要素削除 (remove())",
      "explanation": "リストから指定した値の最初の要素を削除します。要素が存在しない場合はエラーになります。例: `a = [1, 2, 3]; a.remove(2);` 結果: `[1, 3]`",
      "category": "データ型操作 (リスト)"
    },
    {
      "term": "リストの要素削除と取得 (pop())",
      "explanation": "リストから指定した添字（インデックス）の要素を削除し、その要素を返します。添字を省略すると末尾の要素を削除して返します。例: `a = [1, 2, 3]; val = a.pop(1);` 結果: `val=2, a=[1, 3]`",
      "category": "データ型操作 (リスト)"
    },
    {
      "term": "リストの全要素削除 (clear())",
      "explanation": "リスト内の全ての要素を削除し、リストを空にします。例: `a = [1, 2, 3]; a.clear();` 結果: `[]`",
      "category": "データ型操作 (リスト)"
    },
    {
      "term": "リストの要素変更 (リスト[添字] = 値)",
      "explanation": "リストの指定した添字の要素を新しい値で上書きします。例: `a = [1, 2, 3]; a[1] = 99;` 結果: `[1, 99, 3]`",
      "category": "データ型操作 (リスト)"
    },
    {
      "term": "リストの要素取得 (リスト[添字])",
      "explanation": "リストの指定した添字の要素を取得します。例: `a = [10, 20, 30]; val = a[1];` 結果: `20`",
      "category": "データ型操作 (リスト)"
    },
    {
      "term": "リスト内の要素検索 (in 演算子)",
      "explanation": "指定した値がリストに含まれるかを確認します。計算速度はシーケンスの長さに比例して遅い傾向にあります。例: `2 in [1, 2, 3];` 結果: `True`",
      "category": "データ型操作 (リスト)"
    },
    {
      "term": "リストの要素数取得 (len())",
      "explanation": "リストの要素（項目の数）を返します。例: `len([1, 2, 3]);` 結果: `3`",
      "category": "データ型操作 (リスト)"
    },
    {
      "term": "リストのソート (sort()/sorted())",
      "explanation": "`sort()` メソッドは元のリストをインプレースで並べ替えます。`sorted()` 関数は元のリストを変更せずに、並べ替えられた新しいリストを返します。",
      "category": "データ型操作 (リスト)"
    },
    {
      "term": "タプルの変更不可",
      "explanation": "タプルは変更不可能なデータ型 (Immutable) です。そのため、要素の追加、削除、変更といった操作は直接行えません。",
      "category": "データ型操作 (タプル)"
    },
    {
      "term": "タプルの要素取得 (タプル[添字])",
      "explanation": "タプルの指定した添字の要素を取得します。タプルは変更できませんが、要素の取得は可能です。例: `t = (10, 20, 30); val = t[1];` 結果: `20`",
      "category": "データ型操作 (タプル)"
    },
    {
      "term": "タプル内の要素検索 (in 演算子)",
      "explanation": "指定した値がタプルに含まれるかを確認します。計算速度はシーケンスの長さに比例して遅い傾向にあります。例: `2 in (1, 2, 3);` 結果: `True`",
      "category": "データ型操作 (タプル)"
    },
    {
      "term": "タプルの要素数取得 (len())",
      "explanation": "タプルの要素（項目の数）を返します。例: `len((1, 2, 3));` 結果: `3`",
      "category": "データ型操作 (タプル)"
    },
    {
      "term": "タプルのソート (sorted())",
      "explanation": "`sorted()` 関数はタプルの要素を並べ替えた新しいリストを返します。元のタプルは変更されません。",
      "category": "データ型操作 (タプル)"
    },
    {
      "term": "集合の要素追加 (add())",
      "explanation": "集合に1つの要素を追加します。集合に順序はないため、追加後の位置は不定です。集合は重複する要素を許容しないため、既存の要素を追加しても変化しません。例: `s = {1, 2}; s.add(3);` 結果: `{1, 2, 3}`",
      "category": "データ型操作 (集合)"
    },
    {
      "term": "集合の複数要素追加 (update())",
      "explanation": "別のイテラブルなオブジェクトから複数の要素を集合に追加します。重複する要素は無視されます。例: `s = {1, 2}; s.update({3, 4});` 結果: `{1, 2, 3, 4}`",
      "category": "データ型操作 (集合)"
    },
    {
      "term": "集合の要素削除 (remove()/discard())",
      "explanation": "指定した要素を集合から削除します。`remove()` は要素が存在しない場合に `KeyError` を発生させますが、`discard()` は要素が存在しない場合でも何もせず、エラーにはなりません。",
      "category": "データ型操作 (集合)"
    },
    {
      "term": "集合の要素削除と取得 (pop())",
      "explanation": "集合から任意の要素を1つ削除し、その要素を返します。集合は順序がないため、どの要素が削除されるかは不定です。集合が空の場合に呼び出すと `KeyError` が発生します。例: `s = {1, 2, 3}; val = s.pop();`",
      "category": "データ型操作 (集合)"
    },
    {
      "term": "集合の全要素削除 (clear())",
      "explanation": "集合内の全ての要素を削除し、集合を空にします。例: `s = {1, 2, 3}; s.clear();` 結果: `set()`",
      "category": "データ型操作 (集合)"
    },
    {
      "term": "集合の要素変更",
      "explanation": "集合は順序がないため、特定の場所の要素を上書きする概念はありません。要素を変更したい場合は、一度削除してから新しい要素を追加する必要があります。",
      "category": "データ型操作 (集合)"
    },
    {
      "term": "集合内の要素検索 (in 演算子)",
      "explanation": "指定した値が集合に含まれるかを確認します。ハッシュテーブルに基づいているため、計算速度は高速です。例: `2 in {1, 2, 3};` 結果: `True`",
      "category": "データ型操作 (集合)"
    },
    {
      "term": "集合の要素数取得 (len())",
      "explanation": "集合の要素（項目の数）を返します。例: `len({1, 2, 3});` 結果: `3`",
      "category": "データ型操作 (集合)"
    },
    {
      "term": "集合のソート (sorted())",
      "explanation": "`sorted()` 関数は集合の要素をリストとして並べ替えた新しいリストを返します。集合自体は順序を持たないため変更されません。",
      "category": "データ型操作 (集合)"
    },
    {
      "term": "辞書の要素追加/更新 (辞書[キー] = 値)",
      "explanation": "指定したキーに対応する値を設定します。キーが存在しない場合は新しい要素として追加され、キーが既存の場合はその値が上書きされます。例: `d = {'a':1}; d['b'] = 2;` 結果: `{'a':1, 'b':2}`。既存キーの更新例: `d = {'a':1}; d['a'] = 99;` 結果: `{'a':99}`",
      "category": "データ型操作 (辞書)"
    },
    {
      "term": "辞書の複数要素追加/更新 (update())",
      "explanation": "別の辞書やキーと値のペアのイテラブルを使って、現在の辞書を更新します。指定されたキーが既存の場合は値が上書きされ、存在しない場合は新しい要素が追加されます。例: `d = {'a':1}; d.update({'b':2});` 結果: `{'a':1, 'b':2}`",
      "category": "データ型操作 (辞書)"
    },
    {
      "term": "辞書の要素削除 (del 辞書[キー])",
      "explanation": "指定したキーとそのキーに対応する値を辞書から削除します。キーが存在しない場合は `KeyError` を発生させます。例: `d = {'a':1, 'b':2}; del d['b'];` 結果: `{'a':1}`",
      "category": "データ型操作 (辞書)"
    },
    {
      "term": "辞書の要素削除と取得 (pop(キー))",
      "explanation": "指定したキーとその値のペアを辞書から削除し、その値を返します。キーが存在しない場合はエラーになるか、指定されたデフォルト値を返します。例: `d = {'a':1, 'b':2}; val = d.pop('b');` 結果: `val=2, d={'a':1}`",
      "category": "データ型操作 (辞書)"
    },
    {
      "term": "辞書の全要素削除 (clear())",
      "explanation": "辞書内の全てのキーと値のペアを削除し、辞書を空にします。例: `d = {'a':1, 'b':2}; d.clear();` 結果: `{}`",
      "category": "データ型操作 (辞書)"
    },
    {
      "term": "辞書の要素取得 (辞書[キー]/get(キー))",
      "explanation": "指定したキーに対応する値を取得します。`辞書[キー]` の形式はキーが存在しない場合に `KeyError` を発生させますが、`get(キー)` メソッドはキーが存在しない場合に `None` を返すか、デフォルト値を指定できます。例: `d = {'a':1}; val = d.get('a');` 結果: `1`",
      "category": "データ型操作 (辞書)"
    },
    {
      "term": "辞書内のキー検索 (in 演算子)",
      "explanation": "指定したキーが辞書に含まれるかを確認します。ハッシュテーブルに基づいているため、計算速度は高速です。例: `'a' in {'a':1};` 結果: `True`",
      "category": "データ型操作 (辞書)"
    },
    {
      "term": "辞書の要素数取得 (len())",
      "explanation": "辞書内のキーと値のペアの数（項目数）を返します。例: `len({'a':1, 'b':2});` 結果: `2`",
      "category": "データ型操作 (辞書)"
    },
    {
      "term": "辞書のキーのソート (sorted())",
      "explanation": "`sorted()` 関数は辞書のキーを並べ替えた新しいリストを返します。辞書自体は（Python 3.7以降で挿入順を保持するものの）ソートされた状態にはなりません。",
      "category": "データ型操作 (辞書)"
    },
    {
      "term": "if文 (if statement)",
      "explanation": "プログラミングにおいて、「もし（if）○○という条件を満たしているなら、××という処理をする」というように、条件によって処理の流れを変えるための命令です。天気予報で「もし晴れなら、洗濯をする」と考えるのに似ています。",
      "category": "条件分岐"
    },
    {
      "term": "条件分岐 (conditional branch)",
      "explanation": "プログラムが特定の条件にもとづいて、次に実行する処理を決めることです。if文などがその代表的な命令で、「Aという条件なら処理1を、Bという条件なら処理2を実行する」といったように、道筋を分ける役割を持ちます。",
      "category": "条件分岐"
    },
    {
      "term": "input関数 (input function)",
      "explanation": "プログラムを実行しているユーザーに、キーボードから文字などを入力してもらうための命令（関数）です。 プログラムがユーザーに質問を投げかけ、その答えを受け取るような対話的な動きを実現できます。",
      "category": "入出力"
    },
    {
      "term": "プロンプト",
      "explanation": "input関数を使う際に、ユーザーに何を入力してほしいかを示すために表示するメッセージのことです。「お名前を入力してください：」のような、入力を促す案内のテキストを指します。",
      "category": "入出力"
    },
    {
      "term": "else節 (else clause)",
      "explanation": "if文の条件が満たされなかった（Falseだった）場合に実行される処理のまとまりです。「もし晴れなら洗濯、そうでなければ（else）部屋干し」のように、条件に合わなかった場合の代替案を指定します。",
      "category": "条件分岐"
    },
    {
      "term": "elif節 (elif clause)",
      "explanation": "「else if」の略で、最初のif文の条件が満たされず、かつ、次の別の条件を確かめたいときに使います。「もし晴れなら洗濯、そうでなくもし曇りなら（elif）買い物、そうでなければ部屋干し」のように、複数の条件を順番に試すことができます。",
      "category": "条件分岐"
    },
    {
      "term": "条件式 (conditional expression)",
      "explanation": "if文などで使われる、「AはBより大きい」や「CはDと等しい」といった、正しい（True）か間違っている（False）かを判断できる式のことです。この式の結果によって、プログラムの次の動きが決まります。",
      "category": "条件分岐"
    },
    {
      "term": "三項演算子 (ternary operator)",
      "explanation": "if-else文を一行でシンプルに書くための特別な書き方です。「条件が正しいときの値 if 条件式 else 条件が間違いだったときの値」という形で記述します。",
      "category": "条件分岐"
    },
    {
      "term": "条件の式XがTrueならば、式Aの値を返す。条件の式XがFalseで、条件の式YがTrueならば、式Bの値を返す。条件の式XがFalseで、条件の式YがFalseならば、式Cの値を返す",
      "explanation": "これは、if-elif-else文の構造を言葉で説明したものです。プログラムでは「if X: A elif Y: B else: C」のように書かれ、複数の条件を順番に評価して、最初にあてはまった処理を実行します。",
      "category": "条件分岐"
    },
    {
      "term": "for文 (for statement)",
      "explanation": "リストや文字列など、複数の要素が集まったデータの中から、要素を一つずつ順番に取り出して、同じ処理を繰り返すための命令です。 「生徒名簿の各生徒に対して、名前を読み上げる」のような処理に使われます。",
      "category": "繰り返し"
    },
    {
      "term": "繰り返し (loop / iteration)",
      "explanation": "プログラミングにおいて、同じ、あるいは似たような処理を何度も実行することです。「ループ」とも呼ばれます。for文やwhile文がそのための代表的な命令です。",
      "category": "繰り返し"
    },
    {
      "term": "foreach文",
      "explanation": "他のプログラミング言語でよく使われる、データのかたまりから要素を一つずつ取り出して処理を繰り返す命令のことです。Pythonでは、for文がこの役割を担っています。",
      "category": "繰り返し"
    },
    {
      "term": "for文の文字列",
      "explanation": "for文を使って、文字列の中から一文字ずつデータを取り出して処理を繰り返すことです。例えば、「hello」という文字列に対してfor文を使うと、「h」「e」「l」「l」「o」の順に処理が行われます。",
      "category": "繰り返し"
    },
    {
      "term": "for文のリスト",
      "explanation": "for文を使って、リスト（複数のデータを順番に並べたもの）の中から、要素を一つずつ先頭から取り出して処理を繰り返すことです。 これにより、リスト内の全データに対して同じ操作を簡単に行えます。",
      "category": "繰り返し"
    },
    {
      "term": "removeメソッド",
      "explanation": "リストから指定した値を持つ最初の要素を削除するための命令（メソッド）です。ループ処理の中で特定の条件に合う要素を取り除く際などに使われますが、ループ中の削除は注意が必要です。",
      "category": "リスト操作"
    },
    {
      "term": "copyメソッド",
      "explanation": "リスト全体のコピー（複製）を作成するための命令（メソッド）です。元のリストを変更せずに、コピーしたリストに対してループ処理や変更を加えたい場合に使います。",
      "category": "リスト操作"
    },
    {
      "term": "for文のタプル",
      "explanation": "for文を使って、タプル（変更できないリストのようなもの）の中から、要素を一つずつ先頭から取り出して処理を繰り返すことです。基本的な使い方はリストの場合と同じです。",
      "category": "繰り返し"
    },
    {
      "term": "for文の集合",
      "explanation": "for文を使って、集合（重複する値を持たない、順序のないデータの集まり）の中から、要素を一つずつ取り出して処理を繰り返すことです。順序がないため、取り出される順番は決まっていません。",
      "category": "繰り返し"
    },
    {
      "term": "for文の辞書",
      "explanation": "for文を使って、辞書（キーと値のペアでデータを管理するもの）の各要素に対して処理を繰り返すことです。単純にfor文を使うとキーが一つずつ取り出されますが、itemsメソッドを使うとキーと値をペアで取り出せます。",
      "category": "繰り返し"
    },
    {
      "term": "辞書[キー]",
      "explanation": "辞書データの中から、指定した「キー」に対応する「値」を取り出すための書き方です。例えば、「'名前': '田中'」というデータがある辞書で「辞書['名前']」とすると、「田中」という値が取得できます。",
      "category": "辞書操作"
    },
    {
      "term": "itemsメソッド",
      "explanation": "辞書の「キー」と「値」をペアのセットとして取り出すための命令（メソッド）です。 for文と組み合わせることで、キーと値を同時に使いながら繰り返し処理ができます。",
      "category": "辞書操作"
    },
    {
      "term": "range関数 (range function)",
      "explanation": "「0から9まで」のような、連続した数値のデータを作り出すための命令（関数）です。 for文と組み合わせて、「処理を10回繰り返す」といった回数を指定した繰り返しを簡単に行うことができます。",
      "category": "繰り返し"
    },
    {
      "term": "rangeオブジェクト",
      "explanation": "range関数によって作られる、連続した数値のルールを持つ特殊なデータのことです。 見た目はリストのようですが、実際に全ての数値をメモリ上に保持しているわけではないため、非常に大きな範囲を指定してもメモリを消費しにくいという特徴があります。",
      "category": "繰り返し"
    },
    {
      "term": "キーワード引数のend",
      "explanation": "print関数で何かを表示する際に、通常は最後に自動で改行されますが、その改行を別の文字に変えるための設定です。例えば `end=''` と指定すると、改行せずに続けて次の表示ができます。",
      "category": "入出力"
    },
    {
      "term": "ネスト(ネスティング) (nesting)",
      "explanation": "ある構造の内側に、さらに同じ種類の構造を入れることです。例えば、if文の中にさらにif文を書いたり、for文の中にさらにfor文を書いたりすることを指します。「入れ子」とも言います。",
      "category": "プログラミング構造"
    },
    {
      "term": "多重ループ (nested loop)",
      "explanation": "繰り返し処理（ループ）の中に、さらに別の繰り返し処理を入れることです。ネストされたループ構造のことを指します。",
      "category": "繰り返し"
    },
    {
      "term": "二重ループ (double loop)",
      "explanation": "for文やwhile文といった繰り返し処理の中に、もう一つだけ繰り返し処理が入っている状態です。九九の表を作るような、縦と横の組み合わせで処理を行う場合によく使われます。",
      "category": "繰り返し"
    },
    {
      "term": "enumerate関数 (enumerate function)",
      "explanation": "for文でリストなどの繰り返し処理を行う際に、要素の値だけでなく、その要素が何番目かという「インデックス番号（カウント）」も同時に取得できるようにする命令（関数）です。",
      "category": "繰り返し"
    },
    {
      "term": "カウント",
      "explanation": "enumerate関数を使ったときに得られる、要素の順番を示す番号（インデックス）のことです。通常、0から始まります。",
      "category": "繰り返し"
    },
    {
      "term": "要素の値",
      "explanation": "リストやタプルなどの中に入っている個々のデータのことです。enumerate関数を使うと、この要素の値と、そのカウント（インデックス）をセットで取り出すことができます。",
      "category": "データ構造"
    },
    {
      "term": "reversed関数 (reversed function)",
      "explanation": "リストなどのシーケンスの要素を、逆順に取り出すための命令（関数）です。for文と組み合わせることで、後ろから順番に処理を行うことができます。",
      "category": "繰り返し"
    },
    {
      "term": "while文 (while statement)",
      "explanation": "指定した条件が満たされている（Trueの）間、ずっと同じ処理を繰り返し続けるための命令です。 for文が回数を指定する繰り返しなのに対し、while文は条件で繰り返すのが特徴です。",
      "category": "繰り返し"
    },
    {
      "term": "continue文 (continue statement)",
      "explanation": "繰り返し処理（for文やwhile文）の途中でこの命令を実行すると、その回の残りの処理をスキップして、次の繰り返しに移ります。 「特定の条件の時だけ処理を飛ばしたい」場合に便利です。",
      "category": "繰り返し制御"
    },
    {
      "term": "break文 (break statement)",
      "explanation": "繰り返し処理（for文やwhile文）の途中でこの命令を実行すると、ループを完全に中断し、次の処理へ抜けます。 「特定の条件になったら、繰り返しをもう終えたい」場合に使います。",
      "category": "繰り返し制御"
    },
    {
      "term": "無限ループ (infinite loop)",
      "explanation": "while文などで指定した条件が常に満たされてしまい、繰り返しが永遠に終わらなくなってしまう状態のことです。 プログラムが応答しなくなる原因になるため、意図しない無限ループは避ける必要があります。",
      "category": "繰り返し"
    },
    {
      "term": "pass文 (pass statement)",
      "explanation": "「何もしない」ということを示すためだけの命令です。 文法的には何かを書かなければいけないけれど、まだ処理内容が決まっていない場合や、あえて何もしないことを明示したい場合などに、場所を埋めるために使われます。",
      "category": "繰り返し制御"
    },
    {
      "term": "プレースホルダー (placeholder)",
      "explanation": "後から実際に入力される値やデータのために、一時的に場所を確保しておく仮の文字列や値のことです。 例えば、Webサイトの入力フォームで「お名前を入力」のように薄い文字で表示されるテキストや、プログラミングで後から値が設定される変数などを指します。 ユーザーに入力内容のヒントを与えたり、プログラムの構造を先に作っておく際に便利です。",
      "category": "繰り返し制御"
    },
    {
      "term": "位置引数 (positional argument)",
      "explanation": "関数を呼び出す際に、定義された引数の順番通りに値を渡す方法です。例えば、`def my_func(a, b):` という関数があれば、`my_func(10, 20)`のように呼び出します。このとき、10がaに、20がbに対応します。",
      "category": "関数の引数"
    },
    {
      "term": "キーワード引数 (keyword argument)",
      "explanation": "関数を呼び出す際に、「引数名=値」という形で値を渡す方法です。 この方法を使うと、引数の順番を気にする必要がなくなります。例えば、`def my_func(a, b):` という関数を `my_func(b=20, a=10)` のように呼び出すことができます。",
      "category": "関数の引数"
    },
    {
      "term": "定義 (definition)",
      "explanation": "プログラミングにおいて、これから使う変数や関数がどのようなものであるかを決めることです。 例えば、変数に名前を付けてデータを入れたり、関数の名前や処理内容を決めたりすることを指します。",
      "category": "プログラミング基礎"
    },
    {
      "term": "def文 (def statement)",
      "explanation": "Pythonで新しい関数を作成（定義）するために使われるキーワードです。 `def` の後に関数名と引数を書き、コロンに続けて処理内容を記述することで、一連の処理をまとめた独自の関数を作ることができます。",
      "category": "関数の定義"
    },
    {
      "term": "仮引数 (parameter)",
      "explanation": "関数を定義するときに、受け取る値を入れるために仮に置かれる名前（変数名）のことです。 例えば `def add(x, y):` の `x` と `y` が仮引数 (parameter) にあたります。",
      "category": "関数の定義"
    },
    {
      "term": "実引数 (argument)",
      "explanation": "関数を呼び出すときに、実際に渡す値やデータのことです。 例えば `add(5, 3)` のように関数を呼び出す際の `5` と `3` が実引数 (argument) です。",
      "category": "関数の定義"
    },
    {
      "term": "return文 (return statement)",
      "explanation": "関数の中での処理結果を、その関数を呼び出した元に返すための命令です。 `return` が実行されると、関数の処理はその時点で終了します。",
      "category": "関数の定義"
    },
    {
      "term": "*イテラブル",
      "explanation": "リストやタプルのような複数の要素を持つデータ（イテラブル）の前にアスタリスク `*` を付けて、その中身を展開することです。主に関数の引数として、リストの各要素を個別の引数として渡したい場合などに使われます。",
      "category": "特殊な引数"
    },
    {
      "term": "イテラブルアンパッキング",
      "explanation": "リストやタプルなど、複数の要素を持つデータ（イテラブル）の中身を、一度に複数の変数に代入することです。例えば `my_list = [1, 2, 3]` があるとき、 `a, b, c = my_list` と書くと、aには1、bには2、cには3がそれぞれ代入されます。",
      "category": "プログラミング基礎"
    },
    {
      "term": "引数名=値",
      "explanation": "キーワード引数の書き方そのものを指します。関数を呼び出す際に、どの引数（パラメータ）にどの値を渡すかを明確に指定する方法です。",
      "category": "関数の引数"
    },
    {
      "term": "辞書アンパッキング",
      "explanation": "辞書データの前にアスタリスクを2つ `**` を付けて、キーと値をキーワード引数として関数に渡すことです。 例えば `params = {'a': 1, 'b': 2}` があるとき、`my_func(**params)`と書くと `my_func(a=1, b=2)` と同じ意味になります。",
      "category": "特殊な引数"
    },
    {
      "term": "デフォルト値 (default value)",
      "explanation": "関数の引数を定義する際に、あらかじめ設定しておく初期値のことです。 関数呼び出し時にその引数が省略された場合、このデフォルト値が自動的に使用されます。",
      "category": "関数の引数"
    },
    {
      "term": "可変長引数 (variable-length argument)",
      "explanation": "関数の引数の数が決まっていないときに使われる機能で、任意の数の引数を受け取ることができます。 `*args`（位置引数用）と`**kwargs`（キーワード引数用）の2種類があります。",
      "category": "特殊な引数"
    },
    {
      "term": "*引数",
      "explanation": "任意の数の「位置引数」をタプルとしてまとめて受け取るための引数です。 慣例的に `*args` という名前が使われます。",
      "category": "特殊な引数"
    },
    {
      "term": "キーワード専用引数 (keyword-only argument)",
      "explanation": "関数を呼び出す際に、必ず「キーワード引数（引数名=値）」の形で指定しなければならない引数のことです。 関数の定義で、引数リストの中にアスタリスク `*` を置くと、それ以降に定義された引数がキーワード専用になります。",
      "category": "特殊な引数"
    },
    {
      "term": "位置専用引数 (positional-only argument)",
      "explanation": "関数を呼び出す際に、必ず「位置引数」として順番通りに指定しなければならない引数のことです。 関数の定義で、引数リストの中にスラッシュ `/` を置くと、それより前に定義された引数が位置専用になります。",
      "category": "特殊な引数"
    },
    {
      "term": "スコープ (scope)",
      "explanation": "変数 (variable) がプログラムのどの範囲で有効かを示す境界線のことです。「この変数はここからここまでしか使えない」という縄張りのようなものです。スコープを意識することで、意図しない場所で変数が書き換えられてしまうといったバグを防ぐことができます。",
      "category": "変数とスコープ"
    },
    {
      "term": "グローバル変数 (global variable)",
      "explanation": "プログラムのどこからでもアクセスできる変数 (variable) のことです。いわば「共有の掲示板」のようなもので、どこからでも書き換えたり参照したりできますが、多用するとどこで変更されたか分からなくなり、管理が難しくなることがあります。",
      "category": "変数とスコープ"
    },
    {
      "term": "ローカル変数 (local variable)",
      "explanation": "特定の範囲（例えば関数の中）でしか使えない変数 (variable) のことです。その範囲の外からはアクセスできないため、他の場所への影響を心配せずに使うことができます。",
      "category": "変数とスコープ"
    },
    {
      "term": "global文 (global statement)",
      "explanation": "関数の中から外側にあるグローバル変数の値を書き換えたいときに使う宣言です。「この変数はローカル変数ではなく、あのグローバル変数を指しています」とプログラムに教える役割があります。",
      "category": "変数とスコープ"
    },
    {
      "term": "nonlocal文 (nonlocal statement)",
      "explanation": "入れ子になった関数の内側の関数から、外側の関数のローカル変数を書き換えたいときに使う宣言です。global文と似ていますが、グローバル変数ではなく、より近い外側の関数の変数を対象とします。",
      "category": "変数とスコープ"
    },
    {
      "term": "クラス (class)",
      "explanation": "オブジェクト（モノ）を作るための「設計図」や「金型」のことです。例えば「車」というクラスを定義すれば、色や名前が違うたくさんの「車」オブジェクトを効率的に作ることができます。",
      "category": "オブジェクト指向"
    },
    {
      "term": "オブジェクト (object)",
      "explanation": "クラスという「設計図」に基づいて作られた、具体的な「モノ」のことです。データ（属性）と処理（メソッド）をひとまとめにしたもので、プログラムの中で実際に操作する対象となります。",
      "category": "オブジェクト指向"
    },
    {
      "term": "データと処理",
      "explanation": "オブジェクトが持つ二つの要素です。「データ」はそのオブジェクトの状態（色、名前など）を表し、「処理」はそのオブジェクトができること（走る、止まるなど）を表します。オブジェクト指向では、これらを一つにまとめます。",
      "category": "オブジェクト指向"
    },
    {
      "term": "オブジェクト指向プログラミング (object-oriented programming)",
      "explanation": "プログラムを「モノ」の集まりとして捉え、モノ同士の相互作用としてシステムを設計していく考え方です。現実世界の物事をモデルにしやすいため、大規模で複雑なプログラムの開発に向いています。",
      "category": "オブジェクト指向"
    },
    {
      "term": "属性 (attribute)",
      "explanation": "オブジェクトが持っているデータ（情報）のことです。例えば「犬」オブジェクトであれば、「名前」「年齢」「犬種」などが属性にあたります。",
      "category": "オブジェクト指向"
    },
    {
      "term": "データ属性 (data attribute)",
      "explanation": "オブジェクトの状態を保持するための変数のことです。インスタンス変数とも呼ばれ、各オブジェクトがそれぞれ独自に持つことができます。",
      "category": "オブジェクト指向"
    },
    {
      "term": "メソッド (method)",
      "explanation": "オブジェクトが行うことができる「処理」や「振る舞い」のことです。クラスの中に定義された関数のことで、そのクラスから作られたオブジェクトの属性を操作したりします。",
      "category": "オブジェクト指向"
    },
    {
      "term": "インスタンス (instance)",
      "explanation": "クラスという設計図から作られた、具体的なオブジェクト（実体）のことです。「車」クラスから「青い車」や「赤い車」といったインスタンスが作られます。",
      "category": "オブジェクト指向"
    },
    {
      "term": "クラスオブジェクト (class object)",
      "explanation": "クラスそのものを表すオブジェクトです。クラスが定義されるとPython内部で生成され、そのクラスの属性（クラス属性）を保持したり、新しいインスタンスを生成する役割を持ちます。",
      "category": "オブジェクト指向"
    },
    {
      "term": "インスタンスオブジェクト (instance object)",
      "explanation": "クラスオブジェクトを呼び出す（インスタンス化する）ことで生成される、個々の具体的なオブジェクトのことです。それぞれが独立したデータ（インスタンス属性）を持つことができます。",
      "category": "オブジェクト指向"
    },
    {
      "term": "丸括弧()と角括弧[]",
      "explanation": "Pythonでは、丸括弧は主に関数を呼び出したり、タプルというデータ型（変更できないリスト）を作成する際に使われます。一方、角括弧はリスト（変更可能な順序付きのデータ列）を作成したり、リストの特定の要素にアクセスする際に使われます。",
      "category": "Pythonの基本"
    },
    {
      "term": "独自のクラスを定義",
      "explanation": "「class」というキーワードを使って、自分で新しいクラス（設計図）を作成することです。これにより、プログラムで扱いたい独自のデータ構造や振る舞いを定義できます。",
      "category": "クラスの定義"
    },
    {
      "term": "空のクラス",
      "explanation": "中身が何もないクラスのことです。「pass」キーワードを使って定義します。最初は空でも、後から動的に属性やメソッドを追加することができます。",
      "category": "クラスの定義"
    },
    {
      "term": "データ属性を初期化",
      "explanation": "__init__メソッドの中などで、インスタンスが作られた際にそのインスタンスが持つデータ属性に初期値を設定することです。これにより、インスタンスが「空っぽ」の状態で始まるのを防ぎます。",
      "category": "クラスの定義"
    },
    {
      "term": "self",
      "explanation": "クラスのメソッド内で、そのメソッドを呼び出しているインスタンス自身を指すための特別な引数です。「自分自身」と考えると分かりやすく、これを使ってインスタンスの属性や他のメソッドにアクセスします。",
      "category": "クラスの定義"
    },
    {
      "term": "独自のメソッドを定義",
      "explanation": "クラスの中に、そのクラスのインスタンスが行う独自の処理（振る舞い）を関数として定義することです。最初の引数には必ず「self」を指定します。",
      "category": "メソッド"
    },
    {
      "term": "インスタンスメソッド (instance method)",
      "explanation": "クラスのインスタンスから呼び出される、最も一般的なメソッドです。第一引数にインスタンス自身（self）を受け取り、そのインスタンスの属性を操作することができます。",
      "category": "メソッド"
    },
    {
      "term": "静的メソッド (static method)",
      "explanation": "インスタンスやクラスの状態に依存しない処理を行うメソッドです。インスタンスの情報（self）もクラスの情報も必要としないため、単なる関数のように振る舞いますが、クラスに属しているため関連性が分かりやすくなります。",
      "category": "メソッド"
    },
    {
      "term": "クラスメソッド (class method)",
      "explanation": "インスタンスではなく、クラス自体から呼び出されるメソッドです。第一引数にクラス自身（cls）を受け取り、クラス属性を操作したり、クラスに関連する処理を行ったりするのに使われます。",
      "category": "メソッド"
    },
    {
      "term": "マングリング (mangling)",
      "explanation": "クラスの属性名の前にアンダースコアを2つ付ける（例: __変数名）ことで、外部から直接アクセスしにくくする仕組みです。継承した子クラスで意図せず親クラスの属性を上書きしてしまうのを防ぐために使われます。",
      "category": "クラスの応用"
    },
    {
      "term": "クラス属性 (class attribute)",
      "explanation": "クラスに直接紐づけられた属性で、そのクラスから作られたすべてのインスタンスで共有されます。クラスの全インスタンスに共通する値を保持したい場合に使われます。",
      "category": "クラスの応用"
    },
    {
      "term": "派生 (derivation)",
      "explanation": "既存のクラス（基底クラス）を元にして、新しいクラス（派生クラス）を作ることです。継承とも呼ばれ、基底クラスの機能を引き継ぎつつ、新しい機能を追加したり変更したりできます。",
      "category": "継承"
    },
    {
      "term": "基底クラス (base class)",
      "explanation": "継承の元となるクラスのことです。親クラスやスーパークラス (superclass) とも呼ばれます。",
      "category": "継承"
    },
    {
      "term": "派生クラス (derived class)",
      "explanation": "基底クラスを継承して作られた新しいクラスのことです。子クラスやサブクラス (subclass) とも呼ばれます。",
      "category": "継承"
    },
    {
      "term": "継承 (inheritance)",
      "explanation": "あるクラスが別のクラスの機能（属性やメソッド）を引き継ぐ仕組みです。コードの再利用性を高め、効率的なプログラミングを可能にします。",
      "category": "継承"
    },
    {
      "term": "汎化 (generalization)",
      "explanation": "複数のクラスに共通する性質を抜き出して、それらをまとめた親クラス（基底クラス）を作る考え方です。例えば、「犬」クラスと「猫」クラスから共通の性質を持つ「動物」クラスを作ることを指します。",
      "category": "継承"
    },
    {
      "term": "単一継承 (single inheritance)",
      "explanation": "一つのクラスが、一つの親クラスだけを継承することです。多くのオブジェクト指向言語で採用されているシンプルな継承方法です。",
      "category": "継承"
    },
    {
      "term": "多重継承 (multiple inheritance)",
      "explanation": "一つのクラスが、複数の親クラスを同時に継承することです。これにより、様々なクラスの機能を一度に引き継ぐことができますが、どの親クラスのメソッドを呼び出すかが複雑になる場合があります。",
      "category": "継承"
    },
    {
      "term": "オーバーライド (override)",
      "explanation": "親クラスから継承したメソッドを、子クラスで同じ名前で再定義（上書き）することです。これにより、子クラス独自の振る舞いをさせることができます。",
      "category": "継承"
    },
    {
      "term": "super関数 (super function)",
      "explanation": "子クラスから親クラスのメソッドを呼び出す際に使う関数です。オーバーライドした子クラスのメソッドの中から、親クラスの同じメソッドを呼び出したい場合などによく利用されます。",
      "category": "継承"
    },
    {
      "term": "RecursionError",
      "explanation": "関数が自分自身を呼び出す「再帰」処理が、設定された上限回数を超えてしまった場合に発生するエラーです。無限ループのように再帰が止まらなくなると、このエラーでプログラムが強制終了します。",
      "category": "エラー"
    },
    {
      "term": "再帰 (recursion)",
      "explanation": "ある関数が、その処理の内部で自分自身の関数を呼び出すことです。特定の条件を満たすまで処理を繰り返すような場合に用いられますが、終了条件を正しく設定しないと無限ループに陥ります。",
      "category": "プログラミング概念"
    },
    {
      "term": "新しいメソッドを追加",
      "explanation": "派生クラス（子クラス）に、基底クラス（親クラス）にはない独自の新しいメソッドを定義することです。これにより、継承した機能に加えて、派生クラスならではの振る舞いを追加できます。",
      "category": "継承"
    },
    {
      "term": "AttributeError",
      "explanation": "オブジェクトが持っていない属性（データ属性やメソッド）にアクセスしようとしたときに発生するエラーです。スペルミスや、オブジェクトの型を勘違いしている場合によく起こります。",
      "category": "エラー"
    },
    {
      "term": "菱形継承(ダイヤモンド継承) (diamond inheritance)",
      "explanation": "あるクラスが、共通の祖先を持つ2つの親クラスを多重継承する構造のことです。その継承関係を図にすると菱形に見えることからこう呼ばれます。",
      "category": "継承"
    },
    {
      "term": "菱形継承問題",
      "explanation": "菱形継承において、祖先クラスのメソッドが複数回呼び出されてしまう問題や、どの親クラスのメソッドを優先して呼び出すべきかが曖昧になる問題のことです。",
      "category": "継承"
    },
    {
      "term": "MRO (Method Resolution Order)",
      "explanation": "メソッド解決順序のことで、Pythonが多重継承されたクラスのメソッドを呼び出す際に、どの親クラスのメソッドから順番に探していくかを定めたルールのことです。",
      "category": "継承"
    },
    {
      "term": "例外 (exception)",
      "explanation": "プログラムの実行中に発生するエラーのことです。例えば、0で割り算をしようとしたり、指定されたファイルが見つからなかったりすると発生します。プログラムは通常、例外が発生すると停止してしまいます。",
      "category": "例外処理"
    },
    {
      "term": "例外処理 (exception handling)",
      "explanation": "プログラムの実行中に例外（エラー）が発生したときに、プログラムが強制終了しないように備えておく仕組みのことです。「try-except」文などを使って、エラーが起きても別の処理を実行させることができます。",
      "category": "例外処理"
    },
    {
      "term": "ValueError",
      "explanation": "関数に渡された引数のデータ型は正しいものの、その値が不適切である場合に発生する例外です。 例えば、数字の文字列を整数に変換する際に、その文字列が数字以外（例：「abc」）だった場合に起こります。",
      "category": "例外処理"
    },
    {
      "term": "ZeroDivisionError",
      "explanation": "数値を0で割ろうとしたときに発生する例外です。 コンピューターの世界では0で割る計算はできないため、エラーとして扱われます。",
      "category": "例外処理"
    },
    {
      "term": "エラー処理",
      "explanation": "例外処理と同様に、プログラムでエラーが発生した際の対応を決めておくことです。エラーが発生してもプログラムを安全に継続させたり、原因を特定しやすくしたりする目的で行われます。",
      "category": "例外処理"
    },
    {
      "term": "isnumericメソッド",
      "explanation": "文字列がすべて数字で構成されているかどうかを判定するための機能（メソッド）です。数字であればTrue（真）、そうでなければFalse（偽）を返します。ValueErrorを防ぐために、型変換の前にチェックする際によく使われます。",
      "category": "例外処理"
    },
    {
      "term": "try文 (try statement)",
      "explanation": "例外が発生する可能性のある処理を囲むための構文です。 この中に書いた処理でエラーが起きても、プログラムはすぐに止まらず、次に続くexcept節などで対応することができます。",
      "category": "例外処理"
    },
    {
      "term": "try節 (try clause)",
      "explanation": "try文の中で、例外が発生する可能性のある処理を記述するブロックのことです。",
      "category": "例外処理"
    },
    {
      "term": "except節 (except clause)",
      "explanation": "try節の中で例外が発生した場合に実行される処理を記述するブロックです。 どのような種類の例外（ValueErrorなど）をキャッチして、どう対応するかを指定できます。",
      "category": "例外処理"
    },
    {
      "term": "KeyboardInterrupt",
      "explanation": "ユーザーがプログラムの実行中にキーボードの「Ctrl + C」を押して処理を中断させたときに発生する例外です。",
      "category": "例外処理"
    },
    {
      "term": "Exception",
      "explanation": "Pythonにおける、ほとんどの組み込み例外の親クラスです。 except節でExceptionを指定すると、多くの種類のエラーをまとめてキャッチできますが、予期しないエラーまで隠してしまう可能性があるため注意が必要です。",
      "category": "例外処理"
    },
    {
      "term": "finally節 (finally clause)",
      "explanation": "try-except文の最後に置かれ、例外が発生したかどうかに関わらず、必ず実行される処理を記述するブロックです。 ファイルを閉じる処理や、データベースの接続を解除するなど、後片付けの処理によく使われます。",
      "category": "例外処理"
    },
    {
      "term": "else節 (else clause)",
      "explanation": "try-except文において、try節の処理が例外を発生させずに正常に終了した場合にのみ実行されるブロックです。",
      "category": "例外処理"
    },
    {
      "term": "try節とexcept節",
      "explanation": "例外処理の最も基本的な組み合わせです。try節でエラーが起きる可能性のある処理を囲み、except節でエラーが発生したときの対処を記述します。",
      "category": "例外処理"
    },
    {
      "term": "try節とexcept節とelse節",
      "explanation": "try節でエラーが発生しなかった場合に、特別な処理（else節）を追加する組み合わせです。エラーが起きた場合はexcept節が、起きなかった場合はelse節が実行されます。",
      "category": "例外処理"
    },
    {
      "term": "try節とexcept節とelse節とfinally節",
      "explanation": "例外処理のすべての要素を組み合わせた形です。エラー発生の有無に応じてexcept節かelse節が実行された後、最後に必ずfinally節が実行されます。",
      "category": "例外処理"
    },
    {
      "term": "try節とexcept節とfinally節",
      "explanation": "エラーが発生した場合（except節）でも、しなかった場合でも、最後に必ず実行したい処理（finally節）がある場合の組み合わせです。",
      "category": "例外処理"
    },
    {
      "term": "try節とfinally節",
      "explanation": "エラーの有無に関わらず、ある処理の後には必ず後片付け処理を行いたいが、エラー自体をここで処理（キャッチ）する必要はない、という場合に使われる組み合わせです。",
      "category": "例外処理"
    },
    {
      "term": "raise文 (raise statement)",
      "explanation": "プログラマーが意図的に例外を発生させるときに使う命令です。 特定の条件が満たされない場合に、エラーとして処理を中断させたいときなどに利用します。",
      "category": "例外処理"
    },
    {
      "term": "内包表記 (comprehension)",
      "explanation": "リストや集合、辞書などのコレクションを、簡潔な1行のコードで作成するためのPython特有の書き方です。forループやif文を組み合わせて、効率的に新しいコレクションを生成できます。",
      "category": "内包表記"
    },
    {
      "term": "comprehension",
      "explanation": "「内包表記」の英語表現です。",
      "category": "内包表記"
    },
    {
      "term": "リストの内包表記 (list comprehension)",
      "explanation": "forループやif文を使って、新しいリストを1行で生成する書き方です。 例えば、既存のリストの各要素を2倍にした新しいリストを簡単に作ることができます。",
      "category": "内包表記"
    },
    {
      "term": "集合の内包表記 (set comprehension)",
      "explanation": "リスト内包表記と同様に、集合（重複する値を持たないコレクション）を1行で生成する書き方です。波括弧 `{}` を使って記述します。",
      "category": "内包表記"
    },
    {
      "term": "辞書の内包表記 (dictionary comprehension)",
      "explanation": "キーと値のペアを持つ辞書を1行で生成する書き方です。 波括弧 `{}` の中で `キー: 値` の形で要素を記述します。",
      "category": "内包表記"
    },
    {
      "term": "ジェネレータ式 (generator expression)",
      "explanation": "リスト内包表記と似た構文ですが、角括弧 `[]` の代わりに丸括弧 `()` を使います。 一度に全ての要素をメモリに格納するのではなく、必要になるたびに一つずつ要素を生成するため、巨大なデータや無限のデータを扱う際にメモリを節約できる利点があります。",
      "category": "ジェネレータ"
    },
    {
      "term": "ジェネレータ関数 (generator function)",
      "explanation": "`yield`文を含む関数のことです。この関数を呼び出すと、すぐに処理を実行するのではなく、ジェネレータオブジェクトというものが返されます。このオブジェクトから、値を一つずつ取り出すことができます。",
      "category": "ジェネレータ"
    },
    {
      "term": "yield文 (yield statement)",
      "explanation": "ジェネレータ関数内で使われる、`return`に似た働きをする命令です。`yield`は値を返す際に処理を一時停止し、次に値が要求されたときにその停止した場所から処理を再開します。",
      "category": "ジェネレータ"
    },
    {
      "term": "yield from文 (yield from statement)",
      "explanation": "別のジェネレータやイテラブル（リストなど、反復可能なオブジェクト）から、値を一つずつ取り出して`yield`するための構文です。これにより、複数のジェネレータを簡単に連結できます。",
      "category": "ジェネレータ"
    },
    {
      "term": "ラムダ式 (lambda expression)",
      "explanation": "`lambda`キーワードを使って、名前のない小さな関数（無名関数）を1行で定義するための書き方です。 簡単な処理をその場で定義して、他の関数の引数として渡す場合などによく使われます。",
      "category": "ラムダ式とソート"
    },
    {
      "term": "lambda",
      "explanation": "ラムダ式を定義するために使うPythonのキーワードです。",
      "category": "ラムダ式とソート"
    },
    {
      "term": "無名関数 (anonymous function)",
      "explanation": "ラムダ式によって作られる、名前を持たない関数のことです。 `def`を使って名前を定義するほどでもない、一度きりの簡単な処理に使われることが多いです。",
      "category": "ラムダ式とソート"
    },
    {
      "term": "ソート (sort)",
      "explanation": "リストなどの要素を、特定の順序（昇順や降順など）に並べ替えることです。",
      "category": "ラムダ式とソート"
    },
    {
      "term": "sorted関数 (sorted function)",
      "explanation": "リストなどのコレクションをソートした、新しいリストを返す関数です。元のリスト自体は変更されません。",
      "category": "ラムダ式とソート"
    },
    {
      "term": "reverse",
      "explanation": "ソートの順序を指定するための引数の一つです。`reverse=True`とすると、降順（大きいものから小さいものへ）にソートされます。",
      "category": "ラムダ式とソート"
    },
    {
      "term": "sortメソッド",
      "explanation": "リスト自体を直接ソート（並べ替え）するための機能（メソッド）です。`sorted`関数とは異なり、元のリストが書き換えられ、新しいリストは返しません。",
      "category": "ラムダ式とソート"
    },
    {
      "term": "ソートのキー",
      "explanation": "ソートの基準となる値を指定するためのものです。`sorted`関数や`sort`メソッドの`key`引数に、値を変換する関数（ラムダ式がよく使われる）を指定することで、複雑な条件でのソートが可能になります。",
      "category": "ラムダ式とソート"
    },
    {
      "term": "代入式 (assignment expression)",
      "explanation": "Python 3.8から導入された新しい構文で、`:=`（セイウチ演算子）を使います。式の中で変数に値を代入できるため、コードをより簡潔に書ける場合があります。",
      "category": "その他"
    },
    {
      "term": "assert文 (assert statement)",
      "explanation": "プログラムのデバッグ（バグの発見・修正）を助けるための機能です。 「この時点でこの条件は必ず真（True）であるはずだ」ということを表明するために使います。もし条件が偽（False）の場合、AssertionErrorという例外を発生させてプログラムを停止させます。",
      "category": "アサーション"
    },
    {
      "term": "AssertionError",
      "explanation": "assert文の条件式が偽（False）と評価されたときに発生する例外です。 プログラムがプログラマーの想定通りに動いていないことを示します。",
      "category": "アサーション"
    },
    {
      "term": "print関数 (print function)",
      "explanation": "指定した値や文字を画面に出力（表示）するための基本的な関数です。プログラムが正しく動いているか確認するためによく使われます。",
      "category": "入出力関数"
    },
    {
      "term": "input関数 (input function)",
      "explanation": "プログラムの実行中にキーボードから文字を入力してもらい、その内容を文字列として受け取るための関数です。ユーザーと対話するプログラムを作成する際に使用します。",
      "category": "入出力関数"
    },
    {
      "term": "format関数 (format function)",
      "explanation": "Python2.7やPython3で利用できる、文字列の中に変数の値を埋め込むための関数です。",
      "category": "文字列フォーマット"
    },
    {
      "term": "format関数の書式 '桁数'",
      "explanation": "指定した桁数で表示領域を確保します。例えば'{:5}'.format(123)とすると、5文字分のスペースに「123」が表示されます。",
      "category": "文字列フォーマット"
    },
    {
      "term": "format関数の書式 '<桁数'",
      "explanation": "確保した領域の中で、値を左揃えで表示します。例えば'{:<5}'.format(123)とすると、「123  」のように表示されます。",
      "category": "文字列フォーマット"
    },
    {
      "term": "format関数の書式 '>桁数'",
      "explanation": "確保した領域の中で、値を右揃えで表示します。例えば'{:>5}'.format(123)とすると、「  123」のように表示されます。",
      "category": "文字列フォーマット"
    },
    {
      "term": "format関数の書式 '^桁数'",
      "explanation": "確保した領域の中で、値を中央揃えで表示します。例えば'{:^5}'.format(123)とすると、「 123 」のように表示されます。",
      "category": "文字列フォーマット"
    },
    {
      "term": "小数点以下の桁数のみ指定 '.小数点以下桁数f'",
      "explanation": "数値を小数点以下の指定した桁数で表示します。例えば'{:.2f}'.format(3.14159)とすると、「3.14」と表示されます。",
      "category": "文字列フォーマット"
    },
    {
      "term": "全体と小数点以下の桁数を指定 '全体桁数.小数点以下桁数f'",
      "explanation": "全体の桁数と小数点以下の桁数を指定して数値を表示します。例えば'{:8.2f}'.format(3.14159)とすると、「    3.14」のように全体の幅を8文字にして表示します。",
      "category": "文字列フォーマット"
    },
    {
      "term": "千の位ごとにカンマを入れる ','",
      "explanation": "数値を3桁区切りのカンマ付きで表示します。例えば'{:,}'.format(1000000)とすると、「1,000,000」と表示されます。",
      "category": "文字列フォーマット"
    },
    {
      "term": "千の位ごとにアンダースコアを入れる '_'",
      "explanation": "数値を3桁区切りのアンダースコア付きで表示します。例えば'{:_}'.format(1000000)とすると、「1_000_000」と表示されます。",
      "category": "文字列フォーマット"
    },
    {
      "term": "formatメソッド",
      "explanation": "文字列の後ろに「.format()」とつけて、文字列中の{}に値を埋め込む機能です。 「'{}です'.format('猫')」と書くと「猫です」という文字列になります。",
      "category": "文字列フォーマット"
    },
    {
      "term": "formatメソッドの書式 {}",
      "explanation": "引数の値を順番に埋め込みます。'{}, {}'.format('A', 'B') は 'A, B' になります。",
      "category": "文字列フォーマット"
    },
    {
      "term": "formatメソッドの書式 {整数}",
      "explanation": "引数のインデックス（番号）を指定して値を埋め込みます。'{1}, {0}'.format('A', 'B') は 'B, A' になります。",
      "category": "文字列フォーマット"
    },
    {
      "term": "formatメソッドの書式 {引数名}",
      "explanation": "引数名を指定して値を埋め込みます。'{name}です'.format(name='山田') は '山田です' になります。",
      "category": "文字列フォーマット"
    },
    {
      "term": "オブジェクトの属性 {.属性名}",
      "explanation": "オブジェクト（データ）が持つ特定の情報（属性）を参照して埋め込みます。",
      "category": "文字列フォーマット"
    },
    {
      "term": "シーケンスの要素 {[インデックス]}",
      "explanation": "リストやタプルなどのシーケンス（順番のあるデータの集まり）の要素をインデックスで指定して埋め込みます。",
      "category": "文字列フォーマット"
    },
    {
      "term": "桁数などを指定して参照 {引数指定:書式指定}",
      "explanation": "埋め込む値に対して、桁数や揃え方などの書式を細かく指定する方法です。",
      "category": "文字列フォーマット"
    },
    {
      "term": "f文字列 (f-string)",
      "explanation": "文字列の前に 'f' を付けて、{}の中に直接変数名や式を書くことで値を埋め込める、より新しく直感的な書き方です。例えば f'私の名前は{name}です' のように使います。",
      "category": "文字列フォーマット"
    },
    {
      "term": "値の型を変換する関数",
      "explanation": "データの種類（型）を別の種類に変換するための関数群です。例えば文字列の'123'を数値の123に変換する、といった操作を行います。",
      "category": "型変換関数"
    },
    {
      "term": "int(値)",
      "explanation": "値（文字列や浮動小数点数）を整数に変換します。",
      "category": "型変換関数"
    },
    {
      "term": "float(値)",
      "explanation": "値（文字列や整数）を浮動小数点数（小数点を持つ数）に変換します。",
      "category": "型変換関数"
    },
    {
      "term": "str(値)",
      "explanation": "値（数値など）を文字列に変換します。",
      "category": "型変換関数"
    },
    {
      "term": "bool(値)",
      "explanation": "値を真偽値（TrueかFalse）に変換します。0や空の文字列以外はほとんどTrueになります。",
      "category": "型変換関数"
    },
    {
      "term": "データ構造を作成する関数",
      "explanation": "複数のデータをまとめて扱うための入れ物（データ構造）を作成する関数群です。",
      "category": "データ構造関数"
    },
    {
      "term": "list(イテラブル)",
      "explanation": "複数の値を順序付けて格納する「リスト」を作成します。リストは後から中身の変更が可能です。",
      "category": "データ構造関数"
    },
    {
      "term": "tuple(イテラブル)",
      "explanation": "複数の値を順序付けて格納する「タプル」を作成します。タプルは一度作成すると中身の変更ができません。",
      "category": "データ構造関数"
    },
    {
      "term": "set(イテラブル)",
      "explanation": "重複しない値の集まりである「集合」を作成します。順序はありません。",
      "category": "データ構造関数"
    },
    {
      "term": "dict(イテラブル)",
      "explanation": "キーと値のペアでデータを格納する「辞書」を作成します。高速な検索が可能です。",
      "category": "データ構造関数"
    },
    {
      "term": "bytes関数 (bytes function)",
      "explanation": "文字列などをバイト列（コンピューターが直接扱う0と1のデータに近い形式）に変換します。一度作成すると変更できません。",
      "category": "データ構造関数"
    },
    {
      "term": "bytearray関数 (bytearray function)",
      "explanation": "文字列などをバイト配列に変換します。bytesと似ていますが、こちらは後から中身を変更できます。",
      "category": "データ構造関数"
    },
    {
      "term": "memoryview関数 (memoryview function)",
      "explanation": "bytesなどのオブジェクトのデータをコピーせずに、メモリ上のデータに直接アクセスするための「メモリビュー」を作成します。 大量のデータを扱う際にメモリを節約し、処理を高速化できます。",
      "category": "データ構造関数"
    },
    {
      "term": "complex関数 (complex function)",
      "explanation": "実数部と虚数部から複素数を作成する関数です。数学や科学技術計算で使われます。",
      "category": "数値演算関数"
    },
    {
      "term": "frozenset関数 (frozenset function)",
      "explanation": "一度作成すると要素の追加や削除ができない、変更不可能な集合（セット）を作成します。 辞書のキーとして使えるなどの特徴があります。",
      "category": "データ構造関数"
    },
    {
      "term": "object関数 (object function)",
      "explanation": "何も機能を持たない、最も基本的なオブジェクトを生成します。クラスの基礎を学ぶ際に使われることがあります。",
      "category": "オブジェクト操作関数"
    },
    {
      "term": "slice関数 (slice function)",
      "explanation": "リストなどから一部分を取り出す（スライスする）際の範囲情報を持つオブジェクトを作成します。通常は[1:5]のように直接書くことが多いです。",
      "category": "シーケンス操作関数"
    },
    {
      "term": "abs関数 (abs function)",
      "explanation": "数値の絶対値（0からの距離）を返します。例えばabs(-5)は5になります。",
      "category": "数値演算関数"
    },
    {
      "term": "divmod関数 (divmod function)",
      "explanation": "割り算の商（答え）と余りを同時に求め、タプルとして返します。例えばdivmod(10, 3)は(3, 1)になります。",
      "category": "数値演算関数"
    },
    {
      "term": "pow関数 (pow function)",
      "explanation": "べき乗を計算します。pow(2, 3)は2の3乗で8になります。",
      "category": "数値演算関数"
    },
    {
      "term": "round関数 (round function)",
      "explanation": "数値を四捨五入して、最も近い整数または指定した小数点以下の桁数に丸めます。",
      "category": "数値演算関数"
    },
    {
      "term": "min関数 (min function)",
      "explanation": "複数の数値やリストなどの要素の中から最小値を返します。",
      "category": "数値演算関数"
    },
    {
      "term": "max関数 (max function)",
      "explanation": "複数の数値やリストなどの要素の中から最大値を返します。",
      "category": "数値演算関数"
    },
    {
      "term": "sum関数 (sum function)",
      "explanation": "リストなどの数値のシーケンスの合計値を計算します。 オプションで初期値を設定することもできます。",
      "category": "数値演算関数"
    },
    {
      "term": "len関数 (len function)",
      "explanation": "文字列の長さや、リスト、タプルなどの要素数を取得する関数です。",
      "category": "シーケンス操作関数"
    },
    {
      "term": "range関数 (range function)",
      "explanation": "連続した整数の集まり（シーケンス）を生成します。 forループと組み合わせて、特定の回数だけ処理を繰り返すのによく使われます。",
      "category": "シーケンス操作関数"
    },
    {
      "term": "enumerate関数 (enumerate function)",
      "explanation": "リストなどの要素に、0からの連番（インデックス）を付けて取り出すことができます。ループ処理で要素とその番号を同時に使いたい場合に便利です。",
      "category": "イテレータ関数"
    },
    {
      "term": "reversed関数 (reversed function)",
      "explanation": "リストなどのシーケンスの要素を逆順にしたイテレータを返します。",
      "category": "イテレータ関数"
    },
    {
      "term": "zip関数 (zip function)",
      "explanation": "複数のリストなどの要素を、同じインデックス（順番）ごとにまとめてタプルにします。",
      "category": "イテレータ関数"
    },
    {
      "term": "map関数 (map function)",
      "explanation": "リストの各要素に同じ関数を適用し、その結果をまとめて得ることができます。",
      "category": "イテレータ関数"
    },
    {
      "term": "filter関数 (filter function)",
      "explanation": "リストの各要素を関数で判定し、条件に合う（Trueになる）要素だけを取り出します。",
      "category": "イテレータ関数"
    },
    {
      "term": "all関数 (all function)",
      "explanation": "リストなどの全ての要素がTrue（真）と評価される場合にTrueを返します。",
      "category": "判定関数"
    },
    {
      "term": "any関数 (any function)",
      "explanation": "リストなどのいずれかの要素がTrue（真）と評価される場合にTrueを返します。",
      "category": "判定関数"
    },
    {
      "term": "iter関数 (iter function)",
      "explanation": "リストなどから、要素を一つずつ取り出せる「イテレータ」というオブジェクトを作成します。",
      "category": "イテレータ関数"
    },
    {
      "term": "next関数 (next function)",
      "explanation": "イテレータから要素を一つずつ取り出します。次の要素がない場合はエラー（StopIteration）が発生します。",
      "category": "イテレータ関数"
    },
    {
      "term": "bin関数 (bin function)",
      "explanation": "整数を2進数の文字列に変換します。'0b'という接頭辞が付きます。",
      "category": "数値変換関数"
    },
    {
      "term": "oct関数 (oct function)",
      "explanation": "整数を8進数の文字列に変換します。'0o'という接頭辞が付きます。",
      "category": "数値変換関数"
    },
    {
      "term": "hex関数 (hex function)",
      "explanation": "整数を16進数の文字列に変換します。'0x'という接頭辞が付きます。",
      "category": "数値変換関数"
    },
    {
      "term": "chr関数 (chr function)",
      "explanation": "文字コード（Unicode）の数値を対応する文字に変換します。例えばchr(65)は'A'になります。",
      "category": "文字コード関数"
    },
    {
      "term": "ord関数 (ord function)",
      "explanation": "文字を対応する文字コード（Unicode）の数値に変換します。例えばord('A')は65になります。",
      "category": "文字コード関数"
    },
    {
      "term": "repr関数 (repr function)",
      "explanation": "オブジェクトを、Pythonが解釈できる公式な文字列表現に変換します。デバッグ時によく使われます。",
      "category": "オブジェクト情報関数"
    },
    {
      "term": "ascii関数 (ascii function)",
      "explanation": "オブジェクトを、ASCII文字（半角英数字など）だけで表現できる文字列に変換します。",
      "category": "オブジェクト情報関数"
    },
    {
      "term": "id関数 (id function)",
      "explanation": "オブジェクトがメモリ上のどこに保存されているかを示す一意のID（整数）を返します。",
      "category": "オブジェクト情報関数"
    },
    {
      "term": "hash関数 (hash function)",
      "explanation": "オブジェクトのハッシュ値（内容を元に計算された固定長の数値）を返します。辞書のキーなどに利用されます。",
      "category": "オブジェクト情報関数"
    },
    {
      "term": "super関数 (super function)",
      "explanation": "クラスの継承において、親クラス（スーパークラス）のメソッドを呼び出すために使用します。",
      "category": "クラス・オブジェクト関数"
    },
    {
      "term": "type関数 (type function)",
      "explanation": "値や変数がどのような「種類（型）」なのか（整数、文字列など）を調べることができます。",
      "category": "オブジェクト情報関数"
    },
    {
      "term": "isinstance関数 (isinstance function)",
      "explanation": "オブジェクトが指定したクラス（型）のインスタンス（実体）であるかどうかを判定します。",
      "category": "クラス・オブジェクト関数"
    },
    {
      "term": "issubclass関数 (issubclass function)",
      "explanation": "あるクラスが、別のクラスを継承している（サブクラスである）かどうかを判定します。",
      "category": "クラス・オブジェクト関数"
    },
    {
      "term": "eval関数 (eval function)",
      "explanation": "文字列として書かれたPythonの式を実行し、その結果を返します。",
      "category": "動的実行関数"
    },
    {
      "term": "exec関数 (exec function)",
      "explanation": "文字列として書かれたPythonの文（プログラム）を実行します。evalと違い、値を返しません。",
      "category": "動的実行関数"
    },
    {
      "term": "compile関数 (compile function)",
      "explanation": "文字列のソースコードを、実行可能なコードオブジェクトに変換します。evalやexecと組み合わせて使われます。",
      "category": "動的実行関数"
    },
    {
      "term": "globals関数 (globals function)",
      "explanation": "プログラム全体で利用できるグローバル変数とその値を辞書として返します。",
      "category": "スコープ情報関数"
    },
    {
      "term": "locals関数 (locals function)",
      "explanation": "現在いる場所（スコープ）で利用できるローカル変数とその値を辞書として返します。",
      "category": "スコープ情報関数"
    },
    {
      "term": "callable関数 (callable function)",
      "explanation": "指定したオブジェクトが、関数のように呼び出し可能（()をつけて実行できる）かどうかを判定します。",
      "category": "オブジェクト情報関数"
    },
    {
      "term": "breakpoint関数 (breakpoint function)",
      "explanation": "プログラムの実行をその場で一時停止し、デバッガを起動するための関数です。プログラムのバグを見つけるのに役立ちます。",
      "category": "デバッグ関数"
    },
    {
      "term": "help関数 (help function)",
      "explanation": "関数やオブジェクトのヘルプ情報（使い方などの説明）を表示します。プログラミング中に関数の使い方を忘れたときに便利です。",
      "category": "ヘルプ関数"
    },
    {
      "term": "インポート (import)",
      "explanation": "他のソフトウェアで作成されたデータやファイルを取り込んで、利用できるようにすることです。 例えば、あるプログラムで別の人が作った便利な機能（モジュール）を使いたい時にインポートします。",
      "category": "プログラミング一般"
    },
    {
      "term": "モジュール (module)",
      "explanation": "特定の機能を持つプログラムの部品のことです。 関連する機能やデータを一つにまとめたもので、他のプログラムからインポートして再利用することができます。",
      "category": "プログラミング一般"
    },
    {
      "term": "パッケージ (package)",
      "explanation": "複数のモジュールをまとめたものです。 関連する機能を持つモジュールを一つのパッケージとして整理することで、大規模なプログラムでも管理しやすくなります。",
      "category": "プログラミング一般"
    },
    {
      "term": "import文 (import statement)",
      "explanation": "Pythonで他のモジュールやパッケージを読み込むために使う命令です。 これにより、他のファイルに書かれた機能（関数やクラスなど）を自分のプログラムで利用できるようになります。",
      "category": "Python"
    },
    {
      "term": "randomモジュール",
      "explanation": "Pythonで乱数を扱うための機能を提供するモジュールです。サイコロを振るように、ランダムな数を生成したい場合などに使われます。",
      "category": "Python"
    },
    {
      "term": "擬似乱数 (pseudorandom number)",
      "explanation": "一見するとランダムに見えるが、実際には特定の計算式に基づいて生成される数値の列です。 コンピュータは完全にランダムな数を作ることが苦手なため、この擬似乱数が利用されます。",
      "category": "アルゴリズム"
    },
    {
      "term": "randint関数 (randint function)",
      "explanation": "Pythonのrandomモジュールに含まれる関数の一つで、指定した範囲内の整数をランダムに一つ生成します。例えば、「1から6までのランダムな整数」といった形でサイコロの目を表現するのに使えます。",
      "category": "Python"
    },
    {
      "term": "from節 (from clause)",
      "explanation": "import文と組み合わせて使い、モジュールの中から特定の機能だけを直接インポートするためのものです。例えば、「`from random import randint`」と書くと、randomモジュールの中からrandint関数だけを取り込んで、モジュール名を付けずに`randint()`として使えるようになります。",
      "category": "Python"
    },
    {
      "term": "urllib.parseモジュール",
      "explanation": "URLを解析したり、構成要素を操作したりするための機能を提供するPythonのモジュールです。URLの文字列を各部分（プロトコル、ドメイン名、パスなど）に分割する際などに利用します。",
      "category": "Python"
    },
    {
      "term": "urlparse関数",
      "explanation": "urllib.parseモジュールに含まれる関数で、URLの文字列をパース（解析）して、その構成要素を個別の部分に分解します。",
      "category": "Python"
    },
    {
      "term": "choice関数 (choice function)",
      "explanation": "Pythonのrandomモジュールに含まれる関数で、リストやタプルなどの複数の要素の中からランダムに一つを選び出します。",
      "category": "Python"
    },
    {
      "term": "shuffle関数 (shuffle function)",
      "explanation": "Pythonのrandomモジュールに含まれる関数で、リストの要素の順番をランダムにシャッフル（かき混ぜ）します。",
      "category": "Python"
    },
    {
      "term": "timeモジュール",
      "explanation": "Pythonで時間に関する操作を行うための機能を提供する標準ライブラリです。 現在時刻の取得や、プログラムの実行を一定時間停止させることができます。",
      "category": "Python"
    },
    {
      "term": "time関数 (time function)",
      "explanation": "Pythonのtimeモジュールに含まれる関数で、基準となる時刻（1970年1月1日0時0分0秒）からの経過秒数を返します。主に処理時間の計測などに使われます。",
      "category": "Python"
    },
    {
      "term": "gmtime関数",
      "explanation": "Pythonのtimeモジュールに含まれる関数で、基準時刻からの経過秒数を、協定世界時（UTC）に基づいた日付や時刻のデータに変換します。",
      "category": "Python"
    },
    {
      "term": "localtime関数",
      "explanation": "Pythonのtimeモジュールに含まれる関数で、基準時刻からの経過秒数を、コンピュータが設定されている地域の時刻（ローカルタイム）に合わせた日付や時刻のデータに変換します。",
      "category": "Python"
    },
    {
      "term": "sleep関数 (sleep function)",
      "explanation": "Pythonのtimeモジュールに含まれる関数で、指定した秒数だけプログラムの実行を一時的に停止させます。",
      "category": "Python"
    },
    {
      "term": "pipコマンド",
      "explanation": "Pythonのパッケージ（ライブラリ）をインストールしたり、管理したりするためのツールです。 これを使うことで、世界中の開発者が作成した便利なライブラリを簡単に自分の環境に追加できます。",
      "category": "Python"
    },
    {
      "term": "Numpy",
      "explanation": "Pythonで数値計算を効率的に行うためのライブラリです。 特に、ベクトルや行列といった多次元配列の計算を高速に行うことができます。",
      "category": "Pythonライブラリ"
    },
    {
      "term": "pip install numpy",
      "explanation": "Numpyライブラリをインストールするためのpipコマンドです。このコマンドを実行することで、自分のPython環境でNumpyが使えるようになります。",
      "category": "コマンド"
    },
    {
      "term": "pip show numpy",
      "explanation": "インストールされているNumpyライブラリの詳細情報（バージョン、インストール場所など）を表示するためのpipコマンドです。",
      "category": "コマンド"
    },
    {
      "term": "pip list",
      "explanation": "現在インストールされているPythonのパッケージ（ライブラリ）の一覧を表示するpipコマンドです。",
      "category": "コマンド"
    },
    {
      "term": "pip uninstall -y ライブラリ名",
      "explanation": "指定したライブラリをアンインストールするためのpipコマンドです。-y オプションを付けると、アンインストール前の確認メッセージを省略して実行します。",
      "category": "コマンド"
    },
    {
      "term": "pip install --upgrade ライブラリ名",
      "explanation": "インストール済みのライブラリを最新バージョンにアップグレード（更新）するためのpipコマンドです。",
      "category": "コマンド"
    },
    {
      "term": "python -m pip install --upgrade pip",
      "explanation": "pipコマンド自体を最新バージョンにアップグレードするためのコマンドです。",
      "category": "コマンド"
    },
    {
      "term": "テキストファイルの読み書き",
      "explanation": "コンピューター上でメモ帳のように文字情報だけが記録されたファイル（テキストファイル）の内容を、プログラムで読み込んだり、新しい内容を書き込んだりすることです。日記を読んだり書いたりするのに似ています。",
      "category": "ファイル操作"
    },
    {
      "term": "with文 (with statement)",
      "explanation": "ファイルなどを開いた後に、処理が終わったら自動的に閉じてくれるPythonの便利な命令です。ドアを開けて部屋に入ったら、出るときに自動でドアが閉まるようなイメージで、後片付けを忘れる心配がありません。",
      "category": "ファイル操作"
    },
    {
      "term": "open関数 (open function)",
      "explanation": "ファイルを読み書きするために「開く」操作を行うPythonの命令（関数）です。本を読む前に表紙を開くのと同じように、ファイルも中身を操作する前にこの命令で開く必要があります。",
      "category": "ファイル操作"
    },
    {
      "term": "encoding",
      "explanation": "コンピューターが理解できる数値（0と1の世界）と、人間が使う文字（「あ」や「A」など）を対応させるための「翻訳ルール」のことです。このルールが違うと文字化けが起こります。",
      "category": "文字コード"
    },
    {
      "term": "encodingの例 utf-8",
      "explanation": "世界中のほとんどの言語の文字を扱える、現在最も標準的なエンコーディング（文字コード）です。Webページやプログラムのソースコードで広く利用されています。",
      "category": "文字コード"
    },
    {
      "term": "encodingの例 shift-jis",
      "explanation": "主に古いWindowsの日本語環境で使われていたエンコーディング（文字コード）です。昔の日本のソフトウェアやシステムで作成されたファイルなどで見られます。",
      "category": "文字コード"
    },
    {
      "term": "encodingの例 euc-jp",
      "explanation": "主に古いUnixやLinuxの日本語環境で使われていたエンコーディング（文字コード）です。",
      "category": "文字コード"
    },
    {
      "term": "encodingの例 iso-2022-jp",
      "explanation": "電子メールで日本語を送受信するために古くから使われているエンコーディング（文字コード）です。",
      "category": "文字コード"
    },
    {
      "term": "writeメソッド",
      "explanation": "ファイルに文字列を書き込むための命令（メソッド）です。ノートに鉛筆で文字を書く操作にあたります。",
      "category": "ファイル操作"
    },
    {
      "term": "readメソッド",
      "explanation": "ファイルの内容を読み込むための命令（メソッド）です。ファイル全体を一度に読み取って、一つの文字列として返します。",
      "category": "ファイル操作"
    },
    {
      "term": "CSVファイル",
      "explanation": "「Comma Separated Values」の略で、データをカンマ（,）で区切って並べたテキストファイル形式です。 Excelなどの表計算ソフトで開くことができ、異なるソフトウェア間でデータを交換する際によく利用されます。",
      "category": "ファイル操作 (CSV)"
    },
    {
      "term": "csvモジュール",
      "explanation": "PythonでCSVファイルを簡単に読み書きするための便利な機能がまとめられた部品（モジュール）です。",
      "category": "ファイル操作 (CSV)"
    },
    {
      "term": "newline",
      "explanation": "open関数でファイルを書き込みモードで開く際に指定する引数の一つです。CSVファイルを扱う際に、意図しない空行が書き込まれるのを防ぐために `newline=''` と指定します。",
      "category": "ファイル操作 (CSV)"
    },
    {
      "term": "writerオブジェクト",
      "explanation": "csvモジュールの命令で、CSVファイルにデータを書き込むための機能を持つオブジェクトです。このオブジェクトのメソッドを使って、一行ずつデータを書き込んでいきます。",
      "category": "ファイル操作 (CSV)"
    },
    {
      "term": "writerowsメソッド",
      "explanation": "writerオブジェクトが持つ、複数の行のデータを一度にCSVファイルへ書き込むための命令（メソッド）です。リストのリスト（二次元リスト）を渡すことで、まとめて書き込めます。",
      "category": "ファイル操作 (CSV)"
    },
    {
      "term": "writerowメソッド",
      "explanation": "writerオブジェクトが持つ、一行分のデータをCSVファイルへ書き込むための命令（メソッド）です。リストを渡すことで、その要素がカンマで区切られて一行として書き込まれます。",
      "category": "ファイル操作 (CSV)"
    },
    {
      "term": "readerオブジェクト",
      "explanation": "csvモジュールの命令で、CSVファイルのデータを一行ずつ読み込むための機能を持つオブジェクトです。for文と組み合わせて使うと、一行ずつリストとしてデータを取り出せます。",
      "category": "ファイル操作 (CSV)"
    },
    {
      "term": "JSONファイル",
      "explanation": "JavaScriptのオブジェクトの書き方を元にした、データ交換用のテキストファイル形式です。 WebサービスやAPIで設定情報やデータをやり取りする際によく利用されます。",
      "category": "ファイル操作 (JSON)"
    },
    {
      "term": "jsonモジュール",
      "explanation": "PythonでJSON形式のデータを扱えるように、便利な機能がまとめられた標準ライブラリの部品（モジュール）です。",
      "category": "ファイル操作 (JSON)"
    },
    {
      "term": "dump関数",
      "explanation": "Pythonの辞書やリストなどのデータを、JSON形式の文字列に変換してファイルに書き込む（保存する）ための関数です。",
      "category": "ファイル操作 (JSON)"
    },
    {
      "term": "load関数",
      "explanation": "JSONファイルを読み込んで、Pythonの辞書やリストなどのデータに変換するための関数です。",
      "category": "ファイル操作 (JSON)"
    },
    {
      "term": "Pillowライブラリ",
      "explanation": "Pythonで画像を作成したり、リサイズや回転などの加工をしたりするための便利な機能がたくさん詰まった道具箱（ライブラリ）です。",
      "category": "画像処理"
    },
    {
      "term": "PIL.Imageモジュール",
      "explanation": "Pillowライブラリの中心的なモジュールで、画像を扱うための様々なクラスや関数がまとめられています。",
      "category": "画像処理"
    },
    {
      "term": "new関数",
      "explanation": "Pillowライブラリで、新しい画像をゼロから作成するための関数です。画像のモード（カラーか白黒かなど）やサイズを指定して、真っ新な画像を作ります。",
      "category": "画像処理"
    },
    {
      "term": "imageクラス",
      "explanation": "Pillowライブラリで画像を表現するための設計図（クラス）です。画像ファイルを開いたり、新しく作成したりすると、このクラスのオブジェクト（実体）が作られます。",
      "category": "画像処理"
    },
    {
      "term": "'L'",
      "explanation": "Pillowライブラリで扱う画像のモードの一つで、白黒（グレースケール）の画像を意味します。各ピクセルが明るさの情報だけを持ちます。",
      "category": "画像処理"
    },
    {
      "term": "RGB",
      "explanation": "Pillowライブラリで扱う画像のモードの一つで、光の三原色である赤（Red）、緑（Green）、青（Blue）を組み合わせて様々な色を表現するフルカラーの画像を意味します。",
      "category": "画像処理"
    },
    {
      "term": "RGBA",
      "explanation": "Pillowライブラリで扱う画像のモードの一つで、RGBの色の情報に加えて、透明度（Alpha）の情報も持っています。背景を透過させたい場合などに使われます。",
      "category": "画像処理"
    },
    {
      "term": "saveメソッド",
      "explanation": "Pillowライブラリで作成・加工した画像を、ファイルとして保存するための命令（メソッド）です。ファイル名や画像のフォーマット（JPEG、PNGなど）を指定できます。",
      "category": "画像処理"
    },
    {
      "term": "putpixelメソッド",
      "explanation": "画像上の指定した座標（位置）のピクセル（点）に、特定の色を設定（配置）するための命令（メソッド）です。 これを繰り返すことで、画像に点を描画できます。",
      "category": "画像処理"
    },
    {
      "term": "globモジュール",
      "explanation": "ファイルやフォルダの一覧を、ワイルドカード（`*`や`?`など）を使って条件を指定して取得するためのPythonのモジュールです。「特定のフォルダにあるテキストファイルだけ」といった探し方ができます。",
      "category": "ファイルシステム操作"
    },
    {
      "term": "recursive",
      "explanation": "globモジュールでファイルを探す際のオプションの一つです。これを`True`に設定すると、指定したフォルダの中だけでなく、その中にある全てのサブフォルダの中まで再帰的に（繰り返し）探しに行ってくれます。",
      "category": "ファイルシステム操作"
    },
    {
      "term": "shutilモジュール",
      "explanation": "ファイルやフォルダのコピー、移動、削除といった、より高度なファイル操作を行うための機能がまとめられたPythonのモジュールです。「shutil」は「shell utilities（シェルユーティリティ）」の略です。",
      "category": "ファイルシステム操作"
    },
    {
      "term": "osモジュール",
      "explanation": "オペレーティングシステム（WindowsやmacOSなど）が持つ機能、例えばフォルダを作成したり、ファイルやフォルダを操作したりするための命令がまとめられたPythonのモジュールです。",
      "category": "ファイルシステム操作"
    },
    {
      "term": "makedir関数",
      "explanation": "`os.makedirs`関数のことです。指定したパスにフォルダ（ディレクトリ）を作成します。途中のフォルダが存在しない場合でも、まとめて作成してくれる便利な機能です。",
      "category": "ファイルシステム操作"
    },
    {
      "term": "removedirs関数",
      "explanation": "`os.removedirs`関数のことです。指定したパスのフォルダを削除します。途中の親フォルダが空であれば、それらも一緒に削除していきます。",
      "category": "ファイルシステム操作"
    },
    {
      "term": "コマンドライン引数 (command-line argument)",
      "explanation": "プログラムを実行するときに、外からプログラムに渡すことができる情報のことです。 自動販売機で飲み物を買うときに、先にお金やボタンで商品（情報）を指定するのに似ています。",
      "category": "コマンドライン操作"
    },
    {
      "term": "sysモジュール",
      "explanation": "Pythonのインタプリタや実行環境に関する情報を扱ったり、操作したりするための機能がまとめられたモジュールです。",
      "category": "コマンドライン操作"
    },
    {
      "term": "argv属性",
      "explanation": "sysモジュールが持つ属性の一つで、コマンドライン引数をリストとして格納しています。リストの最初の要素（`sys.argv[0]`）は実行したプログラムのファイル名、それ以降にコマンドラインで渡された引数が順番に格納されます。",
      "category": "コマンドライン操作"
    },
    {
      "term": "Excelの仕事を自動化する",
      "explanation": "人間が手作業で行っていたExcelの定型的な作業（データの入力、集計、グラフ作成など）を、プログラムを使って自動的に処理させることです。これにより、作業時間の短縮やミスの削減が期待できます。",
      "category": "Excel操作"
    },
    {
      "term": "VBA",
      "explanation": "「Visual Basic for Applications」の略で、ExcelなどのMicrosoft Office製品に搭載されているプログラミング言語です。Excel上での様々な操作を自動化するために使われます。",
      "category": "Excel操作"
    },
    {
      "term": "openpyxlモジュール",
      "explanation": "PythonでExcelファイル（.xlsx形式）を読み書きするための非常に人気のあるライブラリです。 Excelを直接開かずに、プログラムでセルの値を読み取ったり、新しいデータを書き込んだりできます。",
      "category": "Excel操作"
    },
    {
      "term": "Workbookクラス",
      "explanation": "openpyxlにおいて、Excelファイル全体（ワークブック）を表すための設計図（クラス）です。 ファイルを読み込んだり、新規作成したりすると、このクラスのオブジェクトが作られます。",
      "category": "Excel操作"
    },
    {
      "term": "value属性",
      "explanation": "openpyxlにおいて、セルオブジェクトが持つ属性の一つで、そのセルに入力されている値を取得したり、新しい値を設定したりするために使います。",
      "category": "Excel操作"
    },
    {
      "term": "load_workbook関数",
      "explanation": "openpyxlの関数で、既存のExcelファイルを読み込んで、その内容を操作するためのWorkbookオブジェクトを生成します。",
      "category": "Excel操作"
    },
    {
      "term": "iter_rowsメソッド",
      "explanation": "openpyxlのWorksheetオブジェクトが持つメソッドで、シート内のセルを行単位で順番に取り出すことができます。for文と組み合わせて、一行ずつデータを処理する際に便利です。",
      "category": "Excel操作"
    },
    {
      "term": "iter_rowsメソッドの引数 min_row",
      "explanation": "iter_rowsメソッドで、データの取得を開始する行番号を指定するための引数です。例えば `min_row=2` とすると、2行目から取得を開始します。",
      "category": "Excel操作"
    },
    {
      "term": "iter_rowsメソッドの引数 max_row",
      "explanation": "iter_rowsメソッドで、データの取得を終了する行番号を指定するための引数です。",
      "category": "Excel操作"
    },
    {
      "term": "iter_rowsメソッドの引数 min_col",
      "explanation": "iter_rowsメソッドで、データの取得を開始する列番号を指定するための引数です。A列が1、B列が2となります。",
      "category": "Excel操作"
    },
    {
      "term": "iter_rowsメソッドの引数 max_col",
      "explanation": "iter_rowsメソッドで、データの取得を終了する列番号を指定するための引数です。",
      "category": "Excel操作"
    },
    {
      "term": "iter_rowsメソッドの引数 values_only",
      "explanation": "iter_rowsメソッドの引数で、`True`に設定すると、セルオブジェクトそのものではなく、セルに入力されている値だけをタプルとして取り出すことができます。",
      "category": "Excel操作"
    },
    {
      "term": "iter_colsメソッド",
      "explanation": "openpyxlのWorksheetオブジェクトが持つメソッドで、iter_rowsの列バージョンです。シート内のセルを列単位で順番に取り出すことができます。",
      "category": "Excel操作"
    },
    {
      "term": "psutil",
      "explanation": "「process and system utilities」の略で、実行中のコンピュータのCPU使用率、メモリ使用量、ディスク使用量といったシステム情報を取得するためのPythonライブラリです。",
      "category": "システム情報取得"
    },
    {
      "term": "cpu_percent関数",
      "explanation": "psutilライブラリの関数で、CPUの使用率をパーセントで取得します。システムの現在の負荷状況を知ることができます。",
      "category": "システム情報取得"
    },
    {
      "term": "interval",
      "explanation": "cpu_percent関数などで使用される引数で、CPU使用率を測定する時間の間隔（秒数）を指定します。指定しないと、前回呼び出した時からの平均使用率を返します。",
      "category": "システム情報取得"
    },
    {
      "term": "percpu",
      "explanation": "cpu_percent関数などで使用される引数で、`True`に設定すると、CPU全体の平均使用率ではなく、CPUのコアごとの使用率をリストで返します。",
      "category": "システム情報取得"
    },
    {
      "term": "virtual_memory関数",
      "explanation": "psutilライブラリの関数で、システムの物理メモリ（RAM）の使用状況に関する情報を取得します。合計メモリ、使用可能メモリ、使用率などを知ることができます。",
      "category": "システム情報取得"
    },
    {
      "term": "percent属性",
      "explanation": "virtual_memory関数やdisk_usage関数が返すオブジェクトの属性の一つで、メモリやディスクの使用率をパーセントで示します。",
      "category": "システム情報取得"
    },
    {
      "term": "collectionsモジュール",
      "explanation": "Pythonの標準ライブラリの一つで、リストや辞書などをより便利に、または高性能に扱うための特別なデータ型がまとめられています。",
      "category": "システム情報取得"
    },
    {
      "term": "namedtuple関数",
      "explanation": "collectionsモジュールにある関数で、タプルの各要素に名前を付けてアクセスできるようにする機能です。`point.x` のように、インデックス番号ではなく名前で値を取り出せるため、コードが読みやすくなります。",
      "category": "システム情報取得"
    },
    {
      "term": "disk_usage関数",
      "explanation": "psutilライブラリの関数で、指定したパスのディスク（ハードディスクやSSDなど）の使用状況（合計容量、使用量、空き容量、使用率）を取得します。",
      "category": "システム情報取得"
    },
    {
      "term": "SMTPサーバ",
      "explanation": "「Simple Mail Transfer Protocol」の略で、電子メールを送信・転送するためのサーバー（コンピューター）です。 手紙をポストに投函すると郵便局が相手に届けてくれるように、メール送信の指示をするとこのサーバーが相手に届けてくれます。",
      "category": "メール送信"
    },
    {
      "term": "Gmail",
      "explanation": "Googleが提供する無料のEメールサービスです。PythonのプログラムからGmailのSMTPサーバーを利用して、自動でメールを送信することが可能です。",
      "category": "メール送信"
    },
    {
      "term": "email.mime.textモジュール",
      "explanation": "Pythonでメールの本文を作成するためのモジュールです。特に、テキスト形式のメールメッセージを作成する際に使われます。",
      "category": "メール送信"
    },
    {
      "term": "MIMETextクラス",
      "explanation": "email.mime.textモジュールにあるクラスで、メールの本文となるテキストと、その形式（プレーンテキストかHTMLかなど）や文字コードを指定して、メールメッセージのオブジェクトを作成します。",
      "category": "メール送信"
    },
    {
      "term": "smtplibモジュール",
      "explanation": "PythonでSMTPサーバーに接続し、メールを送信するための機能がまとめられた標準ライブラリのモジュールです。",
      "category": "メール送信"
    },
    {
      "term": "sendmailメソッド",
      "explanation": "smtplibのSMTPオブジェクトが持つメソッドで、実際にメールを送信する命令です。送信元アドレス、宛先アドレス、メールのメッセージ本文を引数として渡します。",
      "category": "メール送信"
    },
    {
      "term": "SMTPクラスのメソッド ehlo",
      "explanation": "SMTPサーバーに接続後、こちらの身元を名乗り、挨拶を交わすための命令（メソッド）です。通信の開始を宣言する役割があります。",
      "category": "メール送信"
    },
    {
      "term": "SMTPクラスのメソッド starttls",
      "explanation": "SMTPサーバーとの通信を暗号化するための命令（メソッド）です。メールの内容やパスワードが盗み見られるのを防ぐために、ログインやメール送信の前に行います。",
      "category": "メール送信"
    },
    {
      "term": "SMTPクラスのメソッド login",
      "explanation": "SMTPサーバーにユーザー名とパスワードを使ってログインするための命令（メソッド）です。認証が必要なサーバー（Gmailなど）を利用する際に必須です。",
      "category": "メール送信"
    }
  ]